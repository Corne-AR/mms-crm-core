===== ROOT FILES =====

--- FILE: .env ---
APP_NAME="MMS Design CRM"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost/mms-crm/public

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=mms_crm
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MAIL_MAILER=smtp
MAIL_HOST=your.smtp.host
MAIL_PORT=587
MAIL_USERNAME=your@email.com
MAIL_PASSWORD=yourpassword
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your@email.com
MAIL_FROM_NAME="${APP_NAME}"

PDF_DRIVER=dompdf

--- FILE: composer.json ---
{
    "name": "mmsdesign/mms-crm",
    "description": "MMS CRM System - Dealer & Sub-Dealer Quoting & Invoicing",
    "type": "project",
    "require": {
        "php": "^8.2",
        "laravel/framework": "^12.0",
        "filament/filament": "^3.0",
        "barryvdh/laravel-dompdf": "^3.1"
    },
    "require-dev": {
        "fakerphp/faker": "^1.9.1",
        "phpunit/phpunit": "^10.0",
        "larastan/larastan": "^3.4"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Seeders\\": "database/seeders/"
        },
        "files": [
            "app/Helpers/helpers.php"
        ]
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ]
    }
}


--- FILE: package.json ---
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "@tailwindcss/vite": "^4.0.0",
        "axios": "^1.8.2",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^1.2.0",
        "tailwindcss": "^4.0.0",
        "vite": "^6.2.4"
    }
}


--- FILE: phpstan.neon ---
includes:
    - ./vendor/larastan/larastan/extension.neon

parameters:
    paths:
        - app
        - database/migrations
        - database/seeders
        - routes
    level: 5

    excludePaths:
        - tests/*
        - vendor/*

    checkMissingTypehints: true
    checkUninitializedProperties: true


===== FOLDER: app =====

--- FILE: app\Filament\Resources\CustomerResource.php ---
<?php

namespace App\Filament\Resources;

use App\Models\Customer;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Hidden;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Resources\CustomerResource\Pages;
use Illuminate\Support\Facades\Auth;

class CustomerResource extends Resource
{
    protected static ?string $model = Customer::class;
    protected static ?string $navigationIcon = 'heroicon-o-user-group';
    protected static ?string $navigationLabel = 'Customers';
    protected static ?string $navigationGroup = 'CRM';

public static function form(Forms\Form $form): Forms\Form
{
    return $form->schema([
        TextInput::make('company_name')->required(),
		Textarea::make('address')
			->label('Address')
			->rows(3)
			->columnSpanFull()
			->placeholder('Enter full address')
			->required(false),
        TextInput::make('contact_full_name')->required(),
        TextInput::make('email')->email()->required(),
        TextInput::make('phone')->required(),
        TextInput::make('vendor_nr')->label('Vendor Number')->nullable(),
        TextInput::make('vat_nr')->label('VAT Number')->nullable(),
        Select::make('category')
            ->options([
                'Irigation' => 'Irigation',
                'Consultant' => 'Consultant',
                'Contractor' => 'Contractor',
                'Government' => 'Government',
                'Mine' => 'Mine',
                'Quantity Surveying' => 'Quantity Surveying',
                'Survey' => 'Survey',
                'Town Planning' => 'Town Planning',
                'Golf Course' => 'Golf Course',
                'Municipality' => 'Municipality',
                'Landscaping' => 'Landscaping',
                'Architects' => 'Architects',
                'Supplier' => 'Supplier',
                'Farm' => 'Farm',
                'Reseller' => 'Reseller',
                'Other' => 'Other',
            ])
            ->required(),
        Select::make('language')
            ->options(['Afrikaans' => 'Afrikaans', 'English' => 'English', 'Other' => 'Other'])
            ->default('English')
            ->required(),
        Select::make('type')
            ->options(['Local' => 'Local', 'International' => 'International', 'Other' => 'Other'])
            ->default('Local')
            ->required(),
        Select::make('currency')
            ->options(['ZAR' => 'ZAR', 'USD' => 'USD', 'GBP' => 'GBP', 'EUR' => 'EUR', 'Other' => 'Other'])
            ->default('ZAR')
            ->required(),
        Textarea::make('notes')
			->label('Notes')
			->rows(3)
			->nullable()
			->columnSpanFull(),
		Hidden::make('created_by')
			->default(fn () => Auth::id())
			->required()
			->dehydrated()
			->hidden(),
    ]);
}

public static function table(Tables\Table $table): Tables\Table
{
    return $table
        ->columns([
            Tables\Columns\TextColumn::make('company_name')
                ->sortable()
                ->searchable(),

            Tables\Columns\TextColumn::make('contact_full_name')
                ->searchable(),

            Tables\Columns\TextColumn::make('email')
                ->searchable(),

            Tables\Columns\TextColumn::make('phone')
                ->searchable(),

            Tables\Columns\TextColumn::make('vendor_nr')
                ->label('Vendor #')
                ->searchable(),

            Tables\Columns\TextColumn::make('category'),

            Tables\Columns\TextColumn::make('language'),

            Tables\Columns\TextColumn::make('currency'),

            Tables\Columns\TextColumn::make('created_at')
                ->label('Created')
                ->dateTime()
                ->sortable(),
        ])
        ->filters([
            Tables\Filters\SelectFilter::make('category')
                ->options([
                    'Irigation' => 'Irigation',
                    'Consultant' => 'Consultant',
                    'Contractor' => 'Contractor',
                    'Government' => 'Government',
                    'Mine' => 'Mine',
                    'Quantity Surveying' => 'Quantity Surveying',
                    'Survey' => 'Survey',
                    'Town Planning' => 'Town Planning',
                    'Golf Course' => 'Golf Course',
                    'Municipality' => 'Municipality',
                    'Landscaping' => 'Landscaping',
                    'Architects' => 'Architects',
                    'Supplier' => 'Supplier',
                    'Farm' => 'Farm',
                    'Reseller' => 'Reseller',
                    'Other' => 'Other',
                ])
                ->label('Category'),

            Tables\Filters\SelectFilter::make('language')
                ->options([
                    'Afrikaans' => 'Afrikaans',
                    'English' => 'English',
                    'Other' => 'Other',
                ])
                ->label('Language'),

            Tables\Filters\SelectFilter::make('currency')
                ->options([
                    'ZAR' => 'ZAR',
                    'USD' => 'USD',
                    'GBP' => 'GBP',
                    'EUR' => 'EUR',
                    'Other' => 'Other',
                ])
                ->label('Currency'),

            Tables\Filters\Filter::make('created_at')
                ->form([
                    Forms\Components\DatePicker::make('from')->label('From'),
                    Forms\Components\DatePicker::make('until')->label('Until'),
                ])
                ->query(function ($query, array $data) {
                    return $query
                        ->when($data['from'], fn ($query, $date) => $query->whereDate('created_at', '>=', $date))
                        ->when($data['until'], fn ($query, $date) => $query->whereDate('created_at', '<=', $date));
                }),
        ])
        ->defaultSort('created_at', 'desc');
}


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCustomers::route('/'),
            'create' => Pages\CreateCustomer::route('/create'),
            'edit' => Pages\EditCustomer::route('/{record}/edit'),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource.php ---
<?php

namespace App\Filament\Resources;

use App\Models\User;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Resources\UserResource\Pages;
use Illuminate\Support\Facades\Hash;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $navigationGroup = 'Admin';

    public static function form(Forms\Form $form): Forms\Form
    {
        return $form->schema([
            TextInput::make('name')
                ->label('Username')
                ->required()
				->unique(ignoreRecord: true),

            TextInput::make('email')
				->email()
				->required()
				->unique(ignoreRecord: true),


			Section::make('User Password')
				->schema([
					Checkbox::make('change_password')
						->label('Change Password?')
						->reactive()
						->visible(fn ($livewire) => $livewire instanceof Pages\EditUser),

					TextInput::make('password')
						->password()
						->label('Password')
						->dehydrateStateUsing(fn ($state) => filled($state) ? Hash::make($state) : null)
						->dehydrated(fn ($state) => filled($state))
						->required(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password'))
						->visible(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password')),

					TextInput::make('password_confirmation')
						->password()
						->label('Confirm Password')
						->same('password')
						->required(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password'))
						->visible(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password')),
				])
				->columns(1)
				->columnSpan('full'),
			
            TextInput::make('company_name')
                ->required(),

            Textarea::make('address')
                ->rows(3)
                ->placeholder('Multiline address...')
                ->required(false),

            TextInput::make('full_name')
                ->label('Full Name')
                ->required(),

            TextInput::make('phone')
                ->required(),

            TextInput::make('vat_nr')
                ->label('VAT Number')
                ->nullable(),

			FileUpload::make('logo_path')
				->label('Company Logo')
				->directory('logos')
				->image()
				->imageEditor()
				->imageResizeMode('contain') // Required for resize to work
				->imageResizeTargetWidth('300')
				->imageResizeUpscale(false) // Prevents enlarging small images
				->previewable(true)
				->nullable(),



            Select::make('role')
                ->options([
                    'admin' => 'Admin',
                    'key_dealer' => 'Key Dealer',
                    'sub_dealer' => 'Sub Dealer',
                ])
                ->required(),
        ]);
    }

    public static function table(Tables\Table $table): Tables\Table
    {
        return $table
            ->columns([
                TextColumn::make('name'),
                TextColumn::make('email'),
                TextColumn::make('company_name'),
                TextColumn::make('full_name'),
                TextColumn::make('role')->badge(),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\CreateCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateCustomer extends CreateRecord
{
    protected static string $resource = CustomerResource::class;
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\EditCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditCustomer extends EditRecord
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\ListCustomers.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListCustomers extends ListRecords
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\CreateUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    protected static string $resource = UserResource::class;
}


--- FILE: app\Filament\Resources\UserResource\Pages\EditUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\ListUsers.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


--- FILE: app\Helpers\helpers.php ---
<?php

// Global helper functions can go here.



--- FILE: app\Http\Controllers\Controller.php ---
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


--- FILE: app\Http\Controllers\CustomerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use Illuminate\Http\Request;

class CustomerController extends Controller
{
    public function index() {
        return Customer::all();
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'company_name' => 'required',
            'contact_person' => 'required',
            'email' => 'required|email',
            'phone' => 'required',
            'vat_number' => 'nullable',
            'vendor_number' => 'nullable',
            'catagory' => 'required',
            'type' => 'nullable',
            'language' => 'nullable',
            'currency' => 'nullable',
            'address' => 'nullable'
        ]);
        return Customer::create($data);
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function show(Customer $customer) {
        return $customer;
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function update(Request $request, Customer $customer) {
        $customer->update($request->all());
        return $customer;
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function destroy(Customer $customer) {
        $customer->delete();
        return response()->noContent();
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function indexView() {
        return view('customers.index');
    }
}

--- FILE: app\Http\Controllers\DashboardController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class DashboardController extends Controller
{
    public function index()
    {
        return response()->json(['message' => 'DashboardController ready.']);
    }
}


--- FILE: app\Http\Controllers\DealerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Dealer;
use Illuminate\Http\Request;

class DealerController extends Controller
{
    public function index() {
        return Dealer::all();
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'dealer_name' => 'required',
            'contact_person' => 'nullable',
            'email' => 'nullable|email',
            'phone' => 'nullable',
            'address' => 'nullable',
            'bank_details' => 'nullable',
            'type' => 'nullable',
            'logo' => 'nullable'
        ]);
        return Dealer::create($data);
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function show(Dealer $dealer) {
        return $dealer;
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function update(Request $request, Dealer $dealer) {
        $dealer->update($request->all());
        return $dealer;
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function destroy(Dealer $dealer) {
        $dealer->delete();
        return response()->noContent();
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function indexView() {
        return view('dealers.index');
    }
}

--- FILE: app\Http\Controllers\InvoiceController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Invoice;
use Illuminate\Http\Request;

class InvoiceController extends Controller
{
    public function index() {
        return Invoice::with('items')->get();
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'quote_id' => 'required|exists:quotes,id',
            'invoice_number' => 'required|unique:invoices',
            'invoice_date' => 'required|date',
            'status' => 'required|string',
            'subtotal' => 'required|numeric',
            'vat_amount' => 'required|numeric',
            'total_amount' => 'required|numeric',
            'currency' => 'required|string'
        ]);
        return Invoice::create($data);
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function show(Invoice $invoice) {
        return $invoice->load('items');
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function update(Request $request, Invoice $invoice) {
        $invoice->update($request->all());
        return $invoice;
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function destroy(Invoice $invoice) {
        $invoice->delete();
        return response()->noContent();
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function showView($id) {
        return view('invoices.show');
    }
}

--- FILE: app\Http\Controllers\KitController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Kit;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class KitController extends Controller
{
    // GET /api/kit
    public function index()
    {
        return Kit::orderBy('created_at', 'desc')->get();
    }

    // GET /api/kits/{id}
    public function show($id)
    {
        return Kit::findOrFail($id);
    }

    // POST /api/kits
    public function store(Request $request)
    {
        $validated = $request->validate([
            'dealer_id' => 'nullable|exists:dealers,id',
            'kit_name' => 'required|string|max:255',
            'kit_description' => 'nullable|string',
            'price' => 'required|numeric',
            'vat_applicable' => 'required|boolean',
            'discount_allowed' => 'required|boolean',
        ]);

        $kit = Kit::create($validated);

        return response()->json($kit, 201);
    }

    // DELETE /api/kit/{id}
    public function destroy($id)
    {
        Kit::destroy($id);
        return response()->json(null, 204);
    }
}


--- FILE: app\Http\Controllers\PermissionsController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PermissionsController extends Controller
{
    // GET /api/permissions
    public function index()
    {
        // TODO: Implement permissions listing (Spatie removed)
        return response()->json(['message' => 'Permissions listing not implemented'], 501);
    }

    // POST /api/permissions
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|unique:permissions,name',
            'guard_name' => 'required|string',
        ]);

        // TODO: Implement permission creation (Spatie removed)
        $permission = [
            'name' => $validated['name'],
            'guard_name' => $validated['guard_name'],
        ];

        return response()->json($permission, 201);
    }
}


--- FILE: app\Http\Controllers\ProductController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function index() {
        return Product::all();
    }

    public function store(Request $request) {
        $data = $request->validate([
            'name' => 'required',
            'description' => 'nullable',
            'price' => 'required|numeric',
            'currency' => 'required|string'
        ]);
        return Product::create($data);
    }

    public function show(Product $product) {
        return $product;
    }

    public function update(Request $request, Product $product) {
        $product->update($request->all());
        return $product;
    }

    public function destroy(Product $product) {
        $product->delete();
        return response()->noContent();
    }
}

--- FILE: app\Http\Controllers\QuoteController.php ---
<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreQuoteRequest;
use App\Models\Quote;
use App\Models\QuoteItem;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\RedirectResponse;

class QuoteController extends Controller
{
    public function store(StoreQuoteRequest $request): RedirectResponse
    {
        DB::beginTransaction();

        try {
            $quote = Quote::create([
                'dealer_id' => auth()->user()->dealer_id,
                'customer_id' => $request->customer_id,
                'quote_number' => 'Q-' . now()->format('YmdHis'),
                'subtotal' => 0,
                'vat_amount' => 0,
                'total_amount' => 0,
            ]);

            $subtotal = 0;
            foreach ($request->product as $index => $productName) {
                $qty = (int)$request->qty[$index];
                $unitPrice = 100; // Placeholder: replace with real product price lookup
                $lineTotal = $qty * $unitPrice;
                $subtotal += $lineTotal;

                QuoteItem::create([
                    'quote_id' => $quote->id,
                    'product_id' => 1, // TODO: fetch actual product ID
                    'qty' => $qty,
                    'unit_price' => $unitPrice,
                    'line_discount' => 0,
                ]);
            }

            $vat = $subtotal * 0.15;
            $quote->update([
                'subtotal' => $subtotal,
                'vat_amount' => $vat,
                'total_amount' => $subtotal + $vat,
            ]);

            DB::commit();

            return redirect()->route('quotes.index')->with('status', 'Quote created successfully!');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Error creating quote: ' . $e->getMessage());
        }
    }
}


--- FILE: app\Http\Controllers\RolesController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\UserRole;
use Illuminate\Http\Request;

class RolesController extends Controller
{
    // GET /api/roles
    public function index()
    {
        return UserRole::orderBy('created_at', 'desc')->get();
    }

    // POST /api/roles
    public function store(Request $request)
    {
        $validated = $request->validate([
            'role_name' => 'required|string|unique:user_roles,role_name',
        ]);

        $role = UserRole::create($validated);

        return response()->json($role, 201);
    }
}


--- FILE: app\Http\Controllers\SubDealerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class SubDealerController extends Controller
{
    // GET /api/subdealers
    public function index()
    {
        return User::where('role', 'sub_dealer')->orderBy('created_at', 'desc')->get();
    }

    // GET /api/subdealers/{id}
    public function show($id)
    {
        return User::where('role', 'sub_dealer')->findOrFail($id);
    }

    // You can add more sub-dealer specific APIs if needed
}


--- FILE: app\Http\Controllers\TermsConditionController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class TermsConditionController extends Controller
{
    public function index()
    {
        return response()->json(['message' => 'TermsConditionController ready.']);
    }
}


--- FILE: app\Http\Controllers\UserController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class UserController extends Controller
{
    // GET /api/users
    public function index()
    {
        return User::orderBy('created_at', 'desc')->get();
    }

    // GET /api/users/{id}
    public function show($id)
    {
        return User::findOrFail($id);
    }

    // POST /api/users
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|string|min:8',
            'role' => 'required|in:admin,key_dealer,sub_dealer',
            'region_id' => 'nullable|exists:sub_dealer_regions,id',
        ]);

        $validated['password'] = Hash::make($validated['password']);

        $user = User::create($validated);

        return response()->json($user, 201);
    }

    // DELETE /api/users/{id}
    public function destroy($id)
    {
        User::destroy($id);
        return response()->json(null, 204);
    }
}


--- FILE: app\Http\Requests\StoreQuoteRequest.php ---
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreQuoteRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'customer_id' => 'required|exists:customers,id',
            'product.*' => 'required|string',
            'qty.*' => 'required|numeric|min:1',
        ];
    }
}


--- FILE: app\Mail\QuoteSentMail.php ---
<?php

namespace App\Mail;

use App\Models\Quote;
use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;
use Barryvdh\DomPDF\Facade\Pdf;

class QuoteSentMail extends Mailable
{
    use Queueable, SerializesModels;

    public $quote;

    public function __construct(Quote $quote)
    {
        $this->quote = $quote;
    }

    public function build()
    {
        $pdf = Pdf::loadView('pdf.quote', ['quote' => $this->quote]);
        $filename = 'quote_' . $this->quote->quote_number . '.pdf';

        return $this->subject('Your Quote from ' . $this->quote->subdealer->company_name)
                    ->markdown('emails.quotes.sent')
                    ->attachData($pdf->output(), $filename);
    }
}


--- FILE: app\Models\Customer.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Dealer;
use App\Models\Quote;
use App\Models\Invoice;
use App\Models\CustomerNote;
use App\Models\CustomerContact;

class Customer extends Model
{
    use HasFactory;

    protected $fillable = [
        'company_name',
        'contact_person',
        'email',
        'phone',
        'vat_number',
        'vendor_number',
        'catagory',
        'type',
        'language',
        'currency',
        'address',
    ];

    // Relationships
    public function quotes()
    {
        return $this->hasMany(Quote::class);
    }

    public function invoices()
    {
        return $this->hasMany(Invoice::class);
    }

    public function notes()
    {
        return $this->hasMany(CustomerNote::class);
    }

    public function contacts()
    {
        return $this->hasMany(CustomerContact::class);
    }

    public function dealers()
    {
        return $this->belongsToMany(Dealer::class, 'customer_sub_dealer_links');
    }
}


--- FILE: app\Models\Dealer.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Dealer extends Model
{
    use HasFactory;

    protected $fillable = [
        'dealer_name', 'contact_person', 'email', 'phone',
        'address', 'bank_details', 'type', 'logo'
    ];

    public function customers() {
        return $this->hasMany(Customer::class);
    }
}


--- FILE: app\Models\Invoice.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Invoice extends Model
{
    use HasFactory;

    protected $fillable = [
        'quote_id', 'invoice_number', 'issue_date', 'due_date',
        'status', 'subtotal', 'vat_amount', 'total_amount', 'currency'
    ];

    public function quote() {
        return $this->belongsTo(Quote::class);
    }

    public function items() {
        return $this->hasMany(InvoiceItem::class);
    }
}


--- FILE: app\Models\InvoiceItem.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class InvoiceItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'invoice_id', 'product_id', 'qty', 'unit_price', 'line_discount'
    ];

    public function invoice() {
        return $this->belongsTo(Invoice::class);
    }

    public function product() {
        return $this->belongsTo(Product::class);
    }
}

--- FILE: app\Models\Kit.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\KitItem;
use App\Models\QuoteKit;

class Kit extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'description',
        'price',
        'vat_applicable',
        'discount_allowed',
    ];

    public function items()
    {
        return $this->hasMany(KitItem::class);
    }

    public function quoteKits()
    {
        return $this->hasMany(QuoteKit::class);
    }
}


--- FILE: app\Models\KitItem.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Kit;
use App\Models\Product;

class KitItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'kit_id',
        'product_id',
        'qty',
    ];

    public function kit()
    {
        return $this->belongsTo(Kit::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
}


--- FILE: app\Models\Product.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Product extends Model
{
    use HasFactory;

    protected $fillable = [
        'name', 'description', 'price', 'currency'
    ];

    public function quoteItems() {
        return $this->hasMany(QuoteItem::class);
    }

    public function kitItems() {
        return $this->hasMany(KitItem::class);
    }

    public function invoiceItems() {
        return $this->hasMany(InvoiceItem::class);
    }
}

--- FILE: app\Models\Quote.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;
use App\Models\Customer;
use App\Models\QuoteItem;
use App\Models\QuoteKit;
use App\Models\QuoteStatus;
use App\Models\TermsCondition;

class Quote extends Model
{
    use HasFactory;

    protected $fillable = [
        'quote_number',
        'subdealer_id',
        'customer_id',
        'user_id',
        'quote_date',
        'status',
        'terms',
        'subtotal',
        'vat_amount',
        'total_amount',
        'currency',
        'is_pdf_generated',
    ];

    protected $casts = [
        'quote_date' => 'date',
        'terms' => 'array',
        'is_pdf_generated' => 'boolean',
    ];

    // Relationships
    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    public function subdealer()
    {
        return $this->belongsTo(User::class, 'subdealer_id');
    }

    public function createdBy()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function items()
    {
        return $this->hasMany(QuoteItem::class);
    }

    public function kits()
    {
        return $this->hasMany(QuoteKit::class);
    }

    public function status()
    {
        return $this->belongsTo(QuoteStatus::class, 'status', 'name');
    }

    public function termsConditions()
    {
        return $this->belongsToMany(TermsCondition::class, 'quote_terms_link');
    }
}


--- FILE: app\Models\QuoteItem.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Quote;
use App\Models\Product;

class QuoteItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'quote_id',
        'product_id',
        'qty',
        'unit_price',
        'line_discount',
    ];

    public function quote()
    {
        return $this->belongsTo(Quote::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
}


--- FILE: app\Models\SubDealerRegion.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class SubDealerRegion extends Model
{
    use HasFactory;

    protected $fillable = ['region_name'];

    public function users() {
        return $this->hasMany(User::class);
    }
}

--- FILE: app\Models\User.php ---
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

use App\Models\SubDealerRegion;
use App\Models\UserRole;
use App\Models\Quote;
use App\Models\Invoice;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'phone',
        'address',
        'banking_details',
        'vat_number',
        'logo_path',
        'role',
        'region_id',
        'role_id',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    // Relationships
    public function region()
    {
        return $this->belongsTo(SubDealerRegion::class);
    }

    public function role()
    {
        return $this->belongsTo(UserRole::class);
    }

    public function quotes()
    {
        return $this->hasMany(Quote::class);
    }

    public function invoices()
    {
        return $this->hasMany(Invoice::class);
    }
}


--- FILE: app\Models\UserRole.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserRole extends Model
{
    use HasFactory;

    protected $fillable = ['role_name'];

    public function users()
    {
        return $this->hasMany(User::class);
    }
}


--- FILE: app\Providers\AppServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Gate;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
	public function boot()
	{
		$this->registerPolicies();

		Gate::define('viewInternalDashboard', function ($user) {
			return $user->role === 'admin' || $user->role === 'internal';
		});

		Gate::define('viewDealerDashboard', function ($user) {
			return $user->role === 'dealer' || $user->role === 'sub-dealer';
		});
	}
}


--- FILE: app\Providers\Filament\AdminPanelProvider.php ---
<?php

namespace App\Providers\Filament;

use Filament\Http\Middleware\Authenticate;
use Filament\Http\Middleware\AuthenticateSession;
use Filament\Http\Middleware\DisableBladeIconComponents;
use Filament\Http\Middleware\DispatchServingFilamentEvent;
use Filament\Pages;
use Filament\Panel;
use Filament\PanelProvider;
use Filament\Support\Colors\Color;
use Filament\Widgets;
use Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse;
use Illuminate\Cookie\Middleware\EncryptCookies;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken;
use Illuminate\Routing\Middleware\SubstituteBindings;
use Illuminate\Session\Middleware\StartSession;
use Illuminate\View\Middleware\ShareErrorsFromSession;

class AdminPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->default()
            ->id('admin')
            ->path('admin')
            ->login()
            ->colors([
                'primary' => Color::Amber,
            ])
            ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\Filament\\Resources')
            ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\Filament\\Pages')
            ->pages([
                Pages\Dashboard::class,
            ])
            ->discoverWidgets(in: app_path('Filament/Widgets'), for: 'App\\Filament\\Widgets')
            ->widgets([
                Widgets\AccountWidget::class,
                Widgets\FilamentInfoWidget::class,
            ])
            ->middleware([
                EncryptCookies::class,
                AddQueuedCookiesToResponse::class,
                StartSession::class,
                AuthenticateSession::class,
                ShareErrorsFromSession::class,
                VerifyCsrfToken::class,
                SubstituteBindings::class,
                DisableBladeIconComponents::class,
                DispatchServingFilamentEvent::class,
            ])
            ->authMiddleware([
                Authenticate::class,
            ]);
    }
}


===== FOLDER: app/Filament =====

--- FILE: app\Filament\Resources\CustomerResource.php ---
<?php

namespace App\Filament\Resources;

use App\Models\Customer;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Hidden;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Resources\CustomerResource\Pages;
use Illuminate\Support\Facades\Auth;

class CustomerResource extends Resource
{
    protected static ?string $model = Customer::class;
    protected static ?string $navigationIcon = 'heroicon-o-user-group';
    protected static ?string $navigationLabel = 'Customers';
    protected static ?string $navigationGroup = 'CRM';

public static function form(Forms\Form $form): Forms\Form
{
    return $form->schema([
        TextInput::make('company_name')->required(),
		Textarea::make('address')
			->label('Address')
			->rows(3)
			->columnSpanFull()
			->placeholder('Enter full address')
			->required(false),
        TextInput::make('contact_full_name')->required(),
        TextInput::make('email')->email()->required(),
        TextInput::make('phone')->required(),
        TextInput::make('vendor_nr')->label('Vendor Number')->nullable(),
        TextInput::make('vat_nr')->label('VAT Number')->nullable(),
        Select::make('category')
            ->options([
                'Irigation' => 'Irigation',
                'Consultant' => 'Consultant',
                'Contractor' => 'Contractor',
                'Government' => 'Government',
                'Mine' => 'Mine',
                'Quantity Surveying' => 'Quantity Surveying',
                'Survey' => 'Survey',
                'Town Planning' => 'Town Planning',
                'Golf Course' => 'Golf Course',
                'Municipality' => 'Municipality',
                'Landscaping' => 'Landscaping',
                'Architects' => 'Architects',
                'Supplier' => 'Supplier',
                'Farm' => 'Farm',
                'Reseller' => 'Reseller',
                'Other' => 'Other',
            ])
            ->required(),
        Select::make('language')
            ->options(['Afrikaans' => 'Afrikaans', 'English' => 'English', 'Other' => 'Other'])
            ->default('English')
            ->required(),
        Select::make('type')
            ->options(['Local' => 'Local', 'International' => 'International', 'Other' => 'Other'])
            ->default('Local')
            ->required(),
        Select::make('currency')
            ->options(['ZAR' => 'ZAR', 'USD' => 'USD', 'GBP' => 'GBP', 'EUR' => 'EUR', 'Other' => 'Other'])
            ->default('ZAR')
            ->required(),
        Textarea::make('notes')
			->label('Notes')
			->rows(3)
			->nullable()
			->columnSpanFull(),
		Hidden::make('created_by')
			->default(fn () => Auth::id())
			->required()
			->dehydrated()
			->hidden(),
    ]);
}

public static function table(Tables\Table $table): Tables\Table
{
    return $table
        ->columns([
            Tables\Columns\TextColumn::make('company_name')
                ->sortable()
                ->searchable(),

            Tables\Columns\TextColumn::make('contact_full_name')
                ->searchable(),

            Tables\Columns\TextColumn::make('email')
                ->searchable(),

            Tables\Columns\TextColumn::make('phone')
                ->searchable(),

            Tables\Columns\TextColumn::make('vendor_nr')
                ->label('Vendor #')
                ->searchable(),

            Tables\Columns\TextColumn::make('category'),

            Tables\Columns\TextColumn::make('language'),

            Tables\Columns\TextColumn::make('currency'),

            Tables\Columns\TextColumn::make('created_at')
                ->label('Created')
                ->dateTime()
                ->sortable(),
        ])
        ->filters([
            Tables\Filters\SelectFilter::make('category')
                ->options([
                    'Irigation' => 'Irigation',
                    'Consultant' => 'Consultant',
                    'Contractor' => 'Contractor',
                    'Government' => 'Government',
                    'Mine' => 'Mine',
                    'Quantity Surveying' => 'Quantity Surveying',
                    'Survey' => 'Survey',
                    'Town Planning' => 'Town Planning',
                    'Golf Course' => 'Golf Course',
                    'Municipality' => 'Municipality',
                    'Landscaping' => 'Landscaping',
                    'Architects' => 'Architects',
                    'Supplier' => 'Supplier',
                    'Farm' => 'Farm',
                    'Reseller' => 'Reseller',
                    'Other' => 'Other',
                ])
                ->label('Category'),

            Tables\Filters\SelectFilter::make('language')
                ->options([
                    'Afrikaans' => 'Afrikaans',
                    'English' => 'English',
                    'Other' => 'Other',
                ])
                ->label('Language'),

            Tables\Filters\SelectFilter::make('currency')
                ->options([
                    'ZAR' => 'ZAR',
                    'USD' => 'USD',
                    'GBP' => 'GBP',
                    'EUR' => 'EUR',
                    'Other' => 'Other',
                ])
                ->label('Currency'),

            Tables\Filters\Filter::make('created_at')
                ->form([
                    Forms\Components\DatePicker::make('from')->label('From'),
                    Forms\Components\DatePicker::make('until')->label('Until'),
                ])
                ->query(function ($query, array $data) {
                    return $query
                        ->when($data['from'], fn ($query, $date) => $query->whereDate('created_at', '>=', $date))
                        ->when($data['until'], fn ($query, $date) => $query->whereDate('created_at', '<=', $date));
                }),
        ])
        ->defaultSort('created_at', 'desc');
}


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCustomers::route('/'),
            'create' => Pages\CreateCustomer::route('/create'),
            'edit' => Pages\EditCustomer::route('/{record}/edit'),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource.php ---
<?php

namespace App\Filament\Resources;

use App\Models\User;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Resources\UserResource\Pages;
use Illuminate\Support\Facades\Hash;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $navigationGroup = 'Admin';

    public static function form(Forms\Form $form): Forms\Form
    {
        return $form->schema([
            TextInput::make('name')
                ->label('Username')
                ->required()
				->unique(ignoreRecord: true),

            TextInput::make('email')
				->email()
				->required()
				->unique(ignoreRecord: true),


			Section::make('User Password')
				->schema([
					Checkbox::make('change_password')
						->label('Change Password?')
						->reactive()
						->visible(fn ($livewire) => $livewire instanceof Pages\EditUser),

					TextInput::make('password')
						->password()
						->label('Password')
						->dehydrateStateUsing(fn ($state) => filled($state) ? Hash::make($state) : null)
						->dehydrated(fn ($state) => filled($state))
						->required(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password'))
						->visible(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password')),

					TextInput::make('password_confirmation')
						->password()
						->label('Confirm Password')
						->same('password')
						->required(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password'))
						->visible(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password')),
				])
				->columns(1)
				->columnSpan('full'),
			
            TextInput::make('company_name')
                ->required(),

            Textarea::make('address')
                ->rows(3)
                ->placeholder('Multiline address...')
                ->required(false),

            TextInput::make('full_name')
                ->label('Full Name')
                ->required(),

            TextInput::make('phone')
                ->required(),

            TextInput::make('vat_nr')
                ->label('VAT Number')
                ->nullable(),

			FileUpload::make('logo_path')
				->label('Company Logo')
				->directory('logos')
				->image()
				->imageEditor()
				->imageResizeMode('contain') // Required for resize to work
				->imageResizeTargetWidth('300')
				->imageResizeUpscale(false) // Prevents enlarging small images
				->previewable(true)
				->nullable(),



            Select::make('role')
                ->options([
                    'admin' => 'Admin',
                    'key_dealer' => 'Key Dealer',
                    'sub_dealer' => 'Sub Dealer',
                ])
                ->required(),
        ]);
    }

    public static function table(Tables\Table $table): Tables\Table
    {
        return $table
            ->columns([
                TextColumn::make('name'),
                TextColumn::make('email'),
                TextColumn::make('company_name'),
                TextColumn::make('full_name'),
                TextColumn::make('role')->badge(),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\CreateCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateCustomer extends CreateRecord
{
    protected static string $resource = CustomerResource::class;
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\EditCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditCustomer extends EditRecord
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\ListCustomers.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListCustomers extends ListRecords
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\CreateUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    protected static string $resource = UserResource::class;
}


--- FILE: app\Filament\Resources\UserResource\Pages\EditUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\ListUsers.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


===== FOLDER: app/Filament/Resources =====

--- FILE: app\Filament\Resources\CustomerResource.php ---
<?php

namespace App\Filament\Resources;

use App\Models\Customer;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Hidden;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Resources\CustomerResource\Pages;
use Illuminate\Support\Facades\Auth;

class CustomerResource extends Resource
{
    protected static ?string $model = Customer::class;
    protected static ?string $navigationIcon = 'heroicon-o-user-group';
    protected static ?string $navigationLabel = 'Customers';
    protected static ?string $navigationGroup = 'CRM';

public static function form(Forms\Form $form): Forms\Form
{
    return $form->schema([
        TextInput::make('company_name')->required(),
		Textarea::make('address')
			->label('Address')
			->rows(3)
			->columnSpanFull()
			->placeholder('Enter full address')
			->required(false),
        TextInput::make('contact_full_name')->required(),
        TextInput::make('email')->email()->required(),
        TextInput::make('phone')->required(),
        TextInput::make('vendor_nr')->label('Vendor Number')->nullable(),
        TextInput::make('vat_nr')->label('VAT Number')->nullable(),
        Select::make('category')
            ->options([
                'Irigation' => 'Irigation',
                'Consultant' => 'Consultant',
                'Contractor' => 'Contractor',
                'Government' => 'Government',
                'Mine' => 'Mine',
                'Quantity Surveying' => 'Quantity Surveying',
                'Survey' => 'Survey',
                'Town Planning' => 'Town Planning',
                'Golf Course' => 'Golf Course',
                'Municipality' => 'Municipality',
                'Landscaping' => 'Landscaping',
                'Architects' => 'Architects',
                'Supplier' => 'Supplier',
                'Farm' => 'Farm',
                'Reseller' => 'Reseller',
                'Other' => 'Other',
            ])
            ->required(),
        Select::make('language')
            ->options(['Afrikaans' => 'Afrikaans', 'English' => 'English', 'Other' => 'Other'])
            ->default('English')
            ->required(),
        Select::make('type')
            ->options(['Local' => 'Local', 'International' => 'International', 'Other' => 'Other'])
            ->default('Local')
            ->required(),
        Select::make('currency')
            ->options(['ZAR' => 'ZAR', 'USD' => 'USD', 'GBP' => 'GBP', 'EUR' => 'EUR', 'Other' => 'Other'])
            ->default('ZAR')
            ->required(),
        Textarea::make('notes')
			->label('Notes')
			->rows(3)
			->nullable()
			->columnSpanFull(),
		Hidden::make('created_by')
			->default(fn () => Auth::id())
			->required()
			->dehydrated()
			->hidden(),
    ]);
}

public static function table(Tables\Table $table): Tables\Table
{
    return $table
        ->columns([
            Tables\Columns\TextColumn::make('company_name')
                ->sortable()
                ->searchable(),

            Tables\Columns\TextColumn::make('contact_full_name')
                ->searchable(),

            Tables\Columns\TextColumn::make('email')
                ->searchable(),

            Tables\Columns\TextColumn::make('phone')
                ->searchable(),

            Tables\Columns\TextColumn::make('vendor_nr')
                ->label('Vendor #')
                ->searchable(),

            Tables\Columns\TextColumn::make('category'),

            Tables\Columns\TextColumn::make('language'),

            Tables\Columns\TextColumn::make('currency'),

            Tables\Columns\TextColumn::make('created_at')
                ->label('Created')
                ->dateTime()
                ->sortable(),
        ])
        ->filters([
            Tables\Filters\SelectFilter::make('category')
                ->options([
                    'Irigation' => 'Irigation',
                    'Consultant' => 'Consultant',
                    'Contractor' => 'Contractor',
                    'Government' => 'Government',
                    'Mine' => 'Mine',
                    'Quantity Surveying' => 'Quantity Surveying',
                    'Survey' => 'Survey',
                    'Town Planning' => 'Town Planning',
                    'Golf Course' => 'Golf Course',
                    'Municipality' => 'Municipality',
                    'Landscaping' => 'Landscaping',
                    'Architects' => 'Architects',
                    'Supplier' => 'Supplier',
                    'Farm' => 'Farm',
                    'Reseller' => 'Reseller',
                    'Other' => 'Other',
                ])
                ->label('Category'),

            Tables\Filters\SelectFilter::make('language')
                ->options([
                    'Afrikaans' => 'Afrikaans',
                    'English' => 'English',
                    'Other' => 'Other',
                ])
                ->label('Language'),

            Tables\Filters\SelectFilter::make('currency')
                ->options([
                    'ZAR' => 'ZAR',
                    'USD' => 'USD',
                    'GBP' => 'GBP',
                    'EUR' => 'EUR',
                    'Other' => 'Other',
                ])
                ->label('Currency'),

            Tables\Filters\Filter::make('created_at')
                ->form([
                    Forms\Components\DatePicker::make('from')->label('From'),
                    Forms\Components\DatePicker::make('until')->label('Until'),
                ])
                ->query(function ($query, array $data) {
                    return $query
                        ->when($data['from'], fn ($query, $date) => $query->whereDate('created_at', '>=', $date))
                        ->when($data['until'], fn ($query, $date) => $query->whereDate('created_at', '<=', $date));
                }),
        ])
        ->defaultSort('created_at', 'desc');
}


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCustomers::route('/'),
            'create' => Pages\CreateCustomer::route('/create'),
            'edit' => Pages\EditCustomer::route('/{record}/edit'),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource.php ---
<?php

namespace App\Filament\Resources;

use App\Models\User;
use Filament\Forms;
use Filament\Tables;
use Filament\Resources\Resource;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Tables\Columns\TextColumn;
use App\Filament\Resources\UserResource\Pages;
use Illuminate\Support\Facades\Hash;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $navigationGroup = 'Admin';

    public static function form(Forms\Form $form): Forms\Form
    {
        return $form->schema([
            TextInput::make('name')
                ->label('Username')
                ->required()
				->unique(ignoreRecord: true),

            TextInput::make('email')
				->email()
				->required()
				->unique(ignoreRecord: true),


			Section::make('User Password')
				->schema([
					Checkbox::make('change_password')
						->label('Change Password?')
						->reactive()
						->visible(fn ($livewire) => $livewire instanceof Pages\EditUser),

					TextInput::make('password')
						->password()
						->label('Password')
						->dehydrateStateUsing(fn ($state) => filled($state) ? Hash::make($state) : null)
						->dehydrated(fn ($state) => filled($state))
						->required(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password'))
						->visible(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password')),

					TextInput::make('password_confirmation')
						->password()
						->label('Confirm Password')
						->same('password')
						->required(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password'))
						->visible(fn ($livewire, $get) =>
							$livewire instanceof Pages\CreateUser || $get('change_password')),
				])
				->columns(1)
				->columnSpan('full'),
			
            TextInput::make('company_name')
                ->required(),

            Textarea::make('address')
                ->rows(3)
                ->placeholder('Multiline address...')
                ->required(false),

            TextInput::make('full_name')
                ->label('Full Name')
                ->required(),

            TextInput::make('phone')
                ->required(),

            TextInput::make('vat_nr')
                ->label('VAT Number')
                ->nullable(),

			FileUpload::make('logo_path')
				->label('Company Logo')
				->directory('logos')
				->image()
				->imageEditor()
				->imageResizeMode('contain') // Required for resize to work
				->imageResizeTargetWidth('300')
				->imageResizeUpscale(false) // Prevents enlarging small images
				->previewable(true)
				->nullable(),



            Select::make('role')
                ->options([
                    'admin' => 'Admin',
                    'key_dealer' => 'Key Dealer',
                    'sub_dealer' => 'Sub Dealer',
                ])
                ->required(),
        ]);
    }

    public static function table(Tables\Table $table): Tables\Table
    {
        return $table
            ->columns([
                TextColumn::make('name'),
                TextColumn::make('email'),
                TextColumn::make('company_name'),
                TextColumn::make('full_name'),
                TextColumn::make('role')->badge(),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\CreateCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateCustomer extends CreateRecord
{
    protected static string $resource = CustomerResource::class;
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\EditCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditCustomer extends EditRecord
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\ListCustomers.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListCustomers extends ListRecords
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\CreateUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    protected static string $resource = UserResource::class;
}


--- FILE: app\Filament\Resources\UserResource\Pages\EditUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\ListUsers.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


===== FOLDER: app/Filament/Resources/CustomerResource =====

--- FILE: app\Filament\Resources\CustomerResource\Pages\CreateCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateCustomer extends CreateRecord
{
    protected static string $resource = CustomerResource::class;
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\EditCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditCustomer extends EditRecord
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\ListCustomers.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListCustomers extends ListRecords
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


===== FOLDER: app/Filament/Resources/CustomerResource/Pages =====

--- FILE: app\Filament\Resources\CustomerResource\Pages\CreateCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateCustomer extends CreateRecord
{
    protected static string $resource = CustomerResource::class;
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\EditCustomer.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditCustomer extends EditRecord
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\CustomerResource\Pages\ListCustomers.php ---
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListCustomers extends ListRecords
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


===== FOLDER: app/Filament/Resources/UserResource =====

--- FILE: app\Filament\Resources\UserResource\Pages\CreateUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    protected static string $resource = UserResource::class;
}


--- FILE: app\Filament\Resources\UserResource\Pages\EditUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\ListUsers.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


===== FOLDER: app/Filament/Resources/UserResource/Pages =====

--- FILE: app\Filament\Resources\UserResource\Pages\CreateUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    protected static string $resource = UserResource::class;
}


--- FILE: app\Filament\Resources\UserResource\Pages\EditUser.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


--- FILE: app\Filament\Resources\UserResource\Pages\ListUsers.php ---
<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


===== FOLDER: app/Helpers =====

--- FILE: app\Helpers\helpers.php ---
<?php

// Global helper functions can go here.



===== FOLDER: app/Http =====

--- FILE: app\Http\Controllers\Controller.php ---
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


--- FILE: app\Http\Controllers\CustomerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use Illuminate\Http\Request;

class CustomerController extends Controller
{
    public function index() {
        return Customer::all();
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'company_name' => 'required',
            'contact_person' => 'required',
            'email' => 'required|email',
            'phone' => 'required',
            'vat_number' => 'nullable',
            'vendor_number' => 'nullable',
            'catagory' => 'required',
            'type' => 'nullable',
            'language' => 'nullable',
            'currency' => 'nullable',
            'address' => 'nullable'
        ]);
        return Customer::create($data);
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function show(Customer $customer) {
        return $customer;
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function update(Request $request, Customer $customer) {
        $customer->update($request->all());
        return $customer;
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function destroy(Customer $customer) {
        $customer->delete();
        return response()->noContent();
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function indexView() {
        return view('customers.index');
    }
}

--- FILE: app\Http\Controllers\DashboardController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class DashboardController extends Controller
{
    public function index()
    {
        return response()->json(['message' => 'DashboardController ready.']);
    }
}


--- FILE: app\Http\Controllers\DealerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Dealer;
use Illuminate\Http\Request;

class DealerController extends Controller
{
    public function index() {
        return Dealer::all();
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'dealer_name' => 'required',
            'contact_person' => 'nullable',
            'email' => 'nullable|email',
            'phone' => 'nullable',
            'address' => 'nullable',
            'bank_details' => 'nullable',
            'type' => 'nullable',
            'logo' => 'nullable'
        ]);
        return Dealer::create($data);
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function show(Dealer $dealer) {
        return $dealer;
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function update(Request $request, Dealer $dealer) {
        $dealer->update($request->all());
        return $dealer;
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function destroy(Dealer $dealer) {
        $dealer->delete();
        return response()->noContent();
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function indexView() {
        return view('dealers.index');
    }
}

--- FILE: app\Http\Controllers\InvoiceController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Invoice;
use Illuminate\Http\Request;

class InvoiceController extends Controller
{
    public function index() {
        return Invoice::with('items')->get();
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'quote_id' => 'required|exists:quotes,id',
            'invoice_number' => 'required|unique:invoices',
            'invoice_date' => 'required|date',
            'status' => 'required|string',
            'subtotal' => 'required|numeric',
            'vat_amount' => 'required|numeric',
            'total_amount' => 'required|numeric',
            'currency' => 'required|string'
        ]);
        return Invoice::create($data);
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function show(Invoice $invoice) {
        return $invoice->load('items');
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function update(Request $request, Invoice $invoice) {
        $invoice->update($request->all());
        return $invoice;
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function destroy(Invoice $invoice) {
        $invoice->delete();
        return response()->noContent();
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function showView($id) {
        return view('invoices.show');
    }
}

--- FILE: app\Http\Controllers\KitController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Kit;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class KitController extends Controller
{
    // GET /api/kit
    public function index()
    {
        return Kit::orderBy('created_at', 'desc')->get();
    }

    // GET /api/kits/{id}
    public function show($id)
    {
        return Kit::findOrFail($id);
    }

    // POST /api/kits
    public function store(Request $request)
    {
        $validated = $request->validate([
            'dealer_id' => 'nullable|exists:dealers,id',
            'kit_name' => 'required|string|max:255',
            'kit_description' => 'nullable|string',
            'price' => 'required|numeric',
            'vat_applicable' => 'required|boolean',
            'discount_allowed' => 'required|boolean',
        ]);

        $kit = Kit::create($validated);

        return response()->json($kit, 201);
    }

    // DELETE /api/kit/{id}
    public function destroy($id)
    {
        Kit::destroy($id);
        return response()->json(null, 204);
    }
}


--- FILE: app\Http\Controllers\PermissionsController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PermissionsController extends Controller
{
    // GET /api/permissions
    public function index()
    {
        // TODO: Implement permissions listing (Spatie removed)
        return response()->json(['message' => 'Permissions listing not implemented'], 501);
    }

    // POST /api/permissions
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|unique:permissions,name',
            'guard_name' => 'required|string',
        ]);

        // TODO: Implement permission creation (Spatie removed)
        $permission = [
            'name' => $validated['name'],
            'guard_name' => $validated['guard_name'],
        ];

        return response()->json($permission, 201);
    }
}


--- FILE: app\Http\Controllers\ProductController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function index() {
        return Product::all();
    }

    public function store(Request $request) {
        $data = $request->validate([
            'name' => 'required',
            'description' => 'nullable',
            'price' => 'required|numeric',
            'currency' => 'required|string'
        ]);
        return Product::create($data);
    }

    public function show(Product $product) {
        return $product;
    }

    public function update(Request $request, Product $product) {
        $product->update($request->all());
        return $product;
    }

    public function destroy(Product $product) {
        $product->delete();
        return response()->noContent();
    }
}

--- FILE: app\Http\Controllers\QuoteController.php ---
<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreQuoteRequest;
use App\Models\Quote;
use App\Models\QuoteItem;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\RedirectResponse;

class QuoteController extends Controller
{
    public function store(StoreQuoteRequest $request): RedirectResponse
    {
        DB::beginTransaction();

        try {
            $quote = Quote::create([
                'dealer_id' => auth()->user()->dealer_id,
                'customer_id' => $request->customer_id,
                'quote_number' => 'Q-' . now()->format('YmdHis'),
                'subtotal' => 0,
                'vat_amount' => 0,
                'total_amount' => 0,
            ]);

            $subtotal = 0;
            foreach ($request->product as $index => $productName) {
                $qty = (int)$request->qty[$index];
                $unitPrice = 100; // Placeholder: replace with real product price lookup
                $lineTotal = $qty * $unitPrice;
                $subtotal += $lineTotal;

                QuoteItem::create([
                    'quote_id' => $quote->id,
                    'product_id' => 1, // TODO: fetch actual product ID
                    'qty' => $qty,
                    'unit_price' => $unitPrice,
                    'line_discount' => 0,
                ]);
            }

            $vat = $subtotal * 0.15;
            $quote->update([
                'subtotal' => $subtotal,
                'vat_amount' => $vat,
                'total_amount' => $subtotal + $vat,
            ]);

            DB::commit();

            return redirect()->route('quotes.index')->with('status', 'Quote created successfully!');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Error creating quote: ' . $e->getMessage());
        }
    }
}


--- FILE: app\Http\Controllers\RolesController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\UserRole;
use Illuminate\Http\Request;

class RolesController extends Controller
{
    // GET /api/roles
    public function index()
    {
        return UserRole::orderBy('created_at', 'desc')->get();
    }

    // POST /api/roles
    public function store(Request $request)
    {
        $validated = $request->validate([
            'role_name' => 'required|string|unique:user_roles,role_name',
        ]);

        $role = UserRole::create($validated);

        return response()->json($role, 201);
    }
}


--- FILE: app\Http\Controllers\SubDealerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class SubDealerController extends Controller
{
    // GET /api/subdealers
    public function index()
    {
        return User::where('role', 'sub_dealer')->orderBy('created_at', 'desc')->get();
    }

    // GET /api/subdealers/{id}
    public function show($id)
    {
        return User::where('role', 'sub_dealer')->findOrFail($id);
    }

    // You can add more sub-dealer specific APIs if needed
}


--- FILE: app\Http\Controllers\TermsConditionController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class TermsConditionController extends Controller
{
    public function index()
    {
        return response()->json(['message' => 'TermsConditionController ready.']);
    }
}


--- FILE: app\Http\Controllers\UserController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class UserController extends Controller
{
    // GET /api/users
    public function index()
    {
        return User::orderBy('created_at', 'desc')->get();
    }

    // GET /api/users/{id}
    public function show($id)
    {
        return User::findOrFail($id);
    }

    // POST /api/users
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|string|min:8',
            'role' => 'required|in:admin,key_dealer,sub_dealer',
            'region_id' => 'nullable|exists:sub_dealer_regions,id',
        ]);

        $validated['password'] = Hash::make($validated['password']);

        $user = User::create($validated);

        return response()->json($user, 201);
    }

    // DELETE /api/users/{id}
    public function destroy($id)
    {
        User::destroy($id);
        return response()->json(null, 204);
    }
}


--- FILE: app\Http\Requests\StoreQuoteRequest.php ---
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreQuoteRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'customer_id' => 'required|exists:customers,id',
            'product.*' => 'required|string',
            'qty.*' => 'required|numeric|min:1',
        ];
    }
}


===== FOLDER: app/Http/Controllers =====

--- FILE: app\Http\Controllers\Controller.php ---
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


--- FILE: app\Http\Controllers\CustomerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use Illuminate\Http\Request;

class CustomerController extends Controller
{
    public function index() {
        return Customer::all();
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'company_name' => 'required',
            'contact_person' => 'required',
            'email' => 'required|email',
            'phone' => 'required',
            'vat_number' => 'nullable',
            'vendor_number' => 'nullable',
            'catagory' => 'required',
            'type' => 'nullable',
            'language' => 'nullable',
            'currency' => 'nullable',
            'address' => 'nullable'
        ]);
        return Customer::create($data);
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function show(Customer $customer) {
        return $customer;
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function update(Request $request, Customer $customer) {
        $customer->update($request->all());
        return $customer;
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function destroy(Customer $customer) {
        $customer->delete();
        return response()->noContent();
    
    public function indexView() {
        return view('customers.index');
    }
}

    public function indexView() {
        return view('customers.index');
    }
}

--- FILE: app\Http\Controllers\DashboardController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class DashboardController extends Controller
{
    public function index()
    {
        return response()->json(['message' => 'DashboardController ready.']);
    }
}


--- FILE: app\Http\Controllers\DealerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Dealer;
use Illuminate\Http\Request;

class DealerController extends Controller
{
    public function index() {
        return Dealer::all();
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'dealer_name' => 'required',
            'contact_person' => 'nullable',
            'email' => 'nullable|email',
            'phone' => 'nullable',
            'address' => 'nullable',
            'bank_details' => 'nullable',
            'type' => 'nullable',
            'logo' => 'nullable'
        ]);
        return Dealer::create($data);
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function show(Dealer $dealer) {
        return $dealer;
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function update(Request $request, Dealer $dealer) {
        $dealer->update($request->all());
        return $dealer;
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function destroy(Dealer $dealer) {
        $dealer->delete();
        return response()->noContent();
    
    public function indexView() {
        return view('dealers.index');
    }
}

    public function indexView() {
        return view('dealers.index');
    }
}

--- FILE: app\Http\Controllers\InvoiceController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Invoice;
use Illuminate\Http\Request;

class InvoiceController extends Controller
{
    public function index() {
        return Invoice::with('items')->get();
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function store(Request $request) {
        $data = $request->validate([
            'quote_id' => 'required|exists:quotes,id',
            'invoice_number' => 'required|unique:invoices',
            'invoice_date' => 'required|date',
            'status' => 'required|string',
            'subtotal' => 'required|numeric',
            'vat_amount' => 'required|numeric',
            'total_amount' => 'required|numeric',
            'currency' => 'required|string'
        ]);
        return Invoice::create($data);
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function show(Invoice $invoice) {
        return $invoice->load('items');
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function update(Request $request, Invoice $invoice) {
        $invoice->update($request->all());
        return $invoice;
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function destroy(Invoice $invoice) {
        $invoice->delete();
        return response()->noContent();
    
    public function showView($id) {
        return view('invoices.show');
    }
}

    public function showView($id) {
        return view('invoices.show');
    }
}

--- FILE: app\Http\Controllers\KitController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Kit;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class KitController extends Controller
{
    // GET /api/kit
    public function index()
    {
        return Kit::orderBy('created_at', 'desc')->get();
    }

    // GET /api/kits/{id}
    public function show($id)
    {
        return Kit::findOrFail($id);
    }

    // POST /api/kits
    public function store(Request $request)
    {
        $validated = $request->validate([
            'dealer_id' => 'nullable|exists:dealers,id',
            'kit_name' => 'required|string|max:255',
            'kit_description' => 'nullable|string',
            'price' => 'required|numeric',
            'vat_applicable' => 'required|boolean',
            'discount_allowed' => 'required|boolean',
        ]);

        $kit = Kit::create($validated);

        return response()->json($kit, 201);
    }

    // DELETE /api/kit/{id}
    public function destroy($id)
    {
        Kit::destroy($id);
        return response()->json(null, 204);
    }
}


--- FILE: app\Http\Controllers\PermissionsController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PermissionsController extends Controller
{
    // GET /api/permissions
    public function index()
    {
        // TODO: Implement permissions listing (Spatie removed)
        return response()->json(['message' => 'Permissions listing not implemented'], 501);
    }

    // POST /api/permissions
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|unique:permissions,name',
            'guard_name' => 'required|string',
        ]);

        // TODO: Implement permission creation (Spatie removed)
        $permission = [
            'name' => $validated['name'],
            'guard_name' => $validated['guard_name'],
        ];

        return response()->json($permission, 201);
    }
}


--- FILE: app\Http\Controllers\ProductController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function index() {
        return Product::all();
    }

    public function store(Request $request) {
        $data = $request->validate([
            'name' => 'required',
            'description' => 'nullable',
            'price' => 'required|numeric',
            'currency' => 'required|string'
        ]);
        return Product::create($data);
    }

    public function show(Product $product) {
        return $product;
    }

    public function update(Request $request, Product $product) {
        $product->update($request->all());
        return $product;
    }

    public function destroy(Product $product) {
        $product->delete();
        return response()->noContent();
    }
}

--- FILE: app\Http\Controllers\QuoteController.php ---
<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreQuoteRequest;
use App\Models\Quote;
use App\Models\QuoteItem;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\RedirectResponse;

class QuoteController extends Controller
{
    public function store(StoreQuoteRequest $request): RedirectResponse
    {
        DB::beginTransaction();

        try {
            $quote = Quote::create([
                'dealer_id' => auth()->user()->dealer_id,
                'customer_id' => $request->customer_id,
                'quote_number' => 'Q-' . now()->format('YmdHis'),
                'subtotal' => 0,
                'vat_amount' => 0,
                'total_amount' => 0,
            ]);

            $subtotal = 0;
            foreach ($request->product as $index => $productName) {
                $qty = (int)$request->qty[$index];
                $unitPrice = 100; // Placeholder: replace with real product price lookup
                $lineTotal = $qty * $unitPrice;
                $subtotal += $lineTotal;

                QuoteItem::create([
                    'quote_id' => $quote->id,
                    'product_id' => 1, // TODO: fetch actual product ID
                    'qty' => $qty,
                    'unit_price' => $unitPrice,
                    'line_discount' => 0,
                ]);
            }

            $vat = $subtotal * 0.15;
            $quote->update([
                'subtotal' => $subtotal,
                'vat_amount' => $vat,
                'total_amount' => $subtotal + $vat,
            ]);

            DB::commit();

            return redirect()->route('quotes.index')->with('status', 'Quote created successfully!');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Error creating quote: ' . $e->getMessage());
        }
    }
}


--- FILE: app\Http\Controllers\RolesController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\UserRole;
use Illuminate\Http\Request;

class RolesController extends Controller
{
    // GET /api/roles
    public function index()
    {
        return UserRole::orderBy('created_at', 'desc')->get();
    }

    // POST /api/roles
    public function store(Request $request)
    {
        $validated = $request->validate([
            'role_name' => 'required|string|unique:user_roles,role_name',
        ]);

        $role = UserRole::create($validated);

        return response()->json($role, 201);
    }
}


--- FILE: app\Http\Controllers\SubDealerController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class SubDealerController extends Controller
{
    // GET /api/subdealers
    public function index()
    {
        return User::where('role', 'sub_dealer')->orderBy('created_at', 'desc')->get();
    }

    // GET /api/subdealers/{id}
    public function show($id)
    {
        return User::where('role', 'sub_dealer')->findOrFail($id);
    }

    // You can add more sub-dealer specific APIs if needed
}


--- FILE: app\Http\Controllers\TermsConditionController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class TermsConditionController extends Controller
{
    public function index()
    {
        return response()->json(['message' => 'TermsConditionController ready.']);
    }
}


--- FILE: app\Http\Controllers\UserController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class UserController extends Controller
{
    // GET /api/users
    public function index()
    {
        return User::orderBy('created_at', 'desc')->get();
    }

    // GET /api/users/{id}
    public function show($id)
    {
        return User::findOrFail($id);
    }

    // POST /api/users
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|string|min:8',
            'role' => 'required|in:admin,key_dealer,sub_dealer',
            'region_id' => 'nullable|exists:sub_dealer_regions,id',
        ]);

        $validated['password'] = Hash::make($validated['password']);

        $user = User::create($validated);

        return response()->json($user, 201);
    }

    // DELETE /api/users/{id}
    public function destroy($id)
    {
        User::destroy($id);
        return response()->json(null, 204);
    }
}


===== FOLDER: app/Mail =====

--- FILE: app\Mail\QuoteSentMail.php ---
<?php

namespace App\Mail;

use App\Models\Quote;
use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;
use Barryvdh\DomPDF\Facade\Pdf;

class QuoteSentMail extends Mailable
{
    use Queueable, SerializesModels;

    public $quote;

    public function __construct(Quote $quote)
    {
        $this->quote = $quote;
    }

    public function build()
    {
        $pdf = Pdf::loadView('pdf.quote', ['quote' => $this->quote]);
        $filename = 'quote_' . $this->quote->quote_number . '.pdf';

        return $this->subject('Your Quote from ' . $this->quote->subdealer->company_name)
                    ->markdown('emails.quotes.sent')
                    ->attachData($pdf->output(), $filename);
    }
}


===== FOLDER: app/Models =====

--- FILE: app\Models\Customer.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Dealer;
use App\Models\Quote;
use App\Models\Invoice;
use App\Models\CustomerNote;
use App\Models\CustomerContact;

class Customer extends Model
{
    use HasFactory;

    protected $fillable = [
        'company_name',
        'contact_person',
        'email',
        'phone',
        'vat_number',
        'vendor_number',
        'catagory',
        'type',
        'language',
        'currency',
        'address',
    ];

    // Relationships
    public function quotes()
    {
        return $this->hasMany(Quote::class);
    }

    public function invoices()
    {
        return $this->hasMany(Invoice::class);
    }

    public function notes()
    {
        return $this->hasMany(CustomerNote::class);
    }

    public function contacts()
    {
        return $this->hasMany(CustomerContact::class);
    }

    public function dealers()
    {
        return $this->belongsToMany(Dealer::class, 'customer_sub_dealer_links');
    }
}


--- FILE: app\Models\Dealer.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Dealer extends Model
{
    use HasFactory;

    protected $fillable = [
        'dealer_name', 'contact_person', 'email', 'phone',
        'address', 'bank_details', 'type', 'logo'
    ];

    public function customers() {
        return $this->hasMany(Customer::class);
    }
}


--- FILE: app\Models\Invoice.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Invoice extends Model
{
    use HasFactory;

    protected $fillable = [
        'quote_id', 'invoice_number', 'issue_date', 'due_date',
        'status', 'subtotal', 'vat_amount', 'total_amount', 'currency'
    ];

    public function quote() {
        return $this->belongsTo(Quote::class);
    }

    public function items() {
        return $this->hasMany(InvoiceItem::class);
    }
}


--- FILE: app\Models\InvoiceItem.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class InvoiceItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'invoice_id', 'product_id', 'qty', 'unit_price', 'line_discount'
    ];

    public function invoice() {
        return $this->belongsTo(Invoice::class);
    }

    public function product() {
        return $this->belongsTo(Product::class);
    }
}

--- FILE: app\Models\Kit.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\KitItem;
use App\Models\QuoteKit;

class Kit extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'description',
        'price',
        'vat_applicable',
        'discount_allowed',
    ];

    public function items()
    {
        return $this->hasMany(KitItem::class);
    }

    public function quoteKits()
    {
        return $this->hasMany(QuoteKit::class);
    }
}


--- FILE: app\Models\KitItem.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Kit;
use App\Models\Product;

class KitItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'kit_id',
        'product_id',
        'qty',
    ];

    public function kit()
    {
        return $this->belongsTo(Kit::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
}


--- FILE: app\Models\Product.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Product extends Model
{
    use HasFactory;

    protected $fillable = [
        'name', 'description', 'price', 'currency'
    ];

    public function quoteItems() {
        return $this->hasMany(QuoteItem::class);
    }

    public function kitItems() {
        return $this->hasMany(KitItem::class);
    }

    public function invoiceItems() {
        return $this->hasMany(InvoiceItem::class);
    }
}

--- FILE: app\Models\Quote.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;
use App\Models\Customer;
use App\Models\QuoteItem;
use App\Models\QuoteKit;
use App\Models\QuoteStatus;
use App\Models\TermsCondition;

class Quote extends Model
{
    use HasFactory;

    protected $fillable = [
        'quote_number',
        'subdealer_id',
        'customer_id',
        'user_id',
        'quote_date',
        'status',
        'terms',
        'subtotal',
        'vat_amount',
        'total_amount',
        'currency',
        'is_pdf_generated',
    ];

    protected $casts = [
        'quote_date' => 'date',
        'terms' => 'array',
        'is_pdf_generated' => 'boolean',
    ];

    // Relationships
    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    public function subdealer()
    {
        return $this->belongsTo(User::class, 'subdealer_id');
    }

    public function createdBy()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function items()
    {
        return $this->hasMany(QuoteItem::class);
    }

    public function kits()
    {
        return $this->hasMany(QuoteKit::class);
    }

    public function status()
    {
        return $this->belongsTo(QuoteStatus::class, 'status', 'name');
    }

    public function termsConditions()
    {
        return $this->belongsToMany(TermsCondition::class, 'quote_terms_link');
    }
}


--- FILE: app\Models\QuoteItem.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Quote;
use App\Models\Product;

class QuoteItem extends Model
{
    use HasFactory;

    protected $fillable = [
        'quote_id',
        'product_id',
        'qty',
        'unit_price',
        'line_discount',
    ];

    public function quote()
    {
        return $this->belongsTo(Quote::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
}


--- FILE: app\Models\SubDealerRegion.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class SubDealerRegion extends Model
{
    use HasFactory;

    protected $fillable = ['region_name'];

    public function users() {
        return $this->hasMany(User::class);
    }
}

--- FILE: app\Models\User.php ---
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

use App\Models\SubDealerRegion;
use App\Models\UserRole;
use App\Models\Quote;
use App\Models\Invoice;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'phone',
        'address',
        'banking_details',
        'vat_number',
        'logo_path',
        'role',
        'region_id',
        'role_id',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    // Relationships
    public function region()
    {
        return $this->belongsTo(SubDealerRegion::class);
    }

    public function role()
    {
        return $this->belongsTo(UserRole::class);
    }

    public function quotes()
    {
        return $this->hasMany(Quote::class);
    }

    public function invoices()
    {
        return $this->hasMany(Invoice::class);
    }
}


--- FILE: app\Models\UserRole.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserRole extends Model
{
    use HasFactory;

    protected $fillable = ['role_name'];

    public function users()
    {
        return $this->hasMany(User::class);
    }
}


===== FOLDER: app/Providers =====

--- FILE: app\Providers\AppServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Gate;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
	public function boot()
	{
		$this->registerPolicies();

		Gate::define('viewInternalDashboard', function ($user) {
			return $user->role === 'admin' || $user->role === 'internal';
		});

		Gate::define('viewDealerDashboard', function ($user) {
			return $user->role === 'dealer' || $user->role === 'sub-dealer';
		});
	}
}


--- FILE: app\Providers\Filament\AdminPanelProvider.php ---
<?php

namespace App\Providers\Filament;

use Filament\Http\Middleware\Authenticate;
use Filament\Http\Middleware\AuthenticateSession;
use Filament\Http\Middleware\DisableBladeIconComponents;
use Filament\Http\Middleware\DispatchServingFilamentEvent;
use Filament\Pages;
use Filament\Panel;
use Filament\PanelProvider;
use Filament\Support\Colors\Color;
use Filament\Widgets;
use Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse;
use Illuminate\Cookie\Middleware\EncryptCookies;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken;
use Illuminate\Routing\Middleware\SubstituteBindings;
use Illuminate\Session\Middleware\StartSession;
use Illuminate\View\Middleware\ShareErrorsFromSession;

class AdminPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->default()
            ->id('admin')
            ->path('admin')
            ->login()
            ->colors([
                'primary' => Color::Amber,
            ])
            ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\Filament\\Resources')
            ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\Filament\\Pages')
            ->pages([
                Pages\Dashboard::class,
            ])
            ->discoverWidgets(in: app_path('Filament/Widgets'), for: 'App\\Filament\\Widgets')
            ->widgets([
                Widgets\AccountWidget::class,
                Widgets\FilamentInfoWidget::class,
            ])
            ->middleware([
                EncryptCookies::class,
                AddQueuedCookiesToResponse::class,
                StartSession::class,
                AuthenticateSession::class,
                ShareErrorsFromSession::class,
                VerifyCsrfToken::class,
                SubstituteBindings::class,
                DisableBladeIconComponents::class,
                DispatchServingFilamentEvent::class,
            ])
            ->authMiddleware([
                Authenticate::class,
            ]);
    }
}


===== FOLDER: app/Providers/Filament =====

--- FILE: app\Providers\Filament\AdminPanelProvider.php ---
<?php

namespace App\Providers\Filament;

use Filament\Http\Middleware\Authenticate;
use Filament\Http\Middleware\AuthenticateSession;
use Filament\Http\Middleware\DisableBladeIconComponents;
use Filament\Http\Middleware\DispatchServingFilamentEvent;
use Filament\Pages;
use Filament\Panel;
use Filament\PanelProvider;
use Filament\Support\Colors\Color;
use Filament\Widgets;
use Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse;
use Illuminate\Cookie\Middleware\EncryptCookies;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken;
use Illuminate\Routing\Middleware\SubstituteBindings;
use Illuminate\Session\Middleware\StartSession;
use Illuminate\View\Middleware\ShareErrorsFromSession;

class AdminPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->default()
            ->id('admin')
            ->path('admin')
            ->login()
            ->colors([
                'primary' => Color::Amber,
            ])
            ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\Filament\\Resources')
            ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\Filament\\Pages')
            ->pages([
                Pages\Dashboard::class,
            ])
            ->discoverWidgets(in: app_path('Filament/Widgets'), for: 'App\\Filament\\Widgets')
            ->widgets([
                Widgets\AccountWidget::class,
                Widgets\FilamentInfoWidget::class,
            ])
            ->middleware([
                EncryptCookies::class,
                AddQueuedCookiesToResponse::class,
                StartSession::class,
                AuthenticateSession::class,
                ShareErrorsFromSession::class,
                VerifyCsrfToken::class,
                SubstituteBindings::class,
                DisableBladeIconComponents::class,
                DispatchServingFilamentEvent::class,
            ])
            ->authMiddleware([
                Authenticate::class,
            ]);
    }
}


===== FOLDER: bootstrap =====

--- FILE: bootstrap\app.php ---
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();


--- FILE: bootstrap\providers.php ---
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\Filament\AdminPanelProvider::class,
];


--- FILE: bootstrap\cache\config.php ---
<?php return array (
  2 => 'broadcasting',
  4 => 'concurrency',
  5 => 'cors',
  8 => 'hashing',
  14 => 'view',
  'app' => 
  array (
    'name' => 'MMS Design CRM',
    'env' => 'local',
    'debug' => true,
    'url' => 'http://localhost/mms-crm/public',
    'frontend_url' => 'http://localhost:3000',
    'asset_url' => NULL,
    'timezone' => 'UTC',
    'locale' => 'en',
    'fallback_locale' => 'en',
    'faker_locale' => 'en_US',
    'cipher' => 'AES-256-CBC',
    'key' => '',
    'previous_keys' => 
    array (
    ),
    'maintenance' => 
    array (
      'driver' => 'file',
      'store' => 'database',
    ),
    'providers' => 
    array (
      0 => 'Illuminate\\Auth\\AuthServiceProvider',
      1 => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
      2 => 'Illuminate\\Bus\\BusServiceProvider',
      3 => 'Illuminate\\Cache\\CacheServiceProvider',
      4 => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
      5 => 'Illuminate\\Concurrency\\ConcurrencyServiceProvider',
      6 => 'Illuminate\\Cookie\\CookieServiceProvider',
      7 => 'Illuminate\\Database\\DatabaseServiceProvider',
      8 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
      9 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
      10 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
      11 => 'Illuminate\\Hashing\\HashServiceProvider',
      12 => 'Illuminate\\Mail\\MailServiceProvider',
      13 => 'Illuminate\\Notifications\\NotificationServiceProvider',
      14 => 'Illuminate\\Pagination\\PaginationServiceProvider',
      15 => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
      16 => 'Illuminate\\Pipeline\\PipelineServiceProvider',
      17 => 'Illuminate\\Queue\\QueueServiceProvider',
      18 => 'Illuminate\\Redis\\RedisServiceProvider',
      19 => 'Illuminate\\Session\\SessionServiceProvider',
      20 => 'Illuminate\\Translation\\TranslationServiceProvider',
      21 => 'Illuminate\\Validation\\ValidationServiceProvider',
      22 => 'Illuminate\\View\\ViewServiceProvider',
      23 => 'App\\Providers\\AppServiceProvider',
      24 => 'App\\Providers\\Filament\\AdminPanelProvider',
    ),
    'aliases' => 
    array (
      'App' => 'Illuminate\\Support\\Facades\\App',
      'Arr' => 'Illuminate\\Support\\Arr',
      'Artisan' => 'Illuminate\\Support\\Facades\\Artisan',
      'Auth' => 'Illuminate\\Support\\Facades\\Auth',
      'Blade' => 'Illuminate\\Support\\Facades\\Blade',
      'Broadcast' => 'Illuminate\\Support\\Facades\\Broadcast',
      'Bus' => 'Illuminate\\Support\\Facades\\Bus',
      'Cache' => 'Illuminate\\Support\\Facades\\Cache',
      'Concurrency' => 'Illuminate\\Support\\Facades\\Concurrency',
      'Config' => 'Illuminate\\Support\\Facades\\Config',
      'Context' => 'Illuminate\\Support\\Facades\\Context',
      'Cookie' => 'Illuminate\\Support\\Facades\\Cookie',
      'Crypt' => 'Illuminate\\Support\\Facades\\Crypt',
      'Date' => 'Illuminate\\Support\\Facades\\Date',
      'DB' => 'Illuminate\\Support\\Facades\\DB',
      'Eloquent' => 'Illuminate\\Database\\Eloquent\\Model',
      'Event' => 'Illuminate\\Support\\Facades\\Event',
      'File' => 'Illuminate\\Support\\Facades\\File',
      'Gate' => 'Illuminate\\Support\\Facades\\Gate',
      'Hash' => 'Illuminate\\Support\\Facades\\Hash',
      'Http' => 'Illuminate\\Support\\Facades\\Http',
      'Js' => 'Illuminate\\Support\\Js',
      'Lang' => 'Illuminate\\Support\\Facades\\Lang',
      'Log' => 'Illuminate\\Support\\Facades\\Log',
      'Mail' => 'Illuminate\\Support\\Facades\\Mail',
      'Notification' => 'Illuminate\\Support\\Facades\\Notification',
      'Number' => 'Illuminate\\Support\\Number',
      'Password' => 'Illuminate\\Support\\Facades\\Password',
      'Process' => 'Illuminate\\Support\\Facades\\Process',
      'Queue' => 'Illuminate\\Support\\Facades\\Queue',
      'RateLimiter' => 'Illuminate\\Support\\Facades\\RateLimiter',
      'Redirect' => 'Illuminate\\Support\\Facades\\Redirect',
      'Request' => 'Illuminate\\Support\\Facades\\Request',
      'Response' => 'Illuminate\\Support\\Facades\\Response',
      'Route' => 'Illuminate\\Support\\Facades\\Route',
      'Schedule' => 'Illuminate\\Support\\Facades\\Schedule',
      'Schema' => 'Illuminate\\Support\\Facades\\Schema',
      'Session' => 'Illuminate\\Support\\Facades\\Session',
      'Storage' => 'Illuminate\\Support\\Facades\\Storage',
      'Str' => 'Illuminate\\Support\\Str',
      'URL' => 'Illuminate\\Support\\Facades\\URL',
      'Uri' => 'Illuminate\\Support\\Uri',
      'Validator' => 'Illuminate\\Support\\Facades\\Validator',
      'View' => 'Illuminate\\Support\\Facades\\View',
      'Vite' => 'Illuminate\\Support\\Facades\\Vite',
    ),
  ),
  'auth' => 
  array (
    'defaults' => 
    array (
      'guard' => 'web',
      'passwords' => 'users',
    ),
    'guards' => 
    array (
      'web' => 
      array (
        'driver' => 'session',
        'provider' => 'users',
      ),
    ),
    'providers' => 
    array (
      'users' => 
      array (
        'driver' => 'eloquent',
        'model' => 'App\\Models\\User',
      ),
    ),
    'passwords' => 
    array (
      'users' => 
      array (
        'provider' => 'users',
        'table' => 'password_reset_tokens',
        'expire' => 60,
        'throttle' => 60,
      ),
    ),
    'password_timeout' => 10800,
  ),
  'cache' => 
  array (
    'default' => 'database',
    'stores' => 
    array (
      'array' => 
      array (
        'driver' => 'array',
        'serialize' => false,
      ),
      'database' => 
      array (
        'driver' => 'database',
        'connection' => NULL,
        'table' => 'cache',
        'lock_connection' => NULL,
        'lock_table' => NULL,
      ),
      'file' => 
      array (
        'driver' => 'file',
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework/cache/data',
        'lock_path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework/cache/data',
      ),
      'memcached' => 
      array (
        'driver' => 'memcached',
        'persistent_id' => NULL,
        'sasl' => 
        array (
          0 => NULL,
          1 => NULL,
        ),
        'options' => 
        array (
        ),
        'servers' => 
        array (
          0 => 
          array (
            'host' => '127.0.0.1',
            'port' => 11211,
            'weight' => 100,
          ),
        ),
      ),
      'redis' => 
      array (
        'driver' => 'redis',
        'connection' => 'cache',
        'lock_connection' => 'default',
      ),
      'dynamodb' => 
      array (
        'driver' => 'dynamodb',
        'key' => NULL,
        'secret' => NULL,
        'region' => 'us-east-1',
        'table' => 'cache',
        'endpoint' => NULL,
      ),
      'octane' => 
      array (
        'driver' => 'octane',
      ),
    ),
    'prefix' => 'mms_design_crm_cache_',
  ),
  'database' => 
  array (
    'default' => 'mysql',
    'connections' => 
    array (
      'sqlite' => 
      array (
        'driver' => 'sqlite',
        'url' => NULL,
        'database' => 'mms_crm',
        'prefix' => '',
        'foreign_key_constraints' => true,
        'busy_timeout' => NULL,
        'journal_mode' => NULL,
        'synchronous' => NULL,
      ),
      'mysql' => 
      array (
        'driver' => 'mysql',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'unix_socket' => '',
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'prefix_indexes' => true,
        'strict' => true,
        'engine' => NULL,
        'options' => 
        array (
        ),
      ),
      'mariadb' => 
      array (
        'driver' => 'mariadb',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'unix_socket' => '',
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'prefix_indexes' => true,
        'strict' => true,
        'engine' => NULL,
        'options' => 
        array (
        ),
      ),
      'pgsql' => 
      array (
        'driver' => 'pgsql',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8',
        'prefix' => '',
        'prefix_indexes' => true,
        'search_path' => 'public',
        'sslmode' => 'prefer',
      ),
      'sqlsrv' => 
      array (
        'driver' => 'sqlsrv',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8',
        'prefix' => '',
        'prefix_indexes' => true,
      ),
    ),
    'migrations' => 
    array (
      'table' => 'migrations',
      'update_date_on_publish' => true,
    ),
    'redis' => 
    array (
      'client' => 'phpredis',
      'options' => 
      array (
        'cluster' => 'redis',
        'prefix' => 'mms_design_crm_database_',
        'persistent' => false,
      ),
      'default' => 
      array (
        'url' => NULL,
        'host' => '127.0.0.1',
        'username' => NULL,
        'password' => NULL,
        'port' => '6379',
        'database' => '0',
      ),
      'cache' => 
      array (
        'url' => NULL,
        'host' => '127.0.0.1',
        'username' => NULL,
        'password' => NULL,
        'port' => '6379',
        'database' => '1',
      ),
    ),
  ),
  'dompdf' => 
  array (
    'show_warnings' => false,
    'public_path' => NULL,
    'convert_entities' => true,
    'options' => 
    array (
      'font_dir' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\fonts',
      'font_cache' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\fonts',
      'temp_dir' => 'C:\\Users\\Mmsde\\AppData\\Local\\Temp',
      'chroot' => 'C:\\xampp\\htdocs\\mms-crm-core',
      'allowed_protocols' => 
      array (
        'data://' => 
        array (
          'rules' => 
          array (
          ),
        ),
        'file://' => 
        array (
          'rules' => 
          array (
          ),
        ),
        'http://' => 
        array (
          'rules' => 
          array (
          ),
        ),
        'https://' => 
        array (
          'rules' => 
          array (
          ),
        ),
      ),
      'artifactPathValidation' => NULL,
      'log_output_file' => NULL,
      'enable_font_subsetting' => false,
      'pdf_backend' => 'CPDF',
      'default_media_type' => 'screen',
      'default_paper_size' => 'a4',
      'default_paper_orientation' => 'portrait',
      'default_font' => 'serif',
      'dpi' => 96,
      'enable_php' => false,
      'enable_javascript' => true,
      'enable_remote' => false,
      'allowed_remote_hosts' => NULL,
      'font_height_ratio' => 1.1,
      'enable_html5_parser' => true,
    ),
  ),
  'filesystems' => 
  array (
    'default' => 'local',
    'disks' => 
    array (
      'local' => 
      array (
        'driver' => 'local',
        'root' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\app/private',
        'serve' => true,
        'throw' => false,
        'report' => false,
      ),
      'public' => 
      array (
        'driver' => 'local',
        'root' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\app/public',
        'url' => 'http://localhost/mms-crm/public/storage',
        'visibility' => 'public',
        'throw' => false,
        'report' => false,
      ),
      's3' => 
      array (
        'driver' => 's3',
        'key' => NULL,
        'secret' => NULL,
        'region' => NULL,
        'bucket' => NULL,
        'url' => NULL,
        'endpoint' => NULL,
        'use_path_style_endpoint' => false,
        'throw' => false,
        'report' => false,
      ),
    ),
    'links' => 
    array (
      'C:\\xampp\\htdocs\\mms-crm-core\\public\\storage' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\app/public',
    ),
  ),
  'logging' => 
  array (
    'default' => 'stack',
    'deprecations' => 
    array (
      'channel' => NULL,
      'trace' => false,
    ),
    'channels' => 
    array (
      'stack' => 
      array (
        'driver' => 'stack',
        'channels' => 
        array (
          0 => 'single',
        ),
        'ignore_exceptions' => false,
      ),
      'single' => 
      array (
        'driver' => 'single',
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\logs/laravel.log',
        'level' => 'debug',
        'replace_placeholders' => true,
      ),
      'daily' => 
      array (
        'driver' => 'daily',
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\logs/laravel.log',
        'level' => 'debug',
        'days' => 14,
        'replace_placeholders' => true,
      ),
      'slack' => 
      array (
        'driver' => 'slack',
        'url' => NULL,
        'username' => 'Laravel Log',
        'emoji' => ':boom:',
        'level' => 'debug',
        'replace_placeholders' => true,
      ),
      'papertrail' => 
      array (
        'driver' => 'monolog',
        'level' => 'debug',
        'handler' => 'Monolog\\Handler\\SyslogUdpHandler',
        'handler_with' => 
        array (
          'host' => NULL,
          'port' => NULL,
          'connectionString' => 'tls://:',
        ),
        'processors' => 
        array (
          0 => 'Monolog\\Processor\\PsrLogMessageProcessor',
        ),
      ),
      'stderr' => 
      array (
        'driver' => 'monolog',
        'level' => 'debug',
        'handler' => 'Monolog\\Handler\\StreamHandler',
        'handler_with' => 
        array (
          'stream' => 'php://stderr',
        ),
        'formatter' => NULL,
        'processors' => 
        array (
          0 => 'Monolog\\Processor\\PsrLogMessageProcessor',
        ),
      ),
      'syslog' => 
      array (
        'driver' => 'syslog',
        'level' => 'debug',
        'facility' => 8,
        'replace_placeholders' => true,
      ),
      'errorlog' => 
      array (
        'driver' => 'errorlog',
        'level' => 'debug',
        'replace_placeholders' => true,
      ),
      'null' => 
      array (
        'driver' => 'monolog',
        'handler' => 'Monolog\\Handler\\NullHandler',
      ),
      'emergency' => 
      array (
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\logs/laravel.log',
      ),
    ),
  ),
  'mail' => 
  array (
    'default' => 'smtp',
    'mailers' => 
    array (
      'smtp' => 
      array (
        'transport' => 'smtp',
        'scheme' => NULL,
        'url' => NULL,
        'host' => 'your.smtp.host',
        'port' => '587',
        'username' => 'your@email.com',
        'password' => 'yourpassword',
        'timeout' => NULL,
        'local_domain' => 'localhost',
      ),
      'ses' => 
      array (
        'transport' => 'ses',
      ),
      'postmark' => 
      array (
        'transport' => 'postmark',
      ),
      'resend' => 
      array (
        'transport' => 'resend',
      ),
      'sendmail' => 
      array (
        'transport' => 'sendmail',
        'path' => '/usr/sbin/sendmail -bs -i',
      ),
      'log' => 
      array (
        'transport' => 'log',
        'channel' => NULL,
      ),
      'array' => 
      array (
        'transport' => 'array',
      ),
      'failover' => 
      array (
        'transport' => 'failover',
        'mailers' => 
        array (
          0 => 'smtp',
          1 => 'log',
        ),
        'retry_after' => 60,
      ),
      'roundrobin' => 
      array (
        'transport' => 'roundrobin',
        'mailers' => 
        array (
          0 => 'ses',
          1 => 'postmark',
        ),
        'retry_after' => 60,
      ),
    ),
    'from' => 
    array (
      'address' => 'your@email.com',
      'name' => 'MMS Design CRM',
    ),
    'markdown' => 
    array (
      'theme' => 'default',
      'paths' => 
      array (
        0 => 'C:\\xampp\\htdocs\\mms-crm-core\\resources\\views/vendor/mail',
      ),
    ),
  ),
  'queue' => 
  array (
    'default' => 'sync',
    'connections' => 
    array (
      'sync' => 
      array (
        'driver' => 'sync',
      ),
      'database' => 
      array (
        'driver' => 'database',
        'connection' => NULL,
        'table' => 'jobs',
        'queue' => 'default',
        'retry_after' => 90,
        'after_commit' => false,
      ),
      'beanstalkd' => 
      array (
        'driver' => 'beanstalkd',
        'host' => 'localhost',
        'queue' => 'default',
        'retry_after' => 90,
        'block_for' => 0,
        'after_commit' => false,
      ),
      'sqs' => 
      array (
        'driver' => 'sqs',
        'key' => NULL,
        'secret' => NULL,
        'prefix' => 'https://sqs.us-east-1.amazonaws.com/your-account-id',
        'queue' => 'default',
        'suffix' => NULL,
        'region' => 'us-east-1',
        'after_commit' => false,
      ),
      'redis' => 
      array (
        'driver' => 'redis',
        'connection' => 'default',
        'queue' => 'default',
        'retry_after' => 90,
        'block_for' => NULL,
        'after_commit' => false,
      ),
    ),
    'batching' => 
    array (
      'database' => 'mysql',
      'table' => 'job_batches',
    ),
    'failed' => 
    array (
      'driver' => 'database-uuids',
      'database' => 'mysql',
      'table' => 'failed_jobs',
    ),
  ),
  'services' => 
  array (
    'postmark' => 
    array (
      'token' => NULL,
    ),
    'resend' => 
    array (
      'key' => NULL,
    ),
    'ses' => 
    array (
      'key' => NULL,
      'secret' => NULL,
      'region' => 'us-east-1',
    ),
    'slack' => 
    array (
      'notifications' => 
      array (
        'bot_user_oauth_token' => NULL,
        'channel' => NULL,
      ),
    ),
  ),
  'session' => 
  array (
    'driver' => 'file',
    'lifetime' => 120,
    'expire_on_close' => false,
    'encrypt' => false,
    'files' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework/sessions',
    'connection' => NULL,
    'table' => 'sessions',
    'store' => NULL,
    'lottery' => 
    array (
      0 => 2,
      1 => 100,
    ),
    'cookie' => 'mms_design_crm_session',
    'path' => '/',
    'domain' => NULL,
    'secure' => NULL,
    'http_only' => true,
    'same_site' => 'lax',
    'partitioned' => false,
  ),
  'broadcasting' => 
  array (
    'default' => 'null',
    'connections' => 
    array (
      'reverb' => 
      array (
        'driver' => 'reverb',
        'key' => NULL,
        'secret' => NULL,
        'app_id' => NULL,
        'options' => 
        array (
          'host' => NULL,
          'port' => 443,
          'scheme' => 'https',
          'useTLS' => true,
        ),
        'client_options' => 
        array (
        ),
      ),
      'pusher' => 
      array (
        'driver' => 'pusher',
        'key' => NULL,
        'secret' => NULL,
        'app_id' => NULL,
        'options' => 
        array (
          'cluster' => NULL,
          'host' => 'api-mt1.pusher.com',
          'port' => 443,
          'scheme' => 'https',
          'encrypted' => true,
          'useTLS' => true,
        ),
        'client_options' => 
        array (
        ),
      ),
      'ably' => 
      array (
        'driver' => 'ably',
        'key' => NULL,
      ),
      'log' => 
      array (
        'driver' => 'log',
      ),
      'null' => 
      array (
        'driver' => 'null',
      ),
    ),
  ),
  'concurrency' => 
  array (
    'default' => 'process',
  ),
  'cors' => 
  array (
    'paths' => 
    array (
      0 => 'api/*',
      1 => 'sanctum/csrf-cookie',
    ),
    'allowed_methods' => 
    array (
      0 => '*',
    ),
    'allowed_origins' => 
    array (
      0 => '*',
    ),
    'allowed_origins_patterns' => 
    array (
    ),
    'allowed_headers' => 
    array (
      0 => '*',
    ),
    'exposed_headers' => 
    array (
    ),
    'max_age' => 0,
    'supports_credentials' => false,
  ),
  'hashing' => 
  array (
    'driver' => 'bcrypt',
    'bcrypt' => 
    array (
      'rounds' => 12,
      'verify' => true,
      'limit' => NULL,
    ),
    'argon' => 
    array (
      'memory' => 65536,
      'threads' => 1,
      'time' => 4,
      'verify' => true,
    ),
    'rehash_on_login' => true,
  ),
  'view' => 
  array (
    'paths' => 
    array (
      0 => 'C:\\xampp\\htdocs\\mms-crm-core\\resources\\views',
    ),
    'compiled' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework\\views',
  ),
  'blade-heroicons' => 
  array (
    'prefix' => 'heroicon',
    'fallback' => '',
    'class' => '',
    'attributes' => 
    array (
    ),
  ),
  'blade-icons' => 
  array (
    'sets' => 
    array (
    ),
    'class' => '',
    'attributes' => 
    array (
    ),
    'fallback' => '',
    'components' => 
    array (
      'disabled' => false,
      'default' => 'icon',
    ),
  ),
  'filament' => 
  array (
    'broadcasting' => 
    array (
    ),
    'default_filesystem_disk' => 'public',
    'assets_path' => NULL,
    'cache_path' => 'C:\\xampp\\htdocs\\mms-crm-core\\bootstrap/cache/filament',
    'livewire_loading_delay' => 'default',
    'system_route_prefix' => 'filament',
  ),
  'livewire' => 
  array (
    'class_namespace' => 'App\\Livewire',
    'view_path' => 'C:\\xampp\\htdocs\\mms-crm-core\\resources\\views/livewire',
    'layout' => 'components.layouts.app',
    'lazy_placeholder' => NULL,
    'temporary_file_upload' => 
    array (
      'disk' => NULL,
      'rules' => NULL,
      'directory' => NULL,
      'middleware' => NULL,
      'preview_mimes' => 
      array (
        0 => 'png',
        1 => 'gif',
        2 => 'bmp',
        3 => 'svg',
        4 => 'wav',
        5 => 'mp4',
        6 => 'mov',
        7 => 'avi',
        8 => 'wmv',
        9 => 'mp3',
        10 => 'm4a',
        11 => 'jpg',
        12 => 'jpeg',
        13 => 'mpga',
        14 => 'webp',
        15 => 'wma',
      ),
      'max_upload_time' => 5,
      'cleanup' => true,
    ),
    'render_on_redirect' => false,
    'legacy_model_binding' => false,
    'inject_assets' => true,
    'navigate' => 
    array (
      'show_progress_bar' => true,
      'progress_bar_color' => '#2299dd',
    ),
    'inject_morph_markers' => true,
    'pagination_theme' => 'tailwind',
  ),
);


--- FILE: bootstrap\cache\packages.php ---
<?php return array (
  'anourvalar/eloquent-serialize' => 
  array (
    'aliases' => 
    array (
      'EloquentSerialize' => 'AnourValar\\EloquentSerialize\\Facades\\EloquentSerializeFacade',
    ),
  ),
  'barryvdh/laravel-dompdf' => 
  array (
    'aliases' => 
    array (
      'PDF' => 'Barryvdh\\DomPDF\\Facade\\Pdf',
      'Pdf' => 'Barryvdh\\DomPDF\\Facade\\Pdf',
    ),
    'providers' => 
    array (
      0 => 'Barryvdh\\DomPDF\\ServiceProvider',
    ),
  ),
  'blade-ui-kit/blade-heroicons' => 
  array (
    'providers' => 
    array (
      0 => 'BladeUI\\Heroicons\\BladeHeroiconsServiceProvider',
    ),
  ),
  'blade-ui-kit/blade-icons' => 
  array (
    'providers' => 
    array (
      0 => 'BladeUI\\Icons\\BladeIconsServiceProvider',
    ),
  ),
  'filament/actions' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Actions\\ActionsServiceProvider',
    ),
  ),
  'filament/filament' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\FilamentServiceProvider',
    ),
  ),
  'filament/forms' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Forms\\FormsServiceProvider',
    ),
  ),
  'filament/infolists' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Infolists\\InfolistsServiceProvider',
    ),
  ),
  'filament/notifications' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Notifications\\NotificationsServiceProvider',
    ),
  ),
  'filament/support' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Support\\SupportServiceProvider',
    ),
  ),
  'filament/tables' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Tables\\TablesServiceProvider',
    ),
  ),
  'filament/widgets' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Widgets\\WidgetsServiceProvider',
    ),
  ),
  'kirschbaum-development/eloquent-power-joins' => 
  array (
    'providers' => 
    array (
      0 => 'Kirschbaum\\PowerJoins\\PowerJoinsServiceProvider',
    ),
  ),
  'livewire/livewire' => 
  array (
    'aliases' => 
    array (
      'Livewire' => 'Livewire\\Livewire',
    ),
    'providers' => 
    array (
      0 => 'Livewire\\LivewireServiceProvider',
    ),
  ),
  'nesbot/carbon' => 
  array (
    'providers' => 
    array (
      0 => 'Carbon\\Laravel\\ServiceProvider',
    ),
  ),
  'nunomaduro/termwind' => 
  array (
    'providers' => 
    array (
      0 => 'Termwind\\Laravel\\TermwindServiceProvider',
    ),
  ),
  'ryangjchandler/blade-capture-directive' => 
  array (
    'aliases' => 
    array (
      'BladeCaptureDirective' => 'RyanChandler\\BladeCaptureDirective\\Facades\\BladeCaptureDirective',
    ),
    'providers' => 
    array (
      0 => 'RyanChandler\\BladeCaptureDirective\\BladeCaptureDirectiveServiceProvider',
    ),
  ),
);

--- FILE: bootstrap\cache\services.php ---
<?php return array (
  'providers' => 
  array (
    0 => 'Illuminate\\Auth\\AuthServiceProvider',
    1 => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    2 => 'Illuminate\\Bus\\BusServiceProvider',
    3 => 'Illuminate\\Cache\\CacheServiceProvider',
    4 => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    5 => 'Illuminate\\Concurrency\\ConcurrencyServiceProvider',
    6 => 'Illuminate\\Cookie\\CookieServiceProvider',
    7 => 'Illuminate\\Database\\DatabaseServiceProvider',
    8 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
    9 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
    10 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
    11 => 'Illuminate\\Hashing\\HashServiceProvider',
    12 => 'Illuminate\\Mail\\MailServiceProvider',
    13 => 'Illuminate\\Notifications\\NotificationServiceProvider',
    14 => 'Illuminate\\Pagination\\PaginationServiceProvider',
    15 => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    16 => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    17 => 'Illuminate\\Queue\\QueueServiceProvider',
    18 => 'Illuminate\\Redis\\RedisServiceProvider',
    19 => 'Illuminate\\Session\\SessionServiceProvider',
    20 => 'Illuminate\\Translation\\TranslationServiceProvider',
    21 => 'Illuminate\\Validation\\ValidationServiceProvider',
    22 => 'Illuminate\\View\\ViewServiceProvider',
    23 => 'Barryvdh\\DomPDF\\ServiceProvider',
    24 => 'BladeUI\\Heroicons\\BladeHeroiconsServiceProvider',
    25 => 'BladeUI\\Icons\\BladeIconsServiceProvider',
    26 => 'Filament\\Actions\\ActionsServiceProvider',
    27 => 'Filament\\FilamentServiceProvider',
    28 => 'Filament\\Forms\\FormsServiceProvider',
    29 => 'Filament\\Infolists\\InfolistsServiceProvider',
    30 => 'Filament\\Notifications\\NotificationsServiceProvider',
    31 => 'Filament\\Support\\SupportServiceProvider',
    32 => 'Filament\\Tables\\TablesServiceProvider',
    33 => 'Filament\\Widgets\\WidgetsServiceProvider',
    34 => 'Kirschbaum\\PowerJoins\\PowerJoinsServiceProvider',
    35 => 'Livewire\\LivewireServiceProvider',
    36 => 'Carbon\\Laravel\\ServiceProvider',
    37 => 'Termwind\\Laravel\\TermwindServiceProvider',
    38 => 'RyanChandler\\BladeCaptureDirective\\BladeCaptureDirectiveServiceProvider',
    39 => 'App\\Providers\\AppServiceProvider',
    40 => 'App\\Providers\\Filament\\AdminPanelProvider',
  ),
  'eager' => 
  array (
    0 => 'Illuminate\\Auth\\AuthServiceProvider',
    1 => 'Illuminate\\Cookie\\CookieServiceProvider',
    2 => 'Illuminate\\Database\\DatabaseServiceProvider',
    3 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
    4 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
    5 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
    6 => 'Illuminate\\Notifications\\NotificationServiceProvider',
    7 => 'Illuminate\\Pagination\\PaginationServiceProvider',
    8 => 'Illuminate\\Session\\SessionServiceProvider',
    9 => 'Illuminate\\View\\ViewServiceProvider',
    10 => 'Barryvdh\\DomPDF\\ServiceProvider',
    11 => 'BladeUI\\Heroicons\\BladeHeroiconsServiceProvider',
    12 => 'BladeUI\\Icons\\BladeIconsServiceProvider',
    13 => 'Filament\\Actions\\ActionsServiceProvider',
    14 => 'Filament\\FilamentServiceProvider',
    15 => 'Filament\\Forms\\FormsServiceProvider',
    16 => 'Filament\\Infolists\\InfolistsServiceProvider',
    17 => 'Filament\\Notifications\\NotificationsServiceProvider',
    18 => 'Filament\\Support\\SupportServiceProvider',
    19 => 'Filament\\Tables\\TablesServiceProvider',
    20 => 'Filament\\Widgets\\WidgetsServiceProvider',
    21 => 'Kirschbaum\\PowerJoins\\PowerJoinsServiceProvider',
    22 => 'Livewire\\LivewireServiceProvider',
    23 => 'Carbon\\Laravel\\ServiceProvider',
    24 => 'Termwind\\Laravel\\TermwindServiceProvider',
    25 => 'RyanChandler\\BladeCaptureDirective\\BladeCaptureDirectiveServiceProvider',
    26 => 'App\\Providers\\AppServiceProvider',
    27 => 'App\\Providers\\Filament\\AdminPanelProvider',
  ),
  'deferred' => 
  array (
    'Illuminate\\Broadcasting\\BroadcastManager' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Contracts\\Broadcasting\\Factory' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Contracts\\Broadcasting\\Broadcaster' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Contracts\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Contracts\\Bus\\QueueingDispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Bus\\BatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Bus\\DatabaseBatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
    'cache' => 'Illuminate\\Cache\\CacheServiceProvider',
    'cache.store' => 'Illuminate\\Cache\\CacheServiceProvider',
    'cache.psr6' => 'Illuminate\\Cache\\CacheServiceProvider',
    'memcached.connector' => 'Illuminate\\Cache\\CacheServiceProvider',
    'Illuminate\\Cache\\RateLimiter' => 'Illuminate\\Cache\\CacheServiceProvider',
    'Illuminate\\Foundation\\Console\\AboutCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\ForgetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ClearCompiledCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Auth\\Console\\ClearResetsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\DbCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\PruneCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\ShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\WipeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\DownCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentDecryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentEncryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Concurrency\\Console\\InvokeSerializedClosureCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\KeyGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\OptimizeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\OptimizeClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\PackageDiscoverCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\PruneStaleTagsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ListFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\FlushFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ForgetFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ListenCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\PruneBatchesCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\PruneFailedJobsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RestartCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RetryCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RetryBatchCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\WorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\DumpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Seeds\\SeedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleFinishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleRunCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleClearCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleTestCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleWorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleInterruptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\ShowModelCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StorageLinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StorageUnlinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\UpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ApiInstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\BroadcastingInstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\CacheTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\CastMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ChannelListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ChannelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ClassMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ComponentMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConsoleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Routing\\Console\\ControllerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\DocsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnumMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ExceptionMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\InterfaceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\JobMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\JobMiddlewareMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\LangPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ListenerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\MailMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Routing\\Console\\MiddlewareMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ModelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\NotificationMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Notifications\\Console\\NotificationTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ObserverMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\PolicyMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ProviderMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\FailedTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\BatchesTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RequestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ResourceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RuleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ScopeMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Session\\Console\\SessionTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ServeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StubPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\TestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\TraitMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\VendorPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migrator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migration.repository' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migration.creator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Migrations\\Migrator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\MigrateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\FreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\InstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\RefreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\ResetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\RollbackCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\StatusCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'composer' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Concurrency\\ConcurrencyManager' => 'Illuminate\\Concurrency\\ConcurrencyServiceProvider',
    'hash' => 'Illuminate\\Hashing\\HashServiceProvider',
    'hash.driver' => 'Illuminate\\Hashing\\HashServiceProvider',
    'mail.manager' => 'Illuminate\\Mail\\MailServiceProvider',
    'mailer' => 'Illuminate\\Mail\\MailServiceProvider',
    'Illuminate\\Mail\\Markdown' => 'Illuminate\\Mail\\MailServiceProvider',
    'auth.password' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    'auth.password.broker' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    'Illuminate\\Contracts\\Pipeline\\Hub' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    'pipeline' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    'queue' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.connection' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.failer' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.listener' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.worker' => 'Illuminate\\Queue\\QueueServiceProvider',
    'redis' => 'Illuminate\\Redis\\RedisServiceProvider',
    'redis.connection' => 'Illuminate\\Redis\\RedisServiceProvider',
    'translator' => 'Illuminate\\Translation\\TranslationServiceProvider',
    'translation.loader' => 'Illuminate\\Translation\\TranslationServiceProvider',
    'validator' => 'Illuminate\\Validation\\ValidationServiceProvider',
    'validation.presence' => 'Illuminate\\Validation\\ValidationServiceProvider',
    'Illuminate\\Contracts\\Validation\\UncompromisedVerifier' => 'Illuminate\\Validation\\ValidationServiceProvider',
  ),
  'when' => 
  array (
    'Illuminate\\Broadcasting\\BroadcastServiceProvider' => 
    array (
    ),
    'Illuminate\\Bus\\BusServiceProvider' => 
    array (
    ),
    'Illuminate\\Cache\\CacheServiceProvider' => 
    array (
    ),
    'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider' => 
    array (
    ),
    'Illuminate\\Concurrency\\ConcurrencyServiceProvider' => 
    array (
    ),
    'Illuminate\\Hashing\\HashServiceProvider' => 
    array (
    ),
    'Illuminate\\Mail\\MailServiceProvider' => 
    array (
    ),
    'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider' => 
    array (
    ),
    'Illuminate\\Pipeline\\PipelineServiceProvider' => 
    array (
    ),
    'Illuminate\\Queue\\QueueServiceProvider' => 
    array (
    ),
    'Illuminate\\Redis\\RedisServiceProvider' => 
    array (
    ),
    'Illuminate\\Translation\\TranslationServiceProvider' => 
    array (
    ),
    'Illuminate\\Validation\\ValidationServiceProvider' => 
    array (
    ),
  ),
);

===== FOLDER: bootstrap/cache =====

--- FILE: bootstrap\cache\config.php ---
<?php return array (
  2 => 'broadcasting',
  4 => 'concurrency',
  5 => 'cors',
  8 => 'hashing',
  14 => 'view',
  'app' => 
  array (
    'name' => 'MMS Design CRM',
    'env' => 'local',
    'debug' => true,
    'url' => 'http://localhost/mms-crm/public',
    'frontend_url' => 'http://localhost:3000',
    'asset_url' => NULL,
    'timezone' => 'UTC',
    'locale' => 'en',
    'fallback_locale' => 'en',
    'faker_locale' => 'en_US',
    'cipher' => 'AES-256-CBC',
    'key' => '',
    'previous_keys' => 
    array (
    ),
    'maintenance' => 
    array (
      'driver' => 'file',
      'store' => 'database',
    ),
    'providers' => 
    array (
      0 => 'Illuminate\\Auth\\AuthServiceProvider',
      1 => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
      2 => 'Illuminate\\Bus\\BusServiceProvider',
      3 => 'Illuminate\\Cache\\CacheServiceProvider',
      4 => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
      5 => 'Illuminate\\Concurrency\\ConcurrencyServiceProvider',
      6 => 'Illuminate\\Cookie\\CookieServiceProvider',
      7 => 'Illuminate\\Database\\DatabaseServiceProvider',
      8 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
      9 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
      10 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
      11 => 'Illuminate\\Hashing\\HashServiceProvider',
      12 => 'Illuminate\\Mail\\MailServiceProvider',
      13 => 'Illuminate\\Notifications\\NotificationServiceProvider',
      14 => 'Illuminate\\Pagination\\PaginationServiceProvider',
      15 => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
      16 => 'Illuminate\\Pipeline\\PipelineServiceProvider',
      17 => 'Illuminate\\Queue\\QueueServiceProvider',
      18 => 'Illuminate\\Redis\\RedisServiceProvider',
      19 => 'Illuminate\\Session\\SessionServiceProvider',
      20 => 'Illuminate\\Translation\\TranslationServiceProvider',
      21 => 'Illuminate\\Validation\\ValidationServiceProvider',
      22 => 'Illuminate\\View\\ViewServiceProvider',
      23 => 'App\\Providers\\AppServiceProvider',
      24 => 'App\\Providers\\Filament\\AdminPanelProvider',
    ),
    'aliases' => 
    array (
      'App' => 'Illuminate\\Support\\Facades\\App',
      'Arr' => 'Illuminate\\Support\\Arr',
      'Artisan' => 'Illuminate\\Support\\Facades\\Artisan',
      'Auth' => 'Illuminate\\Support\\Facades\\Auth',
      'Blade' => 'Illuminate\\Support\\Facades\\Blade',
      'Broadcast' => 'Illuminate\\Support\\Facades\\Broadcast',
      'Bus' => 'Illuminate\\Support\\Facades\\Bus',
      'Cache' => 'Illuminate\\Support\\Facades\\Cache',
      'Concurrency' => 'Illuminate\\Support\\Facades\\Concurrency',
      'Config' => 'Illuminate\\Support\\Facades\\Config',
      'Context' => 'Illuminate\\Support\\Facades\\Context',
      'Cookie' => 'Illuminate\\Support\\Facades\\Cookie',
      'Crypt' => 'Illuminate\\Support\\Facades\\Crypt',
      'Date' => 'Illuminate\\Support\\Facades\\Date',
      'DB' => 'Illuminate\\Support\\Facades\\DB',
      'Eloquent' => 'Illuminate\\Database\\Eloquent\\Model',
      'Event' => 'Illuminate\\Support\\Facades\\Event',
      'File' => 'Illuminate\\Support\\Facades\\File',
      'Gate' => 'Illuminate\\Support\\Facades\\Gate',
      'Hash' => 'Illuminate\\Support\\Facades\\Hash',
      'Http' => 'Illuminate\\Support\\Facades\\Http',
      'Js' => 'Illuminate\\Support\\Js',
      'Lang' => 'Illuminate\\Support\\Facades\\Lang',
      'Log' => 'Illuminate\\Support\\Facades\\Log',
      'Mail' => 'Illuminate\\Support\\Facades\\Mail',
      'Notification' => 'Illuminate\\Support\\Facades\\Notification',
      'Number' => 'Illuminate\\Support\\Number',
      'Password' => 'Illuminate\\Support\\Facades\\Password',
      'Process' => 'Illuminate\\Support\\Facades\\Process',
      'Queue' => 'Illuminate\\Support\\Facades\\Queue',
      'RateLimiter' => 'Illuminate\\Support\\Facades\\RateLimiter',
      'Redirect' => 'Illuminate\\Support\\Facades\\Redirect',
      'Request' => 'Illuminate\\Support\\Facades\\Request',
      'Response' => 'Illuminate\\Support\\Facades\\Response',
      'Route' => 'Illuminate\\Support\\Facades\\Route',
      'Schedule' => 'Illuminate\\Support\\Facades\\Schedule',
      'Schema' => 'Illuminate\\Support\\Facades\\Schema',
      'Session' => 'Illuminate\\Support\\Facades\\Session',
      'Storage' => 'Illuminate\\Support\\Facades\\Storage',
      'Str' => 'Illuminate\\Support\\Str',
      'URL' => 'Illuminate\\Support\\Facades\\URL',
      'Uri' => 'Illuminate\\Support\\Uri',
      'Validator' => 'Illuminate\\Support\\Facades\\Validator',
      'View' => 'Illuminate\\Support\\Facades\\View',
      'Vite' => 'Illuminate\\Support\\Facades\\Vite',
    ),
  ),
  'auth' => 
  array (
    'defaults' => 
    array (
      'guard' => 'web',
      'passwords' => 'users',
    ),
    'guards' => 
    array (
      'web' => 
      array (
        'driver' => 'session',
        'provider' => 'users',
      ),
    ),
    'providers' => 
    array (
      'users' => 
      array (
        'driver' => 'eloquent',
        'model' => 'App\\Models\\User',
      ),
    ),
    'passwords' => 
    array (
      'users' => 
      array (
        'provider' => 'users',
        'table' => 'password_reset_tokens',
        'expire' => 60,
        'throttle' => 60,
      ),
    ),
    'password_timeout' => 10800,
  ),
  'cache' => 
  array (
    'default' => 'database',
    'stores' => 
    array (
      'array' => 
      array (
        'driver' => 'array',
        'serialize' => false,
      ),
      'database' => 
      array (
        'driver' => 'database',
        'connection' => NULL,
        'table' => 'cache',
        'lock_connection' => NULL,
        'lock_table' => NULL,
      ),
      'file' => 
      array (
        'driver' => 'file',
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework/cache/data',
        'lock_path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework/cache/data',
      ),
      'memcached' => 
      array (
        'driver' => 'memcached',
        'persistent_id' => NULL,
        'sasl' => 
        array (
          0 => NULL,
          1 => NULL,
        ),
        'options' => 
        array (
        ),
        'servers' => 
        array (
          0 => 
          array (
            'host' => '127.0.0.1',
            'port' => 11211,
            'weight' => 100,
          ),
        ),
      ),
      'redis' => 
      array (
        'driver' => 'redis',
        'connection' => 'cache',
        'lock_connection' => 'default',
      ),
      'dynamodb' => 
      array (
        'driver' => 'dynamodb',
        'key' => NULL,
        'secret' => NULL,
        'region' => 'us-east-1',
        'table' => 'cache',
        'endpoint' => NULL,
      ),
      'octane' => 
      array (
        'driver' => 'octane',
      ),
    ),
    'prefix' => 'mms_design_crm_cache_',
  ),
  'database' => 
  array (
    'default' => 'mysql',
    'connections' => 
    array (
      'sqlite' => 
      array (
        'driver' => 'sqlite',
        'url' => NULL,
        'database' => 'mms_crm',
        'prefix' => '',
        'foreign_key_constraints' => true,
        'busy_timeout' => NULL,
        'journal_mode' => NULL,
        'synchronous' => NULL,
      ),
      'mysql' => 
      array (
        'driver' => 'mysql',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'unix_socket' => '',
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'prefix_indexes' => true,
        'strict' => true,
        'engine' => NULL,
        'options' => 
        array (
        ),
      ),
      'mariadb' => 
      array (
        'driver' => 'mariadb',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'unix_socket' => '',
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'prefix_indexes' => true,
        'strict' => true,
        'engine' => NULL,
        'options' => 
        array (
        ),
      ),
      'pgsql' => 
      array (
        'driver' => 'pgsql',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8',
        'prefix' => '',
        'prefix_indexes' => true,
        'search_path' => 'public',
        'sslmode' => 'prefer',
      ),
      'sqlsrv' => 
      array (
        'driver' => 'sqlsrv',
        'url' => NULL,
        'host' => '127.0.0.1',
        'port' => '3306',
        'database' => 'mms_crm',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8',
        'prefix' => '',
        'prefix_indexes' => true,
      ),
    ),
    'migrations' => 
    array (
      'table' => 'migrations',
      'update_date_on_publish' => true,
    ),
    'redis' => 
    array (
      'client' => 'phpredis',
      'options' => 
      array (
        'cluster' => 'redis',
        'prefix' => 'mms_design_crm_database_',
        'persistent' => false,
      ),
      'default' => 
      array (
        'url' => NULL,
        'host' => '127.0.0.1',
        'username' => NULL,
        'password' => NULL,
        'port' => '6379',
        'database' => '0',
      ),
      'cache' => 
      array (
        'url' => NULL,
        'host' => '127.0.0.1',
        'username' => NULL,
        'password' => NULL,
        'port' => '6379',
        'database' => '1',
      ),
    ),
  ),
  'dompdf' => 
  array (
    'show_warnings' => false,
    'public_path' => NULL,
    'convert_entities' => true,
    'options' => 
    array (
      'font_dir' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\fonts',
      'font_cache' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\fonts',
      'temp_dir' => 'C:\\Users\\Mmsde\\AppData\\Local\\Temp',
      'chroot' => 'C:\\xampp\\htdocs\\mms-crm-core',
      'allowed_protocols' => 
      array (
        'data://' => 
        array (
          'rules' => 
          array (
          ),
        ),
        'file://' => 
        array (
          'rules' => 
          array (
          ),
        ),
        'http://' => 
        array (
          'rules' => 
          array (
          ),
        ),
        'https://' => 
        array (
          'rules' => 
          array (
          ),
        ),
      ),
      'artifactPathValidation' => NULL,
      'log_output_file' => NULL,
      'enable_font_subsetting' => false,
      'pdf_backend' => 'CPDF',
      'default_media_type' => 'screen',
      'default_paper_size' => 'a4',
      'default_paper_orientation' => 'portrait',
      'default_font' => 'serif',
      'dpi' => 96,
      'enable_php' => false,
      'enable_javascript' => true,
      'enable_remote' => false,
      'allowed_remote_hosts' => NULL,
      'font_height_ratio' => 1.1,
      'enable_html5_parser' => true,
    ),
  ),
  'filesystems' => 
  array (
    'default' => 'local',
    'disks' => 
    array (
      'local' => 
      array (
        'driver' => 'local',
        'root' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\app/private',
        'serve' => true,
        'throw' => false,
        'report' => false,
      ),
      'public' => 
      array (
        'driver' => 'local',
        'root' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\app/public',
        'url' => 'http://localhost/mms-crm/public/storage',
        'visibility' => 'public',
        'throw' => false,
        'report' => false,
      ),
      's3' => 
      array (
        'driver' => 's3',
        'key' => NULL,
        'secret' => NULL,
        'region' => NULL,
        'bucket' => NULL,
        'url' => NULL,
        'endpoint' => NULL,
        'use_path_style_endpoint' => false,
        'throw' => false,
        'report' => false,
      ),
    ),
    'links' => 
    array (
      'C:\\xampp\\htdocs\\mms-crm-core\\public\\storage' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\app/public',
    ),
  ),
  'logging' => 
  array (
    'default' => 'stack',
    'deprecations' => 
    array (
      'channel' => NULL,
      'trace' => false,
    ),
    'channels' => 
    array (
      'stack' => 
      array (
        'driver' => 'stack',
        'channels' => 
        array (
          0 => 'single',
        ),
        'ignore_exceptions' => false,
      ),
      'single' => 
      array (
        'driver' => 'single',
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\logs/laravel.log',
        'level' => 'debug',
        'replace_placeholders' => true,
      ),
      'daily' => 
      array (
        'driver' => 'daily',
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\logs/laravel.log',
        'level' => 'debug',
        'days' => 14,
        'replace_placeholders' => true,
      ),
      'slack' => 
      array (
        'driver' => 'slack',
        'url' => NULL,
        'username' => 'Laravel Log',
        'emoji' => ':boom:',
        'level' => 'debug',
        'replace_placeholders' => true,
      ),
      'papertrail' => 
      array (
        'driver' => 'monolog',
        'level' => 'debug',
        'handler' => 'Monolog\\Handler\\SyslogUdpHandler',
        'handler_with' => 
        array (
          'host' => NULL,
          'port' => NULL,
          'connectionString' => 'tls://:',
        ),
        'processors' => 
        array (
          0 => 'Monolog\\Processor\\PsrLogMessageProcessor',
        ),
      ),
      'stderr' => 
      array (
        'driver' => 'monolog',
        'level' => 'debug',
        'handler' => 'Monolog\\Handler\\StreamHandler',
        'handler_with' => 
        array (
          'stream' => 'php://stderr',
        ),
        'formatter' => NULL,
        'processors' => 
        array (
          0 => 'Monolog\\Processor\\PsrLogMessageProcessor',
        ),
      ),
      'syslog' => 
      array (
        'driver' => 'syslog',
        'level' => 'debug',
        'facility' => 8,
        'replace_placeholders' => true,
      ),
      'errorlog' => 
      array (
        'driver' => 'errorlog',
        'level' => 'debug',
        'replace_placeholders' => true,
      ),
      'null' => 
      array (
        'driver' => 'monolog',
        'handler' => 'Monolog\\Handler\\NullHandler',
      ),
      'emergency' => 
      array (
        'path' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\logs/laravel.log',
      ),
    ),
  ),
  'mail' => 
  array (
    'default' => 'smtp',
    'mailers' => 
    array (
      'smtp' => 
      array (
        'transport' => 'smtp',
        'scheme' => NULL,
        'url' => NULL,
        'host' => 'your.smtp.host',
        'port' => '587',
        'username' => 'your@email.com',
        'password' => 'yourpassword',
        'timeout' => NULL,
        'local_domain' => 'localhost',
      ),
      'ses' => 
      array (
        'transport' => 'ses',
      ),
      'postmark' => 
      array (
        'transport' => 'postmark',
      ),
      'resend' => 
      array (
        'transport' => 'resend',
      ),
      'sendmail' => 
      array (
        'transport' => 'sendmail',
        'path' => '/usr/sbin/sendmail -bs -i',
      ),
      'log' => 
      array (
        'transport' => 'log',
        'channel' => NULL,
      ),
      'array' => 
      array (
        'transport' => 'array',
      ),
      'failover' => 
      array (
        'transport' => 'failover',
        'mailers' => 
        array (
          0 => 'smtp',
          1 => 'log',
        ),
        'retry_after' => 60,
      ),
      'roundrobin' => 
      array (
        'transport' => 'roundrobin',
        'mailers' => 
        array (
          0 => 'ses',
          1 => 'postmark',
        ),
        'retry_after' => 60,
      ),
    ),
    'from' => 
    array (
      'address' => 'your@email.com',
      'name' => 'MMS Design CRM',
    ),
    'markdown' => 
    array (
      'theme' => 'default',
      'paths' => 
      array (
        0 => 'C:\\xampp\\htdocs\\mms-crm-core\\resources\\views/vendor/mail',
      ),
    ),
  ),
  'queue' => 
  array (
    'default' => 'sync',
    'connections' => 
    array (
      'sync' => 
      array (
        'driver' => 'sync',
      ),
      'database' => 
      array (
        'driver' => 'database',
        'connection' => NULL,
        'table' => 'jobs',
        'queue' => 'default',
        'retry_after' => 90,
        'after_commit' => false,
      ),
      'beanstalkd' => 
      array (
        'driver' => 'beanstalkd',
        'host' => 'localhost',
        'queue' => 'default',
        'retry_after' => 90,
        'block_for' => 0,
        'after_commit' => false,
      ),
      'sqs' => 
      array (
        'driver' => 'sqs',
        'key' => NULL,
        'secret' => NULL,
        'prefix' => 'https://sqs.us-east-1.amazonaws.com/your-account-id',
        'queue' => 'default',
        'suffix' => NULL,
        'region' => 'us-east-1',
        'after_commit' => false,
      ),
      'redis' => 
      array (
        'driver' => 'redis',
        'connection' => 'default',
        'queue' => 'default',
        'retry_after' => 90,
        'block_for' => NULL,
        'after_commit' => false,
      ),
    ),
    'batching' => 
    array (
      'database' => 'mysql',
      'table' => 'job_batches',
    ),
    'failed' => 
    array (
      'driver' => 'database-uuids',
      'database' => 'mysql',
      'table' => 'failed_jobs',
    ),
  ),
  'services' => 
  array (
    'postmark' => 
    array (
      'token' => NULL,
    ),
    'resend' => 
    array (
      'key' => NULL,
    ),
    'ses' => 
    array (
      'key' => NULL,
      'secret' => NULL,
      'region' => 'us-east-1',
    ),
    'slack' => 
    array (
      'notifications' => 
      array (
        'bot_user_oauth_token' => NULL,
        'channel' => NULL,
      ),
    ),
  ),
  'session' => 
  array (
    'driver' => 'file',
    'lifetime' => 120,
    'expire_on_close' => false,
    'encrypt' => false,
    'files' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework/sessions',
    'connection' => NULL,
    'table' => 'sessions',
    'store' => NULL,
    'lottery' => 
    array (
      0 => 2,
      1 => 100,
    ),
    'cookie' => 'mms_design_crm_session',
    'path' => '/',
    'domain' => NULL,
    'secure' => NULL,
    'http_only' => true,
    'same_site' => 'lax',
    'partitioned' => false,
  ),
  'broadcasting' => 
  array (
    'default' => 'null',
    'connections' => 
    array (
      'reverb' => 
      array (
        'driver' => 'reverb',
        'key' => NULL,
        'secret' => NULL,
        'app_id' => NULL,
        'options' => 
        array (
          'host' => NULL,
          'port' => 443,
          'scheme' => 'https',
          'useTLS' => true,
        ),
        'client_options' => 
        array (
        ),
      ),
      'pusher' => 
      array (
        'driver' => 'pusher',
        'key' => NULL,
        'secret' => NULL,
        'app_id' => NULL,
        'options' => 
        array (
          'cluster' => NULL,
          'host' => 'api-mt1.pusher.com',
          'port' => 443,
          'scheme' => 'https',
          'encrypted' => true,
          'useTLS' => true,
        ),
        'client_options' => 
        array (
        ),
      ),
      'ably' => 
      array (
        'driver' => 'ably',
        'key' => NULL,
      ),
      'log' => 
      array (
        'driver' => 'log',
      ),
      'null' => 
      array (
        'driver' => 'null',
      ),
    ),
  ),
  'concurrency' => 
  array (
    'default' => 'process',
  ),
  'cors' => 
  array (
    'paths' => 
    array (
      0 => 'api/*',
      1 => 'sanctum/csrf-cookie',
    ),
    'allowed_methods' => 
    array (
      0 => '*',
    ),
    'allowed_origins' => 
    array (
      0 => '*',
    ),
    'allowed_origins_patterns' => 
    array (
    ),
    'allowed_headers' => 
    array (
      0 => '*',
    ),
    'exposed_headers' => 
    array (
    ),
    'max_age' => 0,
    'supports_credentials' => false,
  ),
  'hashing' => 
  array (
    'driver' => 'bcrypt',
    'bcrypt' => 
    array (
      'rounds' => 12,
      'verify' => true,
      'limit' => NULL,
    ),
    'argon' => 
    array (
      'memory' => 65536,
      'threads' => 1,
      'time' => 4,
      'verify' => true,
    ),
    'rehash_on_login' => true,
  ),
  'view' => 
  array (
    'paths' => 
    array (
      0 => 'C:\\xampp\\htdocs\\mms-crm-core\\resources\\views',
    ),
    'compiled' => 'C:\\xampp\\htdocs\\mms-crm-core\\storage\\framework\\views',
  ),
  'blade-heroicons' => 
  array (
    'prefix' => 'heroicon',
    'fallback' => '',
    'class' => '',
    'attributes' => 
    array (
    ),
  ),
  'blade-icons' => 
  array (
    'sets' => 
    array (
    ),
    'class' => '',
    'attributes' => 
    array (
    ),
    'fallback' => '',
    'components' => 
    array (
      'disabled' => false,
      'default' => 'icon',
    ),
  ),
  'filament' => 
  array (
    'broadcasting' => 
    array (
    ),
    'default_filesystem_disk' => 'public',
    'assets_path' => NULL,
    'cache_path' => 'C:\\xampp\\htdocs\\mms-crm-core\\bootstrap/cache/filament',
    'livewire_loading_delay' => 'default',
    'system_route_prefix' => 'filament',
  ),
  'livewire' => 
  array (
    'class_namespace' => 'App\\Livewire',
    'view_path' => 'C:\\xampp\\htdocs\\mms-crm-core\\resources\\views/livewire',
    'layout' => 'components.layouts.app',
    'lazy_placeholder' => NULL,
    'temporary_file_upload' => 
    array (
      'disk' => NULL,
      'rules' => NULL,
      'directory' => NULL,
      'middleware' => NULL,
      'preview_mimes' => 
      array (
        0 => 'png',
        1 => 'gif',
        2 => 'bmp',
        3 => 'svg',
        4 => 'wav',
        5 => 'mp4',
        6 => 'mov',
        7 => 'avi',
        8 => 'wmv',
        9 => 'mp3',
        10 => 'm4a',
        11 => 'jpg',
        12 => 'jpeg',
        13 => 'mpga',
        14 => 'webp',
        15 => 'wma',
      ),
      'max_upload_time' => 5,
      'cleanup' => true,
    ),
    'render_on_redirect' => false,
    'legacy_model_binding' => false,
    'inject_assets' => true,
    'navigate' => 
    array (
      'show_progress_bar' => true,
      'progress_bar_color' => '#2299dd',
    ),
    'inject_morph_markers' => true,
    'pagination_theme' => 'tailwind',
  ),
);


--- FILE: bootstrap\cache\packages.php ---
<?php return array (
  'anourvalar/eloquent-serialize' => 
  array (
    'aliases' => 
    array (
      'EloquentSerialize' => 'AnourValar\\EloquentSerialize\\Facades\\EloquentSerializeFacade',
    ),
  ),
  'barryvdh/laravel-dompdf' => 
  array (
    'aliases' => 
    array (
      'PDF' => 'Barryvdh\\DomPDF\\Facade\\Pdf',
      'Pdf' => 'Barryvdh\\DomPDF\\Facade\\Pdf',
    ),
    'providers' => 
    array (
      0 => 'Barryvdh\\DomPDF\\ServiceProvider',
    ),
  ),
  'blade-ui-kit/blade-heroicons' => 
  array (
    'providers' => 
    array (
      0 => 'BladeUI\\Heroicons\\BladeHeroiconsServiceProvider',
    ),
  ),
  'blade-ui-kit/blade-icons' => 
  array (
    'providers' => 
    array (
      0 => 'BladeUI\\Icons\\BladeIconsServiceProvider',
    ),
  ),
  'filament/actions' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Actions\\ActionsServiceProvider',
    ),
  ),
  'filament/filament' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\FilamentServiceProvider',
    ),
  ),
  'filament/forms' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Forms\\FormsServiceProvider',
    ),
  ),
  'filament/infolists' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Infolists\\InfolistsServiceProvider',
    ),
  ),
  'filament/notifications' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Notifications\\NotificationsServiceProvider',
    ),
  ),
  'filament/support' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Support\\SupportServiceProvider',
    ),
  ),
  'filament/tables' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Tables\\TablesServiceProvider',
    ),
  ),
  'filament/widgets' => 
  array (
    'providers' => 
    array (
      0 => 'Filament\\Widgets\\WidgetsServiceProvider',
    ),
  ),
  'kirschbaum-development/eloquent-power-joins' => 
  array (
    'providers' => 
    array (
      0 => 'Kirschbaum\\PowerJoins\\PowerJoinsServiceProvider',
    ),
  ),
  'livewire/livewire' => 
  array (
    'aliases' => 
    array (
      'Livewire' => 'Livewire\\Livewire',
    ),
    'providers' => 
    array (
      0 => 'Livewire\\LivewireServiceProvider',
    ),
  ),
  'nesbot/carbon' => 
  array (
    'providers' => 
    array (
      0 => 'Carbon\\Laravel\\ServiceProvider',
    ),
  ),
  'nunomaduro/termwind' => 
  array (
    'providers' => 
    array (
      0 => 'Termwind\\Laravel\\TermwindServiceProvider',
    ),
  ),
  'ryangjchandler/blade-capture-directive' => 
  array (
    'aliases' => 
    array (
      'BladeCaptureDirective' => 'RyanChandler\\BladeCaptureDirective\\Facades\\BladeCaptureDirective',
    ),
    'providers' => 
    array (
      0 => 'RyanChandler\\BladeCaptureDirective\\BladeCaptureDirectiveServiceProvider',
    ),
  ),
);

--- FILE: bootstrap\cache\services.php ---
<?php return array (
  'providers' => 
  array (
    0 => 'Illuminate\\Auth\\AuthServiceProvider',
    1 => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    2 => 'Illuminate\\Bus\\BusServiceProvider',
    3 => 'Illuminate\\Cache\\CacheServiceProvider',
    4 => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    5 => 'Illuminate\\Concurrency\\ConcurrencyServiceProvider',
    6 => 'Illuminate\\Cookie\\CookieServiceProvider',
    7 => 'Illuminate\\Database\\DatabaseServiceProvider',
    8 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
    9 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
    10 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
    11 => 'Illuminate\\Hashing\\HashServiceProvider',
    12 => 'Illuminate\\Mail\\MailServiceProvider',
    13 => 'Illuminate\\Notifications\\NotificationServiceProvider',
    14 => 'Illuminate\\Pagination\\PaginationServiceProvider',
    15 => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    16 => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    17 => 'Illuminate\\Queue\\QueueServiceProvider',
    18 => 'Illuminate\\Redis\\RedisServiceProvider',
    19 => 'Illuminate\\Session\\SessionServiceProvider',
    20 => 'Illuminate\\Translation\\TranslationServiceProvider',
    21 => 'Illuminate\\Validation\\ValidationServiceProvider',
    22 => 'Illuminate\\View\\ViewServiceProvider',
    23 => 'Barryvdh\\DomPDF\\ServiceProvider',
    24 => 'BladeUI\\Heroicons\\BladeHeroiconsServiceProvider',
    25 => 'BladeUI\\Icons\\BladeIconsServiceProvider',
    26 => 'Filament\\Actions\\ActionsServiceProvider',
    27 => 'Filament\\FilamentServiceProvider',
    28 => 'Filament\\Forms\\FormsServiceProvider',
    29 => 'Filament\\Infolists\\InfolistsServiceProvider',
    30 => 'Filament\\Notifications\\NotificationsServiceProvider',
    31 => 'Filament\\Support\\SupportServiceProvider',
    32 => 'Filament\\Tables\\TablesServiceProvider',
    33 => 'Filament\\Widgets\\WidgetsServiceProvider',
    34 => 'Kirschbaum\\PowerJoins\\PowerJoinsServiceProvider',
    35 => 'Livewire\\LivewireServiceProvider',
    36 => 'Carbon\\Laravel\\ServiceProvider',
    37 => 'Termwind\\Laravel\\TermwindServiceProvider',
    38 => 'RyanChandler\\BladeCaptureDirective\\BladeCaptureDirectiveServiceProvider',
    39 => 'App\\Providers\\AppServiceProvider',
    40 => 'App\\Providers\\Filament\\AdminPanelProvider',
  ),
  'eager' => 
  array (
    0 => 'Illuminate\\Auth\\AuthServiceProvider',
    1 => 'Illuminate\\Cookie\\CookieServiceProvider',
    2 => 'Illuminate\\Database\\DatabaseServiceProvider',
    3 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
    4 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
    5 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
    6 => 'Illuminate\\Notifications\\NotificationServiceProvider',
    7 => 'Illuminate\\Pagination\\PaginationServiceProvider',
    8 => 'Illuminate\\Session\\SessionServiceProvider',
    9 => 'Illuminate\\View\\ViewServiceProvider',
    10 => 'Barryvdh\\DomPDF\\ServiceProvider',
    11 => 'BladeUI\\Heroicons\\BladeHeroiconsServiceProvider',
    12 => 'BladeUI\\Icons\\BladeIconsServiceProvider',
    13 => 'Filament\\Actions\\ActionsServiceProvider',
    14 => 'Filament\\FilamentServiceProvider',
    15 => 'Filament\\Forms\\FormsServiceProvider',
    16 => 'Filament\\Infolists\\InfolistsServiceProvider',
    17 => 'Filament\\Notifications\\NotificationsServiceProvider',
    18 => 'Filament\\Support\\SupportServiceProvider',
    19 => 'Filament\\Tables\\TablesServiceProvider',
    20 => 'Filament\\Widgets\\WidgetsServiceProvider',
    21 => 'Kirschbaum\\PowerJoins\\PowerJoinsServiceProvider',
    22 => 'Livewire\\LivewireServiceProvider',
    23 => 'Carbon\\Laravel\\ServiceProvider',
    24 => 'Termwind\\Laravel\\TermwindServiceProvider',
    25 => 'RyanChandler\\BladeCaptureDirective\\BladeCaptureDirectiveServiceProvider',
    26 => 'App\\Providers\\AppServiceProvider',
    27 => 'App\\Providers\\Filament\\AdminPanelProvider',
  ),
  'deferred' => 
  array (
    'Illuminate\\Broadcasting\\BroadcastManager' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Contracts\\Broadcasting\\Factory' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Contracts\\Broadcasting\\Broadcaster' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
    'Illuminate\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Contracts\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Contracts\\Bus\\QueueingDispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Bus\\BatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
    'Illuminate\\Bus\\DatabaseBatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
    'cache' => 'Illuminate\\Cache\\CacheServiceProvider',
    'cache.store' => 'Illuminate\\Cache\\CacheServiceProvider',
    'cache.psr6' => 'Illuminate\\Cache\\CacheServiceProvider',
    'memcached.connector' => 'Illuminate\\Cache\\CacheServiceProvider',
    'Illuminate\\Cache\\RateLimiter' => 'Illuminate\\Cache\\CacheServiceProvider',
    'Illuminate\\Foundation\\Console\\AboutCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\ForgetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ClearCompiledCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Auth\\Console\\ClearResetsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\DbCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\PruneCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\ShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\WipeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\DownCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentDecryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnvironmentEncryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Concurrency\\Console\\InvokeSerializedClosureCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\KeyGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\OptimizeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\OptimizeClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\PackageDiscoverCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\PruneStaleTagsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ListFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\FlushFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ForgetFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\ListenCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\PruneBatchesCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\PruneFailedJobsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RestartCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RetryCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\RetryBatchCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\WorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RouteListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\DumpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Seeds\\SeedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleFinishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleRunCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleClearCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleTestCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleWorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Console\\Scheduling\\ScheduleInterruptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\ShowModelCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StorageLinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StorageUnlinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\UpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ApiInstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\BroadcastingInstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Cache\\Console\\CacheTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\CastMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ChannelListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ChannelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ClassMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ComponentMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConfigPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ConsoleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Routing\\Console\\ControllerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\DocsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EnumMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\EventMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ExceptionMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\InterfaceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\JobMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\JobMiddlewareMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\LangPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ListenerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\MailMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Routing\\Console\\MiddlewareMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ModelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\NotificationMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Notifications\\Console\\NotificationTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ObserverMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\PolicyMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ProviderMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\FailedTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Queue\\Console\\BatchesTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RequestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ResourceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\RuleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ScopeMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Session\\Console\\SessionTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ServeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\StubPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\TestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\TraitMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\VendorPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Foundation\\Console\\ViewMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migrator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migration.repository' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'migration.creator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Migrations\\Migrator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\MigrateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\FreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\InstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\RefreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\ResetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\RollbackCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\StatusCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'composer' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
    'Illuminate\\Concurrency\\ConcurrencyManager' => 'Illuminate\\Concurrency\\ConcurrencyServiceProvider',
    'hash' => 'Illuminate\\Hashing\\HashServiceProvider',
    'hash.driver' => 'Illuminate\\Hashing\\HashServiceProvider',
    'mail.manager' => 'Illuminate\\Mail\\MailServiceProvider',
    'mailer' => 'Illuminate\\Mail\\MailServiceProvider',
    'Illuminate\\Mail\\Markdown' => 'Illuminate\\Mail\\MailServiceProvider',
    'auth.password' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    'auth.password.broker' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
    'Illuminate\\Contracts\\Pipeline\\Hub' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    'pipeline' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
    'queue' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.connection' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.failer' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.listener' => 'Illuminate\\Queue\\QueueServiceProvider',
    'queue.worker' => 'Illuminate\\Queue\\QueueServiceProvider',
    'redis' => 'Illuminate\\Redis\\RedisServiceProvider',
    'redis.connection' => 'Illuminate\\Redis\\RedisServiceProvider',
    'translator' => 'Illuminate\\Translation\\TranslationServiceProvider',
    'translation.loader' => 'Illuminate\\Translation\\TranslationServiceProvider',
    'validator' => 'Illuminate\\Validation\\ValidationServiceProvider',
    'validation.presence' => 'Illuminate\\Validation\\ValidationServiceProvider',
    'Illuminate\\Contracts\\Validation\\UncompromisedVerifier' => 'Illuminate\\Validation\\ValidationServiceProvider',
  ),
  'when' => 
  array (
    'Illuminate\\Broadcasting\\BroadcastServiceProvider' => 
    array (
    ),
    'Illuminate\\Bus\\BusServiceProvider' => 
    array (
    ),
    'Illuminate\\Cache\\CacheServiceProvider' => 
    array (
    ),
    'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider' => 
    array (
    ),
    'Illuminate\\Concurrency\\ConcurrencyServiceProvider' => 
    array (
    ),
    'Illuminate\\Hashing\\HashServiceProvider' => 
    array (
    ),
    'Illuminate\\Mail\\MailServiceProvider' => 
    array (
    ),
    'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider' => 
    array (
    ),
    'Illuminate\\Pipeline\\PipelineServiceProvider' => 
    array (
    ),
    'Illuminate\\Queue\\QueueServiceProvider' => 
    array (
    ),
    'Illuminate\\Redis\\RedisServiceProvider' => 
    array (
    ),
    'Illuminate\\Translation\\TranslationServiceProvider' => 
    array (
    ),
    'Illuminate\\Validation\\ValidationServiceProvider' => 
    array (
    ),
  ),
);

===== FOLDER: config =====

--- FILE: config\app.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'MMS Design CRM'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];


--- FILE: config\auth.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];


--- FILE: config\cache.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];


--- FILE: config\database.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];


--- FILE: config\dompdf.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Settings
    |--------------------------------------------------------------------------
    |
    | Set some default values. It is possible to add all defines that can be set
    | in dompdf_config.inc.php. You can also override the entire config file.
    |
    */
    'show_warnings' => false,   // Throw an Exception on warnings from dompdf

    'public_path' => null,  // Override the public path if needed

    /*
     * Dejavu Sans font is missing glyphs for converted entities, turn it off if you need to show € and £.
     */
    'convert_entities' => true,

    'options' => [
        /**
         * The location of the DOMPDF font directory
         *
         * The location of the directory where DOMPDF will store fonts and font metrics
         * Note: This directory must exist and be writable by the webserver process.
         * *Please note the trailing slash.*
         *
         * Notes regarding fonts:
         * Additional .afm font metrics can be added by executing load_font.php from command line.
         *
         * Only the original "Base 14 fonts" are present on all pdf viewers. Additional fonts must
         * be embedded in the pdf file or the PDF may not display correctly. This can significantly
         * increase file size unless font subsetting is enabled. Before embedding a font please
         * review your rights under the font license.
         *
         * Any font specification in the source HTML is translated to the closest font available
         * in the font directory.
         *
         * The pdf standard "Base 14 fonts" are:
         * Courier, Courier-Bold, Courier-BoldOblique, Courier-Oblique,
         * Helvetica, Helvetica-Bold, Helvetica-BoldOblique, Helvetica-Oblique,
         * Times-Roman, Times-Bold, Times-BoldItalic, Times-Italic,
         * Symbol, ZapfDingbats.
         */
        'font_dir' => storage_path('fonts'), // advised by dompdf (https://github.com/dompdf/dompdf/pull/782)

        /**
         * The location of the DOMPDF font cache directory
         *
         * This directory contains the cached font metrics for the fonts used by DOMPDF.
         * This directory can be the same as DOMPDF_FONT_DIR
         *
         * Note: This directory must exist and be writable by the webserver process.
         */
        'font_cache' => storage_path('fonts'),

        /**
         * The location of a temporary directory.
         *
         * The directory specified must be writeable by the webserver process.
         * The temporary directory is required to download remote images and when
         * using the PDFLib back end.
         */
        'temp_dir' => sys_get_temp_dir(),

        /**
         * ==== IMPORTANT ====
         *
         * dompdf's "chroot": Prevents dompdf from accessing system files or other
         * files on the webserver.  All local files opened by dompdf must be in a
         * subdirectory of this directory.  DO NOT set it to '/' since this could
         * allow an attacker to use dompdf to read any files on the server.  This
         * should be an absolute path.
         * This is only checked on command line call by dompdf.php, but not by
         * direct class use like:
         * $dompdf = new DOMPDF();  $dompdf->load_html($htmldata); $dompdf->render(); $pdfdata = $dompdf->output();
         */
        'chroot' => realpath(base_path()),

        /**
         * Protocol whitelist
         *
         * Protocols and PHP wrappers allowed in URIs, and the validation rules
         * that determine if a resouce may be loaded. Full support is not guaranteed
         * for the protocols/wrappers specified
         * by this array.
         *
         * @var array
         */
        'allowed_protocols' => [
            'data://' => ['rules' => []],
            'file://' => ['rules' => []],
            'http://' => ['rules' => []],
            'https://' => ['rules' => []],
        ],

        /**
         * Operational artifact (log files, temporary files) path validation
         */
        'artifactPathValidation' => null,

        /**
         * @var string
         */
        'log_output_file' => null,

        /**
         * Whether to enable font subsetting or not.
         */
        'enable_font_subsetting' => false,

        /**
         * The PDF rendering backend to use
         *
         * Valid settings are 'PDFLib', 'CPDF' (the bundled R&OS PDF class), 'GD' and
         * 'auto'. 'auto' will look for PDFLib and use it if found, or if not it will
         * fall back on CPDF. 'GD' renders PDFs to graphic files.
         * {@link * Canvas_Factory} ultimately determines which rendering class to
         * instantiate based on this setting.
         *
         * Both PDFLib & CPDF rendering backends provide sufficient rendering
         * capabilities for dompdf, however additional features (e.g. object,
         * image and font support, etc.) differ between backends.  Please see
         * {@link PDFLib_Adapter} for more information on the PDFLib backend
         * and {@link CPDF_Adapter} and lib/class.pdf.php for more information
         * on CPDF. Also see the documentation for each backend at the links
         * below.
         *
         * The GD rendering backend is a little different than PDFLib and
         * CPDF. Several features of CPDF and PDFLib are not supported or do
         * not make any sense when creating image files.  For example,
         * multiple pages are not supported, nor are PDF 'objects'.  Have a
         * look at {@link GD_Adapter} for more information.  GD support is
         * experimental, so use it at your own risk.
         *
         * @link http://www.pdflib.com
         * @link http://www.ros.co.nz/pdf
         * @link http://www.php.net/image
         */
        'pdf_backend' => 'CPDF',

        /**
         * html target media view which should be rendered into pdf.
         * List of types and parsing rules for future extensions:
         * http://www.w3.org/TR/REC-html40/types.html
         *   screen, tty, tv, projection, handheld, print, braille, aural, all
         * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.
         * Note, even though the generated pdf file is intended for print output,
         * the desired content might be different (e.g. screen or projection view of html file).
         * Therefore allow specification of content here.
         */
        'default_media_type' => 'screen',

        /**
         * The default paper size.
         *
         * North America standard is "letter"; other countries generally "a4"
         *
         * @see CPDF_Adapter::PAPER_SIZES for valid sizes ('letter', 'legal', 'A4', etc.)
         */
        'default_paper_size' => 'a4',

        /**
         * The default paper orientation.
         *
         * The orientation of the page (portrait or landscape).
         *
         * @var string
         */
        'default_paper_orientation' => 'portrait',

        /**
         * The default font family
         *
         * Used if no suitable fonts can be found. This must exist in the font folder.
         *
         * @var string
         */
        'default_font' => 'serif',

        /**
         * Image DPI setting
         *
         * This setting determines the default DPI setting for images and fonts.  The
         * DPI may be overridden for inline images by explictly setting the
         * image's width & height style attributes (i.e. if the image's native
         * width is 600 pixels and you specify the image's width as 72 points,
         * the image will have a DPI of 600 in the rendered PDF.  The DPI of
         * background images can not be overridden and is controlled entirely
         * via this parameter.
         *
         * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).
         * If a size in html is given as px (or without unit as image size),
         * this tells the corresponding size in pt.
         * This adjusts the relative sizes to be similar to the rendering of the
         * html page in a reference browser.
         *
         * In pdf, always 1 pt = 1/72 inch
         *
         * Rendering resolution of various browsers in px per inch:
         * Windows Firefox and Internet Explorer:
         *   SystemControl->Display properties->FontResolution: Default:96, largefonts:120, custom:?
         * Linux Firefox:
         *   about:config *resolution: Default:96
         *   (xorg screen dimension in mm and Desktop font dpi settings are ignored)
         *
         * Take care about extra font/image zoom factor of browser.
         *
         * In images, <img> size in pixel attribute, img css style, are overriding
         * the real image dimension in px for rendering.
         *
         * @var int
         */
        'dpi' => 96,

        /**
         * Enable embedded PHP
         *
         * If this setting is set to true then DOMPDF will automatically evaluate embedded PHP contained
         * within <script type="text/php"> ... </script> tags.
         *
         * ==== IMPORTANT ==== Enabling this for documents you do not trust (e.g. arbitrary remote html pages)
         * is a security risk.
         * Embedded scripts are run with the same level of system access available to dompdf.
         * Set this option to false (recommended) if you wish to process untrusted documents.
         * This setting may increase the risk of system exploit.
         * Do not change this settings without understanding the consequences.
         * Additional documentation is available on the dompdf wiki at:
         * https://github.com/dompdf/dompdf/wiki
         *
         * @var bool
         */
        'enable_php' => false,

        /**
         * Rnable inline JavaScript
         *
         * If this setting is set to true then DOMPDF will automatically insert JavaScript code contained
         * within <script type="text/javascript"> ... </script> tags as written into the PDF.
         * NOTE: This is PDF-based JavaScript to be executed by the PDF viewer,
         * not browser-based JavaScript executed by Dompdf.
         *
         * @var bool
         */
        'enable_javascript' => true,

        /**
         * Enable remote file access
         *
         *  If this setting is set to true, DOMPDF will access remote sites for
         *  images and CSS files as required.
         *
         *  ==== IMPORTANT ====
         *  This can be a security risk, in particular in combination with isPhpEnabled and
         *  allowing remote html code to be passed to $dompdf = new DOMPDF(); $dompdf->load_html(...);
         *  This allows anonymous users to download legally doubtful internet content which on
         *  tracing back appears to being downloaded by your server, or allows malicious php code
         *  in remote html pages to be executed by your server with your account privileges.
         *
         *  This setting may increase the risk of system exploit. Do not change
         *  this settings without understanding the consequences. Additional
         *  documentation is available on the dompdf wiki at:
         *  https://github.com/dompdf/dompdf/wiki
         *
         * @var bool
         */
        'enable_remote' => false,

        /**
         * List of allowed remote hosts
         *
         * Each value of the array must be a valid hostname.
         *
         * This will be used to filter which resources can be loaded in combination with
         * isRemoteEnabled. If enable_remote is FALSE, then this will have no effect.
         *
         * Leave to NULL to allow any remote host.
         *
         * @var array|null
         */
        'allowed_remote_hosts' => null,

        /**
         * A ratio applied to the fonts height to be more like browsers' line height
         */
        'font_height_ratio' => 1.1,

        /**
         * Use the HTML5 Lib parser
         *
         * @deprecated This feature is now always on in dompdf 2.x
         *
         * @var bool
         */
        'enable_html5_parser' => true,
    ],

];


--- FILE: config\filesystems.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];


--- FILE: config\logging.php ---
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];


--- FILE: config\mail.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];


--- FILE: config\queue.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];


--- FILE: config\services.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];


--- FILE: config\session.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];


===== FOLDER: database =====

--- FILE: database\factories\UserFactory.php ---
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}


--- FILE: database\migrations\2025_01_01_000001_create_sub_dealer_regions_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('sub_dealer_regions', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('description')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        // First drop the foreign key from users table
        Schema::table('users', function (Blueprint $table) {
            $table->dropForeign(['region_id']);
            $table->dropColumn('region_id');
        });

        Schema::dropIfExists('sub_dealer_regions');
    }
};

--- FILE: database\migrations\2025_01_01_000002_create_user_roles_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('user_roles', function (Blueprint $table) {
            $table->id();
            $table->string('role_name')->unique(); // Example: admin, dealer, sub-dealer, viewer, accountant, etc.
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('user_roles');
    }
};


--- FILE: database\migrations\2025_01_01_000003_create_users_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
			$table->id();
			$table->string('name');
			$table->string('email')->unique();
			$table->timestamp('email_verified_at')->nullable();
			$table->string('password');
			$table->string('phone')->nullable();
			$table->string('address')->nullable();
			$table->text('banking_details')->nullable();
			$table->string('vat_number')->nullable();
			$table->string('logo_path')->nullable();
			$table->string('role')->default('user');
			$table->foreignId('region_id')->nullable()->constrained('sub_dealer_regions')->onDelete('set null');
			$table->foreignId('role_id')->nullable()->constrained('user_roles')->onDelete('set null');
			$table->rememberToken();
			$table->timestamps();

        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};


--- FILE: database\migrations\2025_01_01_000004_create_customers_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('customers', function (Blueprint $table) {
			$table->id();
			$table->string('company_name');
			$table->string('contact_person')->nullable();  // <-- ADD THIS LINE
			$table->string('email')->nullable();
			$table->string('phone')->nullable();
			$table->string('vat_number')->nullable();
			$table->string('vendor_number')->nullable();
			$table->string('catagory')->nullable();
			$table->string('type')->nullable();
			$table->string('language')->nullable();
			$table->string('currency')->nullable();
			$table->text('address')->nullable();
			$table->unsignedBigInteger('created_by')->nullable();
			$table->timestamps();

        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customers');
    }
};

--- FILE: database\migrations\2025_01_01_000005_create_customer_contacts_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('customer_contacts', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('customer_id');
            $table->string('name');
            $table->string('email')->nullable();
            $table->string('phone')->nullable();
            $table->string('position')->nullable(); // e.g. Owner, Manager, Buyer
            $table->boolean('is_primary')->default(false); // Main contact?
            $table->timestamps();

            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customer_contacts');
    }
};

--- FILE: database\migrations\2025_01_01_000006_create_customer_notes_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('customer_notes', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('customer_id');
            $table->unsignedBigInteger('user_id'); // Who added the note (Dealer, Sub-dealer, Admin)
            $table->text('note');
            $table->timestamps();

            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customer_notes');
    }
};

--- FILE: database\migrations\2025_01_01_000007_create_customer_sub_dealer_links_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('customer_sub_dealer_links', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('customer_id');
            $table->unsignedBigInteger('sub_dealer_user_id'); // User.id of Sub-dealer
            $table->timestamps();

            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
            $table->foreign('sub_dealer_user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customer_sub_dealer_links');
    }
};

--- FILE: database\migrations\2025_01_01_000008_create_products_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->string('part_number')->unique();
            $table->string('name');
            $table->text('description')->nullable();
            $table->decimal('price', 10, 2);
            $table->string('currency')->default('ZAR');
            $table->boolean('vat_applicable')->default(true);
            $table->boolean('discount_applicable')->default(false);
            $table->boolean('bulk_discount_applicable')->default(false);
            $table->boolean('shipping_fee_applicable')->default(false);
            $table->text('list_contents')->nullable();
            $table->string('image_path')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('products');
    }
};

--- FILE: database\migrations\2025_01_01_000009_create_product_categories_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('product_categories', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('description')->nullable();
            $table->timestamps();
        });

        // Add category_id to products table (link to categories)
        Schema::table('products', function (Blueprint $table) {
            $table->unsignedBigInteger('category_id')->nullable()->after('id');

            $table->foreign('category_id')->references('id')->on('product_categories')->onDelete('set null');
        });
    }

    public function down(): void
    {
        // First drop the foreign key from products table
        Schema::table('products', function (Blueprint $table) {
            $table->dropForeign(['category_id']);
            $table->dropColumn('category_id');
        });

        Schema::dropIfExists('product_categories');
    }
};

--- FILE: database\migrations\2025_01_01_000010_create_dealers_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('dealers', function (Blueprint $table) {
            $table->id();
            $table->string('dealer_name')->unique();
            $table->string('type')->default('dealer'); // dealer / sub-dealer
            $table->string('contact_person')->nullable();
            $table->string('email')->nullable();
            $table->string('phone')->nullable();
            $table->text('address')->nullable();
            $table->text('bank_details')->nullable();
            $table->string('logo_path')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('dealers');
    }
};


--- FILE: database\migrations\2025_01_01_000011_create_kits_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kits', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->text('description')->nullable();
            $table->decimal('price', 10, 2);
			$table->boolean('vat_applicable')->default(true);
			$table->boolean('discount_allowed')->default(true);
            $table->unsignedBigInteger('dealer_id')->nullable();
            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kits');
    }
};


--- FILE: database\migrations\2025_01_01_000012_create_kit_assemblies_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kit_assemblies', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('dealer_id')->nullable(); // optional — dealer-specific kits
            $table->string('kit_name');
            $table->text('kit_description')->nullable();
            $table->decimal('price', 10, 2)->default(0.00); // optional total price for kit
            $table->boolean('vat_applicable')->default(true);
            $table->boolean('discount_allowed')->default(false);
            $table->timestamps();

            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kit_assemblies');
    }
};

--- FILE: database\migrations\2025_01_01_000013_create_kit_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kit_items', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('kit_assembly_id');
            $table->unsignedBigInteger('product_id');
            $table->unsignedInteger('quantity')->default(1);
            $table->timestamps();

            $table->foreign('kit_assembly_id')->references('id')->on('kit_assemblies')->onDelete('cascade');
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kit_items');
    }
};

--- FILE: database\migrations\2025_01_01_000014_create_quotes_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quotes', function (Blueprint $table) {
            $table->id();
            $table->string('quote_number')->unique();
            $table->unsignedBigInteger('user_id'); // Dealer/Sub-dealer creating the quote
            $table->unsignedBigInteger('customer_id');
            $table->decimal('subtotal', 12, 2)->default(0);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('total', 12, 2)->default(0);
            $table->text('terms_and_conditions')->nullable();
            $table->enum('status', ['draft', 'sent', 'converted'])->default('draft');
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quotes');
    }
};

--- FILE: database\migrations\2025_01_01_000015_create_quote_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_items', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_id');
            $table->unsignedBigInteger('product_id');
            $table->integer('qty')->default(1);
            $table->decimal('unit_price', 10, 2);
            $table->decimal('line_discount', 10, 2)->default(0);

            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('cascade');
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');

            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_items');
    }
};


--- FILE: database\migrations\2025_01_01_000016_create_quote_kits_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_kits', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_id');
            $table->unsignedBigInteger('kit_assembly_id');
            $table->unsignedInteger('quantity')->default(1);
            $table->decimal('unit_price', 10, 2)->default(0.00); // price per kit (may be overridden)
            $table->decimal('total_price', 12, 2)->default(0.00); // total = unit_price * quantity
            $table->boolean('vat_applicable')->default(true);
            $table->boolean('discount_applied')->default(false);
            $table->timestamps();

            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('cascade');
            $table->foreign('kit_assembly_id')->references('id')->on('kit_assemblies')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_kits');
    }
};

--- FILE: database\migrations\2025_01_01_000017_create_quote_kit_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_kit_items', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_kit_id');
            $table->unsignedBigInteger('product_id');
            $table->unsignedInteger('quantity')->default(1);
            $table->decimal('unit_price', 10, 2)->default(0.00); // at quote time (can capture price used at time)
            $table->decimal('total_price', 12, 2)->default(0.00); // unit * qty
            $table->timestamps();

            $table->foreign('quote_kit_id')->references('id')->on('quote_kits')->onDelete('cascade');
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_kit_items');
    }
};

--- FILE: database\migrations\2025_01_01_000018_create_quote_statuses_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('status_name')->unique(); // Example: Draft, Sent, Accepted, Rejected, Lost, Expired
            $table->string('color')->nullable(); // Optional UI color
            $table->timestamps();
        });

        // Add status_id to quotes table
        Schema::table('quotes', function (Blueprint $table) {
            $table->unsignedBigInteger('status_id')->nullable()->after('quote_number');

            $table->foreign('status_id')->references('id')->on('quote_statuses')->onDelete('set null');
        });
    }

    public function down(): void
    {
        // First drop FK in quotes table
        Schema::table('quotes', function (Blueprint $table) {
            $table->dropForeign(['status_id']);
            $table->dropColumn('status_id');
        });

        Schema::dropIfExists('quote_statuses');
    }
};

--- FILE: database\migrations\2025_01_01_000019_create_terms_conditions_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('terms_conditions', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable(); // So each Dealer/Sub-dealer can have their own Terms!
            $table->string('title'); // Name of this Terms version
            $table->text('content'); // Full rich text Terms
            $table->boolean('is_default')->default(false); // If this is default for new Quotes
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('terms_conditions');
    }
};

--- FILE: database\migrations\2025_01_01_000020_create_quote_terms_link_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_terms_link', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_id');
            $table->unsignedBigInteger('terms_id');
            $table->timestamps();

            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('cascade');
            $table->foreign('terms_id')->references('id')->on('terms_conditions')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_terms_link');
    }
};

--- FILE: database\migrations\2025_01_01_000021_create_invoices_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoices', function (Blueprint $table) {
            $table->id();
            $table->string('invoice_number')->unique();
            $table->foreignId('quote_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('customer_id')->constrained()->onDelete('cascade');
            $table->date('invoice_date');
            $table->string('status')->default('Draft'); // Draft, Sent, Paid
            $table->json('terms')->nullable();
            $table->decimal('subtotal', 12, 2)->default(0);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('total_amount', 12, 2)->default(0);
            $table->string('currency', 10)->default('ZAR');
            $table->boolean('is_pdf_generated')->default(false);
            $table->string('invoice_type')->default('TAX INVOICE'); // Or COMMERCIAL INVOICE
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoices');
    }
};


--- FILE: database\migrations\2025_01_01_000022_create_invoice_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('invoice_id')->constrained()->onDelete('cascade');
            $table->string('item_type'); // 'Product' or 'Kit'
            $table->unsignedBigInteger('item_id'); // product_id or kit_id
            $table->string('description'); // frozen for PDF
            $table->integer('quantity')->default(1);
            $table->decimal('unit_price', 12, 2)->default(0);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('discount_amount', 12, 2)->default(0);
            $table->decimal('line_total', 12, 2)->default(0);
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_items');
    }
};


--- FILE: database\migrations\2025_01_01_000023_create_invoice_statuses_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('status_name')->unique(); // Example: Draft, Sent, Paid, Overdue, Cancelled
            $table->string('color')->nullable(); // Optional UI color
            $table->timestamps();
        });

        // Add status_id to invoices table
        Schema::table('invoices', function (Blueprint $table) {
            $table->unsignedBigInteger('status_id')->nullable()->after('invoice_number');

            $table->foreign('status_id')->references('id')->on('invoice_statuses')->onDelete('set null');
        });
    }

    public function down(): void
    {
        // First drop FK in invoices table
        Schema::table('invoices', function (Blueprint $table) {
            $table->dropForeign(['status_id']);
            $table->dropColumn('status_id');
        });

        Schema::dropIfExists('invoice_statuses');
    }
};

--- FILE: database\migrations\2025_01_01_000024_create_invoice_terms_link_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_terms_link', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('invoice_id');
            $table->unsignedBigInteger('terms_id');
            $table->timestamps();

            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('cascade');
            $table->foreign('terms_id')->references('id')->on('terms_conditions')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_terms_link');
    }
};

--- FILE: database\migrations\2025_01_01_000024_create_payment_methods_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('payment_methods', function (Blueprint $table) {
            $table->id();
            $table->string('method_name')->unique(); // Example: Bank Transfer, Cash, Credit Card, PayPal
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });

        // 🚩 Do NOT alter 'payments' table here — payments table does not exist
        // Instead, add payment_method_id in 'invoice_payments' migration (correct)
    }

    public function down(): void
    {
        Schema::dropIfExists('payment_methods');
    }
};


--- FILE: database\migrations\2025_01_01_000025_create_invoice_payments_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_payments', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('invoice_id');
            $table->date('payment_date');
            $table->decimal('amount', 12, 2);

            // ✅ NEW — FK to payment_methods
            $table->unsignedBigInteger('payment_method_id')->nullable();
            $table->foreign('payment_method_id')->references('id')->on('payment_methods')->onDelete('set null');

            // (Optional) legacy text field for backup / notes
            $table->string('payment_method')->nullable(); // e.g. EFT, Credit Card, Cash, Other

            $table->string('reference')->nullable(); // Bank ref, internal ref
            $table->text('notes')->nullable();
            $table->timestamps();

            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_payments');
    }
};


--- FILE: database\migrations\2025_01_01_000027_create_email_templates_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('email_templates', function (Blueprint $table) {
            $table->id();
            $table->string('template_name')->unique(); // Example: "Quote Email", "Invoice Email", "Follow-up Reminder"
            $table->string('subject');
            $table->text('body'); // Rich text (HTML allowed)
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('email_templates');
    }
};

--- FILE: database\migrations\2025_01_01_000028_create_email_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('email_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Who triggered the email (Dealer / Sub-dealer / Admin)
            $table->unsignedBigInteger('customer_id')->nullable();
            $table->unsignedBigInteger('quote_id')->nullable();
            $table->unsignedBigInteger('invoice_id')->nullable();
            $table->string('recipient_email');
            $table->string('subject');
            $table->text('body')->nullable(); // Optionally store sent content
            $table->timestamp('sent_at')->nullable(); // Mark when sent
            $table->boolean('success')->default(false); // Sent ok?
            $table->string('error_message')->nullable(); // If failed
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('set null');
            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('set null');
            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('email_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000029_create_communication_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('communication_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Who logged the communication (Dealer / Sub-dealer / Admin)
            $table->unsignedBigInteger('customer_id');
            $table->unsignedBigInteger('quote_id')->nullable();
            $table->unsignedBigInteger('invoice_id')->nullable();
            $table->date('communication_date')->nullable();
            $table->string('type')->nullable(); // Example: Email, Phone, WhatsApp, Meeting
            $table->text('summary')->nullable();
            $table->boolean('requires_followup')->default(false);
            $table->date('followup_date')->nullable();
            $table->string('followup_status')->nullable(); // Example: Pending, Done, Cancelled
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('set null');
            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('communication_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000030_create_activity_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('activity_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable(); // Who performed the action
            $table->string('action_type'); // e.g. 'Created Quote', 'Updated Invoice', 'Deleted Customer'
            $table->string('entity_type')->nullable(); // e.g. 'Quote', 'Invoice', 'Customer'
            $table->unsignedBigInteger('entity_id')->nullable(); // ID of entity affected
            $table->text('description')->nullable(); // Free text description of what happened
            $table->string('ip_address')->nullable(); // IP of user
            $table->string('user_agent')->nullable(); // Browser/device
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('activity_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000031_create_login_audit_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('login_audit_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable();
            $table->timestamp('login_at');
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->boolean('success')->default(true); // Login successful or failed attempt
            $table->string('failure_reason')->nullable(); // If failed
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('login_audit_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000032_create_login_attempts_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('login_attempts', function (Blueprint $table) {
            $table->id();
            $table->string('email')->nullable(); // email attempted
            $table->unsignedBigInteger('user_id')->nullable(); // if matched to user
            $table->boolean('success')->default(false);
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('login_attempts');
    }
};

--- FILE: database\migrations\2025_01_01_000033_create_audit_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('audit_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Who did the action
            $table->string('action_type'); // e.g. "created quote", "updated invoice", "deleted product"
            $table->string('related_table')->nullable(); // e.g. "quotes", "customers"
            $table->unsignedBigInteger('related_id')->nullable(); // ID of the affected record
            $table->text('details')->nullable(); // Free text - what changed
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('audit_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000034_create_notification_preferences_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('notification_preferences', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id');
            $table->boolean('notify_quote_created')->default(true);
            $table->boolean('notify_invoice_sent')->default(true);
            $table->boolean('notify_payment_received')->default(true);
            $table->boolean('notify_followup_due')->default(true);
            $table->boolean('notify_customer_comment')->default(true);
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('notification_preferences');
    }
};

--- FILE: database\migrations\2025_01_01_000035_create_activity_reminders_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('activity_reminders', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Dealer / Sub-dealer / Admin
            $table->unsignedBigInteger('customer_id')->nullable(); // Optionally linked to customer
            $table->unsignedBigInteger('quote_id')->nullable(); // Optionally linked to quote
            $table->unsignedBigInteger('invoice_id')->nullable(); // Optionally linked to invoice
            $table->date('reminder_date'); // When to remind
            $table->string('title');
            $table->text('notes')->nullable();
            $table->boolean('completed')->default(false); // Mark done
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('set null');
            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('set null');
            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('activity_reminders');
    }
};

--- FILE: database\migrations\2025_01_01_000036_create_system_settings_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('system_settings', function (Blueprint $table) {
            $table->id();
            $table->string('key')->unique(); // Example: 'default_terms', 'default_quote_prefix', etc
            $table->text('value')->nullable(); // JSON / string / text
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('system_settings');
    }
};

--- FILE: database\migrations\2025_01_01_000037_create_user_settings_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('user_settings', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Dealer/Sub-dealer
            $table->string('quote_template')->nullable(); // Could store path to Blade template or JSON config
            $table->string('email_template')->nullable(); // Optional email template
            $table->string('logo_path')->nullable(); // Company logo
            $table->text('address')->nullable(); // Company address
            $table->text('banking_details')->nullable(); // Banking details (multi-line text)
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('user_settings');
    }
};

--- FILE: database\migrations\2025_01_01_000038_create_file_uploads_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('file_uploads', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable(); // who uploaded
            $table->unsignedBigInteger('dealer_id')->nullable(); // optional - dealer specific file
            $table->string('file_name');
            $table->string('file_path');
            $table->string('file_type')->nullable();
            $table->unsignedBigInteger('file_size')->nullable();
            $table->string('usage_type')->nullable(); // example: logo, stationery_logo, quote_pdf, invoice_pdf, attachment
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('file_uploads');
    }
};

--- FILE: database\migrations\2025_01_01_000039_create_failed_jobs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};

--- FILE: database\migrations\2025_01_01_000040_create_quote_number_sequences_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_number_sequences', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('dealer_id')->nullable(); // Dealer/Sub-dealer specific numbering
            $table->unsignedBigInteger('current_number')->default(0);
            $table->string('prefix')->nullable(); // Example: Q-
            $table->string('suffix')->nullable(); // Example: -2025
            $table->timestamps();

            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_number_sequences');
    }
};

--- FILE: database\migrations\2025_01_01_000041_create_invoice_number_sequences_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_number_sequences', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('dealer_id')->nullable(); // Dealer/Sub-dealer specific numbering
            $table->unsignedBigInteger('current_number')->default(0);
            $table->string('prefix')->nullable(); // Example: INV-
            $table->string('suffix')->nullable(); // Example: -2025
            $table->timestamps();

            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_number_sequences');
    }
};

--- FILE: database\migrations\2025_01_01_000042_create_settings_table.php ---
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void {
        Schema::create('settings', function (Blueprint $table) {
            $table->id();
            $table->string('key')->unique();
            $table->text('value')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void {
        Schema::dropIfExists('settings');
    }
};


--- FILE: database\migrations\2025_06_07_xxxxxx_add_conversion_fields_to_quotes_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('quotes', function (Blueprint $table) {
            $table->unsignedBigInteger('converted_to_invoice_id')->nullable()->after('status');
            $table->timestamp('converted_at')->nullable()->after('converted_to_invoice_id');

            $table->foreign('converted_to_invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::table('quotes', function (Blueprint $table) {
            $table->dropForeign(['converted_to_invoice_id']);
            $table->dropColumn(['converted_to_invoice_id', 'converted_at']);
        });
    }
};


--- FILE: database\seeders\CustomersSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Customer;

class CustomersSeeder extends Seeder
{
    public function run(): void
    {
        $customers = [
            [
                'company_name' => 'Acme Corporation',
                'contact_person' => 'John Doe',
                'email' => 'john.doe@acme.com',
                'phone' => '+1234567890',
                'vat_number' => 'VAT123456',
                'vendor_number' => 'VENDOR001',
                'catagory' => 'Retail', // Assuming typo should be "category" — but keeping as per your DB field
                'type' => 'Business',
                'language' => 'English',
                'currency' => 'USD',
                'address' => '123 Main Street, Springfield, USA',
            ],
            [
                'company_name' => 'Globex Ltd',
                'contact_person' => 'Jane Smith',
                'email' => 'jane.smith@globex.com',
                'phone' => '+9876543210',
                'vat_number' => 'VAT654321',
                'vendor_number' => 'VENDOR002',
                'catagory' => 'Wholesale',
                'type' => 'Business',
                'language' => 'English',
                'currency' => 'EUR',
                'address' => '456 Market Road, Berlin, Germany',
            ],
            // Add more customers as needed
        ];

        foreach ($customers as $data) {
            Customer::create($data);
        }
    }
}


--- FILE: database\seeders\DatabaseSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    public function run(): void
    {
        // Run seeders in correct order:

        $this->call([
            RolesSeeder::class,
            UsersSeeder::class,
            //PermissionsSeeder::class,
            PaymentMethodsSeeder::class,
            CustomersSeeder::class,
            ProductsSeeder::class,
            KitSeeder::class,
            TermsSeeder::class,
            QuoteNumberSeeder::class,
            InvoiceNumberSeeder::class,
            SettingsSeeder::class,
            SystemSettingsSeeder::class,
            SubDealersSeeder::class,
        ]);
    }
}


--- FILE: database\seeders\InvoiceItemsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\InvoiceItem;
use Carbon\Carbon;

class InvoiceItemsSeeder extends Seeder
{
    public function run(): void
    {
        $invoiceItems = [
            [
                'invoice_id' => 1,
                'item_type' => 'Kit',
                'item_id' => 1, // Kit ID
                'description' => 'Surveyor Starter Kit',
                'quantity' => 1,
                'unit_price' => 50000,
                'vat_amount' => 7500,
                'discount_amount' => 0,
                'line_total' => 57500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'invoice_id' => 2,
                'item_type' => 'Product',
                'item_id' => 1, // Product ID
                'description' => 'NX510 SE GNSS Receiver',
                'quantity' => 1,
                'unit_price' => 30000,
                'vat_amount' => 4500,
                'discount_amount' => 0,
                'line_total' => 34500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($invoiceItems as $item) {
            InvoiceItem::updateOrInsert(
                [
                    'invoice_id' => $item['invoice_id'],
                    'item_type' => $item['item_type'],
                    'item_id' => $item['item_id'],
                ],
                $item
            );
        }
    }
}


--- FILE: database\seeders\InvoiceNumberSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class InvoiceNumberSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('settings')->insertOrIgnore([
            'key' => 'invoice_next_number',
            'value' => '5001', // Start at 5001 — you can adjust 🚀
            'created_at' => now(),
            'updated_at' => now(),
        ]);
    }
}

--- FILE: database\seeders\InvoicesSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Invoice;
use Carbon\Carbon;

class InvoicesSeeder extends Seeder
{
    public function run(): void
    {
        $invoices = [
            [
                'invoice_number' => 'INV-00001',
                'customer_id' => 2,
                'user_id' => 1,
                'invoice_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Pending',
                'terms' => json_encode(['Payment due in 30 days.']),
                'subtotal' => 50000,
                'vat_amount' => 7500,
                'total_amount' => 57500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 0,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'invoice_number' => 'INV-00002',
                'customer_id' => 1,
                'user_id' => 1,
                'invoice_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Paid',
                'terms' => json_encode(['Full prepayment.']),
                'subtotal' => 30000,
                'vat_amount' => 4500,
                'total_amount' => 34500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 1,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($invoices as $invoice) {
            Invoice::updateOrInsert(
                ['invoice_number' => $invoice['invoice_number']],
                $invoice
            );
        }
    }
}


--- FILE: database\seeders\KitItemsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\KitItem;
use Carbon\Carbon;

class KitItemsSeeder extends Seeder
{
    public function run(): void
    {
        $kitItems = [
            // Surveyor Starter Kit (kit_id = 1), example products
            [
                'kit_id' => 1,
                'product_id' => 1, // Example → GNSS Receiver
                'quantity' => 1,
                'unit_price' => 20000,
                'line_total' => 20000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'kit_id' => 1,
                'product_id' => 2, // Example → Tripod
                'quantity' => 1,
                'unit_price' => 5000,
                'line_total' => 5000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            // Advanced Surveyor Kit (kit_id = 2)
            [
                'kit_id' => 2,
                'product_id' => 1,
                'quantity' => 1,
                'unit_price' => 20000,
                'line_total' => 20000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'kit_id' => 2,
                'product_id' => 3, // Example → Software license
                'quantity' => 1,
                'unit_price' => 10000,
                'line_total' => 10000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($kitItems as $item) {
            KitItem::updateOrInsert(
                [
                    'kit_id' => $item['kit_id'],
                    'product_id' => $item['product_id'],
                ],
                $item
            );
        }
    }
}


--- FILE: database\seeders\KitSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Kit;
use Carbon\Carbon;

class KitSeeder extends Seeder
{
    public function run(): void
    {
        $kits = [
            [
                'name' => 'Surveyor Starter Kit',
                'description' => 'Includes receiver, tripod, software license.',
                'price' => 50000,
                'vat_applicable' => 1,
                'discount_allowed' => 1,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'name' => 'Advanced Surveyor Kit',
                'description' => 'Full kit with extra accessories.',
                'price' => 80000,
                'vat_applicable' => 1,
                'discount_allowed' => 1,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($kits as $kit) {
            Kit::updateOrInsert(
                ['name' => $kit['name']],
                $kit
            );
        }
    }
}


--- FILE: database\seeders\PaymentMethodsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class PaymentMethodsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('payment_methods')->insert([
            [
                'method_name' => 'Bank Transfer',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'method_name' => 'Cash',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'method_name' => 'Credit Card',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'method_name' => 'PayPal',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}


--- FILE: database\seeders\ProductsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Product;
use Carbon\Carbon;

class ProductsSeeder extends Seeder
{
    public function run(): void
    {
        $products = [
            [
                'name' => 'NX510 SE GNSS Receiver',
                'part_number' => '8 000 900 108',
                'description' => 'NX510 SE GNSS Receiver with UHF Radio (Rx / Tx)',
                'price' => 33200,
                'currency' => 'ZAR',
                'vat_applicable' => 1,
                'discount_applicable' => 1,
                'bulk_discount_applicable' => 1,
                'shipping_fee_applicable' => 1,
                'list_contents' => '<ul><li>PA-3UB-FAYWY GNSS Receiver</li><li>Mounting Kit</li><li>User Manual</li></ul>',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            // Add more products here
        ];

        foreach ($products as $product) {
            Product::updateOrInsert(
                ['part_number' => $product['part_number']],  // UNIQUE key
                $product
            );
        }
    }
}


--- FILE: database\seeders\QuoteItemsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\QuoteItem;
use Carbon\Carbon;

class QuoteItemsSeeder extends Seeder
{
    public function run(): void
    {
        $quoteItems = [
            [
                'quote_id' => 1,
                'item_type' => 'Product',
                'item_id' => 1, // Product ID
                'description' => 'NX510 SE GNSS Receiver',
                'quantity' => 1,
                'unit_price' => 30000,
                'vat_amount' => 4500,
                'discount_amount' => 0,
                'line_total' => 34500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'quote_id' => 2,
                'item_type' => 'Kit',
                'item_id' => 1, // Kit ID
                'description' => 'Surveyor Starter Kit',
                'quantity' => 1,
                'unit_price' => 50000,
                'vat_amount' => 7500,
                'discount_amount' => 0,
                'line_total' => 57500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($quoteItems as $item) {
            QuoteItem::updateOrInsert(
                [
                    'quote_id' => $item['quote_id'],
                    'item_type' => $item['item_type'],
                    'item_id' => $item['item_id'],
                ],
                $item
            );
        }
    }
}


--- FILE: database\seeders\QuoteNumberSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class QuoteNumberSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('settings')->insertOrIgnore([
            'key' => 'quote_next_number',
            'value' => '1001', // Start at 1001 — you can change this 🚀
            'created_at' => now(),
            'updated_at' => now(),
        ]);
    }
}

--- FILE: database\seeders\QuotesSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Quote;
use Carbon\Carbon;

class QuotesSeeder extends Seeder
{
    public function run(): void
    {
        $quotes = [
            [
                'quote_number' => 'Q-00001',
                'subdealer_id' => 1,
                'customer_id' => 1,
                'user_id' => 1,
                'quote_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Draft',
                'terms' => json_encode(['Standard terms apply.']),
                'subtotal' => 30000,
                'vat_amount' => 4500,
                'total_amount' => 34500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 0,
                'converted_to_invoice_id' => null,
                'converted_at' => null,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'quote_number' => 'Q-00002',
                'subdealer_id' => 1,
                'customer_id' => 2,
                'user_id' => 1,
                'quote_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Invoiced',
                'terms' => json_encode(['Payment within 30 days.']),
                'subtotal' => 50000,
                'vat_amount' => 7500,
                'total_amount' => 57500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 1,
                'converted_to_invoice_id' => 1, // invoice_id=1 → will link to InvoicesSeeder
                'converted_at' => Carbon::now()->subDays(2),
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($quotes as $quote) {
            Quote::updateOrInsert(
                ['quote_number' => $quote['quote_number']],
                $quote
            );
        }
    }
}


--- FILE: database\seeders\RolesSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class RolesSeeder extends Seeder
{
    public function run(): void
    {
        // Master Admin
        DB::table('user_roles')->updateOrInsert(
            ['role_name' => 'Master Admin'],
            [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ]
        );

        // Key Dealer
        DB::table('user_roles')->updateOrInsert(
            ['role_name' => 'Key Dealer'],
            [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ]
        );

        // Sub-Dealer
        DB::table('user_roles')->updateOrInsert(
            ['role_name' => 'Sub-Dealer'],
            [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ]
        );
    }
}


--- FILE: database\seeders\SettingsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class SettingsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('settings')->insert([
            [
                'key' => 'site_name',
                'value' => 'MMS Design CRM',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_currency',
                'value' => 'ZAR',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_vat_percentage',
                'value' => '15',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'quote_prefix',
                'value' => 'Q-',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'invoice_prefix',
                'value' => 'INV-',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_terms_id',
                'value' => '1', // will match TermsSeeder 🚀
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_email_from',
                'value' => 'crm@mmsdesign.co.za',
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}

--- FILE: database\seeders\SubDealersSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\SubDealerRegion; // this is your sub_dealer_regions model

class SubDealersSeeder extends Seeder
{
    public function run(): void
    {
        $subDealers = [
            [
                'name' => 'SubDealer 1',
                'email' => 'subdealer1@example.com',
                'password' => bcrypt('password'), // add password!
                'phone' => '1234567890',
                'address' => '123 Main St, City, Country',
                'banking_details' => 'Bank XYZ, Account 123456789',
                'vat_number' => 'VAT123456',
                'logo_path' => 'logos/subdealer1.png',
                'region_name' => 'Region A',
            ],
            [
                'name' => 'SubDealer 2',
                'email' => 'subdealer2@example.com',
                'password' => bcrypt('password'), // add password!
                'phone' => '9876543210',
                'address' => '456 Another St, City, Country',
                'banking_details' => 'Bank ABC, Account 654321987',
                'vat_number' => 'VAT654321',
                'logo_path' => 'logos/subdealer2.png',
                'region_name' => 'Region B',
            ],
        ];

        foreach ($subDealers as $dealer) {
            $region = SubDealerRegion::where('name', $dealer['region_name'])->first();

            User::create([
                'name' => $dealer['name'],
                'email' => $dealer['email'],
                'password' => $dealer['password'],
                'phone' => $dealer['phone'],
                'address' => $dealer['address'],
                'banking_details' => $dealer['banking_details'],
                'vat_number' => $dealer['vat_number'],
                'logo_path' => $dealer['logo_path'],
                'role' => 'sub_dealer',
                'region_id' => $region ? $region->id : null, // safe fallback
            ]);
        }
    }
}


--- FILE: database\seeders\SystemSettingsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class SystemSettingsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('system_settings')->insert([
            [
                'key'   => 'site_name',
                'value' => 'MMS Design CRM',
            ],
            [
                'key'   => 'default_currency',
                'value' => 'ZAR',
            ],
            [
                'key'   => 'default_vat_percentage',
                'value' => '15',
            ],
            [
                'key'   => 'quote_prefix',
                'value' => 'Q-',
            ],
            [
                'key'   => 'invoice_prefix',
                'value' => 'INV-',
            ],
            [
                'key'   => 'default_terms_id',
                'value' => '1',
            ],
            [
                'key'   => 'default_email_from',
                'value' => 'crm@mmsdesign.co.za',
            ],
        ]);
    }
}


--- FILE: database\seeders\TermsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class TermsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('terms_conditions')->insert([
            'title' => 'Standard MMS Quote Terms',
            'content' => '
                1. All prices exclude VAT unless otherwise stated.<br>
                2. Validity of this quotation is 14 days from issue date.<br>
                3. Goods remain the property of MMS Design until full payment is received.<br>
                4. Delivery subject to stock availability.<br>
                5. Warranty as per manufacturer terms.<br>
                6. Payment terms: 50% deposit on order, balance on delivery.<br>
                7. Bank Details:<br>
                Bank: XYZ Bank<br>
                Account No: 123456789<br>
                Branch Code: 12345<br>
                Swift Code: XYZABC<br>
                8. Contact us for any clarifications.<br>
            ',
            'is_default' => true,
            'created_at' => now(),
            'updated_at' => now(),
        ]);
    }
}

--- FILE: database\seeders\UsersSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Carbon\Carbon;

class UsersSeeder extends Seeder
{
    public function run(): void
    {
        // Admin user
        DB::table('users')->updateOrInsert(
            ['email' => 'admin@example.com'],
            [
                'name' => 'Admin User',
                'password' => Hash::make('password'),
                'role_id' => 1, // Master Admin
                'updated_at' => Carbon::now(),
                'created_at' => Carbon::now(),
            ]
        );

        // Key Dealer user
        DB::table('users')->updateOrInsert(
            ['email' => 'keydealer@example.com'],
            [
                'name' => 'Key Dealer User',
                'password' => Hash::make('password'),
                'role_id' => 2, // Key Dealer
                'updated_at' => Carbon::now(),
                'created_at' => Carbon::now(),
            ]
        );

        // Sub Dealer user
        DB::table('users')->updateOrInsert(
            ['email' => 'subdealer@example.com'],
            [
                'name' => 'Sub Dealer User',
                'password' => Hash::make('password'),
                'role_id' => 3, // Sub Dealer
                'updated_at' => Carbon::now(),
                'created_at' => Carbon::now(),
            ]
        );
    }
}


===== FOLDER: database/factories =====

--- FILE: database\factories\UserFactory.php ---
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}


===== FOLDER: database/migrations =====

--- FILE: database\migrations\2025_01_01_000001_create_sub_dealer_regions_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('sub_dealer_regions', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('description')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        // First drop the foreign key from users table
        Schema::table('users', function (Blueprint $table) {
            $table->dropForeign(['region_id']);
            $table->dropColumn('region_id');
        });

        Schema::dropIfExists('sub_dealer_regions');
    }
};

--- FILE: database\migrations\2025_01_01_000002_create_user_roles_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('user_roles', function (Blueprint $table) {
            $table->id();
            $table->string('role_name')->unique(); // Example: admin, dealer, sub-dealer, viewer, accountant, etc.
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('user_roles');
    }
};


--- FILE: database\migrations\2025_01_01_000003_create_users_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
			$table->id();
			$table->string('name');
			$table->string('email')->unique();
			$table->timestamp('email_verified_at')->nullable();
			$table->string('password');
			$table->string('phone')->nullable();
			$table->string('address')->nullable();
			$table->text('banking_details')->nullable();
			$table->string('vat_number')->nullable();
			$table->string('logo_path')->nullable();
			$table->string('role')->default('user');
			$table->foreignId('region_id')->nullable()->constrained('sub_dealer_regions')->onDelete('set null');
			$table->foreignId('role_id')->nullable()->constrained('user_roles')->onDelete('set null');
			$table->rememberToken();
			$table->timestamps();

        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};


--- FILE: database\migrations\2025_01_01_000004_create_customers_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('customers', function (Blueprint $table) {
			$table->id();
			$table->string('company_name');
			$table->string('contact_person')->nullable();  // <-- ADD THIS LINE
			$table->string('email')->nullable();
			$table->string('phone')->nullable();
			$table->string('vat_number')->nullable();
			$table->string('vendor_number')->nullable();
			$table->string('catagory')->nullable();
			$table->string('type')->nullable();
			$table->string('language')->nullable();
			$table->string('currency')->nullable();
			$table->text('address')->nullable();
			$table->unsignedBigInteger('created_by')->nullable();
			$table->timestamps();

        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customers');
    }
};

--- FILE: database\migrations\2025_01_01_000005_create_customer_contacts_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('customer_contacts', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('customer_id');
            $table->string('name');
            $table->string('email')->nullable();
            $table->string('phone')->nullable();
            $table->string('position')->nullable(); // e.g. Owner, Manager, Buyer
            $table->boolean('is_primary')->default(false); // Main contact?
            $table->timestamps();

            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customer_contacts');
    }
};

--- FILE: database\migrations\2025_01_01_000006_create_customer_notes_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('customer_notes', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('customer_id');
            $table->unsignedBigInteger('user_id'); // Who added the note (Dealer, Sub-dealer, Admin)
            $table->text('note');
            $table->timestamps();

            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customer_notes');
    }
};

--- FILE: database\migrations\2025_01_01_000007_create_customer_sub_dealer_links_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('customer_sub_dealer_links', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('customer_id');
            $table->unsignedBigInteger('sub_dealer_user_id'); // User.id of Sub-dealer
            $table->timestamps();

            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
            $table->foreign('sub_dealer_user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('customer_sub_dealer_links');
    }
};

--- FILE: database\migrations\2025_01_01_000008_create_products_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->string('part_number')->unique();
            $table->string('name');
            $table->text('description')->nullable();
            $table->decimal('price', 10, 2);
            $table->string('currency')->default('ZAR');
            $table->boolean('vat_applicable')->default(true);
            $table->boolean('discount_applicable')->default(false);
            $table->boolean('bulk_discount_applicable')->default(false);
            $table->boolean('shipping_fee_applicable')->default(false);
            $table->text('list_contents')->nullable();
            $table->string('image_path')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('products');
    }
};

--- FILE: database\migrations\2025_01_01_000009_create_product_categories_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('product_categories', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('description')->nullable();
            $table->timestamps();
        });

        // Add category_id to products table (link to categories)
        Schema::table('products', function (Blueprint $table) {
            $table->unsignedBigInteger('category_id')->nullable()->after('id');

            $table->foreign('category_id')->references('id')->on('product_categories')->onDelete('set null');
        });
    }

    public function down(): void
    {
        // First drop the foreign key from products table
        Schema::table('products', function (Blueprint $table) {
            $table->dropForeign(['category_id']);
            $table->dropColumn('category_id');
        });

        Schema::dropIfExists('product_categories');
    }
};

--- FILE: database\migrations\2025_01_01_000010_create_dealers_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('dealers', function (Blueprint $table) {
            $table->id();
            $table->string('dealer_name')->unique();
            $table->string('type')->default('dealer'); // dealer / sub-dealer
            $table->string('contact_person')->nullable();
            $table->string('email')->nullable();
            $table->string('phone')->nullable();
            $table->text('address')->nullable();
            $table->text('bank_details')->nullable();
            $table->string('logo_path')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('dealers');
    }
};


--- FILE: database\migrations\2025_01_01_000011_create_kits_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kits', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->text('description')->nullable();
            $table->decimal('price', 10, 2);
			$table->boolean('vat_applicable')->default(true);
			$table->boolean('discount_allowed')->default(true);
            $table->unsignedBigInteger('dealer_id')->nullable();
            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kits');
    }
};


--- FILE: database\migrations\2025_01_01_000012_create_kit_assemblies_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kit_assemblies', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('dealer_id')->nullable(); // optional — dealer-specific kits
            $table->string('kit_name');
            $table->text('kit_description')->nullable();
            $table->decimal('price', 10, 2)->default(0.00); // optional total price for kit
            $table->boolean('vat_applicable')->default(true);
            $table->boolean('discount_allowed')->default(false);
            $table->timestamps();

            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kit_assemblies');
    }
};

--- FILE: database\migrations\2025_01_01_000013_create_kit_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kit_items', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('kit_assembly_id');
            $table->unsignedBigInteger('product_id');
            $table->unsignedInteger('quantity')->default(1);
            $table->timestamps();

            $table->foreign('kit_assembly_id')->references('id')->on('kit_assemblies')->onDelete('cascade');
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kit_items');
    }
};

--- FILE: database\migrations\2025_01_01_000014_create_quotes_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quotes', function (Blueprint $table) {
            $table->id();
            $table->string('quote_number')->unique();
            $table->unsignedBigInteger('user_id'); // Dealer/Sub-dealer creating the quote
            $table->unsignedBigInteger('customer_id');
            $table->decimal('subtotal', 12, 2)->default(0);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('total', 12, 2)->default(0);
            $table->text('terms_and_conditions')->nullable();
            $table->enum('status', ['draft', 'sent', 'converted'])->default('draft');
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quotes');
    }
};

--- FILE: database\migrations\2025_01_01_000015_create_quote_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_items', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_id');
            $table->unsignedBigInteger('product_id');
            $table->integer('qty')->default(1);
            $table->decimal('unit_price', 10, 2);
            $table->decimal('line_discount', 10, 2)->default(0);

            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('cascade');
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');

            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_items');
    }
};


--- FILE: database\migrations\2025_01_01_000016_create_quote_kits_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_kits', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_id');
            $table->unsignedBigInteger('kit_assembly_id');
            $table->unsignedInteger('quantity')->default(1);
            $table->decimal('unit_price', 10, 2)->default(0.00); // price per kit (may be overridden)
            $table->decimal('total_price', 12, 2)->default(0.00); // total = unit_price * quantity
            $table->boolean('vat_applicable')->default(true);
            $table->boolean('discount_applied')->default(false);
            $table->timestamps();

            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('cascade');
            $table->foreign('kit_assembly_id')->references('id')->on('kit_assemblies')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_kits');
    }
};

--- FILE: database\migrations\2025_01_01_000017_create_quote_kit_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_kit_items', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_kit_id');
            $table->unsignedBigInteger('product_id');
            $table->unsignedInteger('quantity')->default(1);
            $table->decimal('unit_price', 10, 2)->default(0.00); // at quote time (can capture price used at time)
            $table->decimal('total_price', 12, 2)->default(0.00); // unit * qty
            $table->timestamps();

            $table->foreign('quote_kit_id')->references('id')->on('quote_kits')->onDelete('cascade');
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_kit_items');
    }
};

--- FILE: database\migrations\2025_01_01_000018_create_quote_statuses_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('status_name')->unique(); // Example: Draft, Sent, Accepted, Rejected, Lost, Expired
            $table->string('color')->nullable(); // Optional UI color
            $table->timestamps();
        });

        // Add status_id to quotes table
        Schema::table('quotes', function (Blueprint $table) {
            $table->unsignedBigInteger('status_id')->nullable()->after('quote_number');

            $table->foreign('status_id')->references('id')->on('quote_statuses')->onDelete('set null');
        });
    }

    public function down(): void
    {
        // First drop FK in quotes table
        Schema::table('quotes', function (Blueprint $table) {
            $table->dropForeign(['status_id']);
            $table->dropColumn('status_id');
        });

        Schema::dropIfExists('quote_statuses');
    }
};

--- FILE: database\migrations\2025_01_01_000019_create_terms_conditions_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('terms_conditions', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable(); // So each Dealer/Sub-dealer can have their own Terms!
            $table->string('title'); // Name of this Terms version
            $table->text('content'); // Full rich text Terms
            $table->boolean('is_default')->default(false); // If this is default for new Quotes
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('terms_conditions');
    }
};

--- FILE: database\migrations\2025_01_01_000020_create_quote_terms_link_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_terms_link', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('quote_id');
            $table->unsignedBigInteger('terms_id');
            $table->timestamps();

            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('cascade');
            $table->foreign('terms_id')->references('id')->on('terms_conditions')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_terms_link');
    }
};

--- FILE: database\migrations\2025_01_01_000021_create_invoices_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoices', function (Blueprint $table) {
            $table->id();
            $table->string('invoice_number')->unique();
            $table->foreignId('quote_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('customer_id')->constrained()->onDelete('cascade');
            $table->date('invoice_date');
            $table->string('status')->default('Draft'); // Draft, Sent, Paid
            $table->json('terms')->nullable();
            $table->decimal('subtotal', 12, 2)->default(0);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('total_amount', 12, 2)->default(0);
            $table->string('currency', 10)->default('ZAR');
            $table->boolean('is_pdf_generated')->default(false);
            $table->string('invoice_type')->default('TAX INVOICE'); // Or COMMERCIAL INVOICE
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoices');
    }
};


--- FILE: database\migrations\2025_01_01_000022_create_invoice_items_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('invoice_id')->constrained()->onDelete('cascade');
            $table->string('item_type'); // 'Product' or 'Kit'
            $table->unsignedBigInteger('item_id'); // product_id or kit_id
            $table->string('description'); // frozen for PDF
            $table->integer('quantity')->default(1);
            $table->decimal('unit_price', 12, 2)->default(0);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('discount_amount', 12, 2)->default(0);
            $table->decimal('line_total', 12, 2)->default(0);
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_items');
    }
};


--- FILE: database\migrations\2025_01_01_000023_create_invoice_statuses_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('status_name')->unique(); // Example: Draft, Sent, Paid, Overdue, Cancelled
            $table->string('color')->nullable(); // Optional UI color
            $table->timestamps();
        });

        // Add status_id to invoices table
        Schema::table('invoices', function (Blueprint $table) {
            $table->unsignedBigInteger('status_id')->nullable()->after('invoice_number');

            $table->foreign('status_id')->references('id')->on('invoice_statuses')->onDelete('set null');
        });
    }

    public function down(): void
    {
        // First drop FK in invoices table
        Schema::table('invoices', function (Blueprint $table) {
            $table->dropForeign(['status_id']);
            $table->dropColumn('status_id');
        });

        Schema::dropIfExists('invoice_statuses');
    }
};

--- FILE: database\migrations\2025_01_01_000024_create_invoice_terms_link_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_terms_link', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('invoice_id');
            $table->unsignedBigInteger('terms_id');
            $table->timestamps();

            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('cascade');
            $table->foreign('terms_id')->references('id')->on('terms_conditions')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_terms_link');
    }
};

--- FILE: database\migrations\2025_01_01_000024_create_payment_methods_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('payment_methods', function (Blueprint $table) {
            $table->id();
            $table->string('method_name')->unique(); // Example: Bank Transfer, Cash, Credit Card, PayPal
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });

        // 🚩 Do NOT alter 'payments' table here — payments table does not exist
        // Instead, add payment_method_id in 'invoice_payments' migration (correct)
    }

    public function down(): void
    {
        Schema::dropIfExists('payment_methods');
    }
};


--- FILE: database\migrations\2025_01_01_000025_create_invoice_payments_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_payments', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('invoice_id');
            $table->date('payment_date');
            $table->decimal('amount', 12, 2);

            // ✅ NEW — FK to payment_methods
            $table->unsignedBigInteger('payment_method_id')->nullable();
            $table->foreign('payment_method_id')->references('id')->on('payment_methods')->onDelete('set null');

            // (Optional) legacy text field for backup / notes
            $table->string('payment_method')->nullable(); // e.g. EFT, Credit Card, Cash, Other

            $table->string('reference')->nullable(); // Bank ref, internal ref
            $table->text('notes')->nullable();
            $table->timestamps();

            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_payments');
    }
};


--- FILE: database\migrations\2025_01_01_000027_create_email_templates_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('email_templates', function (Blueprint $table) {
            $table->id();
            $table->string('template_name')->unique(); // Example: "Quote Email", "Invoice Email", "Follow-up Reminder"
            $table->string('subject');
            $table->text('body'); // Rich text (HTML allowed)
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('email_templates');
    }
};

--- FILE: database\migrations\2025_01_01_000028_create_email_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('email_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Who triggered the email (Dealer / Sub-dealer / Admin)
            $table->unsignedBigInteger('customer_id')->nullable();
            $table->unsignedBigInteger('quote_id')->nullable();
            $table->unsignedBigInteger('invoice_id')->nullable();
            $table->string('recipient_email');
            $table->string('subject');
            $table->text('body')->nullable(); // Optionally store sent content
            $table->timestamp('sent_at')->nullable(); // Mark when sent
            $table->boolean('success')->default(false); // Sent ok?
            $table->string('error_message')->nullable(); // If failed
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('set null');
            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('set null');
            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('email_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000029_create_communication_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('communication_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Who logged the communication (Dealer / Sub-dealer / Admin)
            $table->unsignedBigInteger('customer_id');
            $table->unsignedBigInteger('quote_id')->nullable();
            $table->unsignedBigInteger('invoice_id')->nullable();
            $table->date('communication_date')->nullable();
            $table->string('type')->nullable(); // Example: Email, Phone, WhatsApp, Meeting
            $table->text('summary')->nullable();
            $table->boolean('requires_followup')->default(false);
            $table->date('followup_date')->nullable();
            $table->string('followup_status')->nullable(); // Example: Pending, Done, Cancelled
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('set null');
            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('communication_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000030_create_activity_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('activity_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable(); // Who performed the action
            $table->string('action_type'); // e.g. 'Created Quote', 'Updated Invoice', 'Deleted Customer'
            $table->string('entity_type')->nullable(); // e.g. 'Quote', 'Invoice', 'Customer'
            $table->unsignedBigInteger('entity_id')->nullable(); // ID of entity affected
            $table->text('description')->nullable(); // Free text description of what happened
            $table->string('ip_address')->nullable(); // IP of user
            $table->string('user_agent')->nullable(); // Browser/device
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('activity_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000031_create_login_audit_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('login_audit_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable();
            $table->timestamp('login_at');
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->boolean('success')->default(true); // Login successful or failed attempt
            $table->string('failure_reason')->nullable(); // If failed
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('login_audit_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000032_create_login_attempts_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('login_attempts', function (Blueprint $table) {
            $table->id();
            $table->string('email')->nullable(); // email attempted
            $table->unsignedBigInteger('user_id')->nullable(); // if matched to user
            $table->boolean('success')->default(false);
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('login_attempts');
    }
};

--- FILE: database\migrations\2025_01_01_000033_create_audit_logs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('audit_logs', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Who did the action
            $table->string('action_type'); // e.g. "created quote", "updated invoice", "deleted product"
            $table->string('related_table')->nullable(); // e.g. "quotes", "customers"
            $table->unsignedBigInteger('related_id')->nullable(); // ID of the affected record
            $table->text('details')->nullable(); // Free text - what changed
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('audit_logs');
    }
};

--- FILE: database\migrations\2025_01_01_000034_create_notification_preferences_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('notification_preferences', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id');
            $table->boolean('notify_quote_created')->default(true);
            $table->boolean('notify_invoice_sent')->default(true);
            $table->boolean('notify_payment_received')->default(true);
            $table->boolean('notify_followup_due')->default(true);
            $table->boolean('notify_customer_comment')->default(true);
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('notification_preferences');
    }
};

--- FILE: database\migrations\2025_01_01_000035_create_activity_reminders_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('activity_reminders', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Dealer / Sub-dealer / Admin
            $table->unsignedBigInteger('customer_id')->nullable(); // Optionally linked to customer
            $table->unsignedBigInteger('quote_id')->nullable(); // Optionally linked to quote
            $table->unsignedBigInteger('invoice_id')->nullable(); // Optionally linked to invoice
            $table->date('reminder_date'); // When to remind
            $table->string('title');
            $table->text('notes')->nullable();
            $table->boolean('completed')->default(false); // Mark done
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('customer_id')->references('id')->on('customers')->onDelete('set null');
            $table->foreign('quote_id')->references('id')->on('quotes')->onDelete('set null');
            $table->foreign('invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('activity_reminders');
    }
};

--- FILE: database\migrations\2025_01_01_000036_create_system_settings_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('system_settings', function (Blueprint $table) {
            $table->id();
            $table->string('key')->unique(); // Example: 'default_terms', 'default_quote_prefix', etc
            $table->text('value')->nullable(); // JSON / string / text
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('system_settings');
    }
};

--- FILE: database\migrations\2025_01_01_000037_create_user_settings_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('user_settings', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id'); // Dealer/Sub-dealer
            $table->string('quote_template')->nullable(); // Could store path to Blade template or JSON config
            $table->string('email_template')->nullable(); // Optional email template
            $table->string('logo_path')->nullable(); // Company logo
            $table->text('address')->nullable(); // Company address
            $table->text('banking_details')->nullable(); // Banking details (multi-line text)
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('user_settings');
    }
};

--- FILE: database\migrations\2025_01_01_000038_create_file_uploads_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('file_uploads', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id')->nullable(); // who uploaded
            $table->unsignedBigInteger('dealer_id')->nullable(); // optional - dealer specific file
            $table->string('file_name');
            $table->string('file_path');
            $table->string('file_type')->nullable();
            $table->unsignedBigInteger('file_size')->nullable();
            $table->string('usage_type')->nullable(); // example: logo, stationery_logo, quote_pdf, invoice_pdf, attachment
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('file_uploads');
    }
};

--- FILE: database\migrations\2025_01_01_000039_create_failed_jobs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};

--- FILE: database\migrations\2025_01_01_000040_create_quote_number_sequences_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('quote_number_sequences', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('dealer_id')->nullable(); // Dealer/Sub-dealer specific numbering
            $table->unsignedBigInteger('current_number')->default(0);
            $table->string('prefix')->nullable(); // Example: Q-
            $table->string('suffix')->nullable(); // Example: -2025
            $table->timestamps();

            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('quote_number_sequences');
    }
};

--- FILE: database\migrations\2025_01_01_000041_create_invoice_number_sequences_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('invoice_number_sequences', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('dealer_id')->nullable(); // Dealer/Sub-dealer specific numbering
            $table->unsignedBigInteger('current_number')->default(0);
            $table->string('prefix')->nullable(); // Example: INV-
            $table->string('suffix')->nullable(); // Example: -2025
            $table->timestamps();

            $table->foreign('dealer_id')->references('id')->on('dealers')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('invoice_number_sequences');
    }
};

--- FILE: database\migrations\2025_01_01_000042_create_settings_table.php ---
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void {
        Schema::create('settings', function (Blueprint $table) {
            $table->id();
            $table->string('key')->unique();
            $table->text('value')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void {
        Schema::dropIfExists('settings');
    }
};


--- FILE: database\migrations\2025_06_07_xxxxxx_add_conversion_fields_to_quotes_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('quotes', function (Blueprint $table) {
            $table->unsignedBigInteger('converted_to_invoice_id')->nullable()->after('status');
            $table->timestamp('converted_at')->nullable()->after('converted_to_invoice_id');

            $table->foreign('converted_to_invoice_id')->references('id')->on('invoices')->onDelete('set null');
        });
    }

    public function down(): void
    {
        Schema::table('quotes', function (Blueprint $table) {
            $table->dropForeign(['converted_to_invoice_id']);
            $table->dropColumn(['converted_to_invoice_id', 'converted_at']);
        });
    }
};


===== FOLDER: database/schema =====

===== FOLDER: database/seeders =====

--- FILE: database\seeders\CustomersSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Customer;

class CustomersSeeder extends Seeder
{
    public function run(): void
    {
        $customers = [
            [
                'company_name' => 'Acme Corporation',
                'contact_person' => 'John Doe',
                'email' => 'john.doe@acme.com',
                'phone' => '+1234567890',
                'vat_number' => 'VAT123456',
                'vendor_number' => 'VENDOR001',
                'catagory' => 'Retail', // Assuming typo should be "category" — but keeping as per your DB field
                'type' => 'Business',
                'language' => 'English',
                'currency' => 'USD',
                'address' => '123 Main Street, Springfield, USA',
            ],
            [
                'company_name' => 'Globex Ltd',
                'contact_person' => 'Jane Smith',
                'email' => 'jane.smith@globex.com',
                'phone' => '+9876543210',
                'vat_number' => 'VAT654321',
                'vendor_number' => 'VENDOR002',
                'catagory' => 'Wholesale',
                'type' => 'Business',
                'language' => 'English',
                'currency' => 'EUR',
                'address' => '456 Market Road, Berlin, Germany',
            ],
            // Add more customers as needed
        ];

        foreach ($customers as $data) {
            Customer::create($data);
        }
    }
}


--- FILE: database\seeders\DatabaseSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    public function run(): void
    {
        // Run seeders in correct order:

        $this->call([
            RolesSeeder::class,
            UsersSeeder::class,
            //PermissionsSeeder::class,
            PaymentMethodsSeeder::class,
            CustomersSeeder::class,
            ProductsSeeder::class,
            KitSeeder::class,
            TermsSeeder::class,
            QuoteNumberSeeder::class,
            InvoiceNumberSeeder::class,
            SettingsSeeder::class,
            SystemSettingsSeeder::class,
            SubDealersSeeder::class,
        ]);
    }
}


--- FILE: database\seeders\InvoiceItemsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\InvoiceItem;
use Carbon\Carbon;

class InvoiceItemsSeeder extends Seeder
{
    public function run(): void
    {
        $invoiceItems = [
            [
                'invoice_id' => 1,
                'item_type' => 'Kit',
                'item_id' => 1, // Kit ID
                'description' => 'Surveyor Starter Kit',
                'quantity' => 1,
                'unit_price' => 50000,
                'vat_amount' => 7500,
                'discount_amount' => 0,
                'line_total' => 57500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'invoice_id' => 2,
                'item_type' => 'Product',
                'item_id' => 1, // Product ID
                'description' => 'NX510 SE GNSS Receiver',
                'quantity' => 1,
                'unit_price' => 30000,
                'vat_amount' => 4500,
                'discount_amount' => 0,
                'line_total' => 34500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($invoiceItems as $item) {
            InvoiceItem::updateOrInsert(
                [
                    'invoice_id' => $item['invoice_id'],
                    'item_type' => $item['item_type'],
                    'item_id' => $item['item_id'],
                ],
                $item
            );
        }
    }
}


--- FILE: database\seeders\InvoiceNumberSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class InvoiceNumberSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('settings')->insertOrIgnore([
            'key' => 'invoice_next_number',
            'value' => '5001', // Start at 5001 — you can adjust 🚀
            'created_at' => now(),
            'updated_at' => now(),
        ]);
    }
}

--- FILE: database\seeders\InvoicesSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Invoice;
use Carbon\Carbon;

class InvoicesSeeder extends Seeder
{
    public function run(): void
    {
        $invoices = [
            [
                'invoice_number' => 'INV-00001',
                'customer_id' => 2,
                'user_id' => 1,
                'invoice_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Pending',
                'terms' => json_encode(['Payment due in 30 days.']),
                'subtotal' => 50000,
                'vat_amount' => 7500,
                'total_amount' => 57500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 0,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'invoice_number' => 'INV-00002',
                'customer_id' => 1,
                'user_id' => 1,
                'invoice_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Paid',
                'terms' => json_encode(['Full prepayment.']),
                'subtotal' => 30000,
                'vat_amount' => 4500,
                'total_amount' => 34500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 1,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($invoices as $invoice) {
            Invoice::updateOrInsert(
                ['invoice_number' => $invoice['invoice_number']],
                $invoice
            );
        }
    }
}


--- FILE: database\seeders\KitItemsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\KitItem;
use Carbon\Carbon;

class KitItemsSeeder extends Seeder
{
    public function run(): void
    {
        $kitItems = [
            // Surveyor Starter Kit (kit_id = 1), example products
            [
                'kit_id' => 1,
                'product_id' => 1, // Example → GNSS Receiver
                'quantity' => 1,
                'unit_price' => 20000,
                'line_total' => 20000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'kit_id' => 1,
                'product_id' => 2, // Example → Tripod
                'quantity' => 1,
                'unit_price' => 5000,
                'line_total' => 5000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            // Advanced Surveyor Kit (kit_id = 2)
            [
                'kit_id' => 2,
                'product_id' => 1,
                'quantity' => 1,
                'unit_price' => 20000,
                'line_total' => 20000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'kit_id' => 2,
                'product_id' => 3, // Example → Software license
                'quantity' => 1,
                'unit_price' => 10000,
                'line_total' => 10000,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($kitItems as $item) {
            KitItem::updateOrInsert(
                [
                    'kit_id' => $item['kit_id'],
                    'product_id' => $item['product_id'],
                ],
                $item
            );
        }
    }
}


--- FILE: database\seeders\KitSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Kit;
use Carbon\Carbon;

class KitSeeder extends Seeder
{
    public function run(): void
    {
        $kits = [
            [
                'name' => 'Surveyor Starter Kit',
                'description' => 'Includes receiver, tripod, software license.',
                'price' => 50000,
                'vat_applicable' => 1,
                'discount_allowed' => 1,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'name' => 'Advanced Surveyor Kit',
                'description' => 'Full kit with extra accessories.',
                'price' => 80000,
                'vat_applicable' => 1,
                'discount_allowed' => 1,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($kits as $kit) {
            Kit::updateOrInsert(
                ['name' => $kit['name']],
                $kit
            );
        }
    }
}


--- FILE: database\seeders\PaymentMethodsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class PaymentMethodsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('payment_methods')->insert([
            [
                'method_name' => 'Bank Transfer',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'method_name' => 'Cash',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'method_name' => 'Credit Card',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'method_name' => 'PayPal',
                'is_active' => true,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}


--- FILE: database\seeders\ProductsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Product;
use Carbon\Carbon;

class ProductsSeeder extends Seeder
{
    public function run(): void
    {
        $products = [
            [
                'name' => 'NX510 SE GNSS Receiver',
                'part_number' => '8 000 900 108',
                'description' => 'NX510 SE GNSS Receiver with UHF Radio (Rx / Tx)',
                'price' => 33200,
                'currency' => 'ZAR',
                'vat_applicable' => 1,
                'discount_applicable' => 1,
                'bulk_discount_applicable' => 1,
                'shipping_fee_applicable' => 1,
                'list_contents' => '<ul><li>PA-3UB-FAYWY GNSS Receiver</li><li>Mounting Kit</li><li>User Manual</li></ul>',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            // Add more products here
        ];

        foreach ($products as $product) {
            Product::updateOrInsert(
                ['part_number' => $product['part_number']],  // UNIQUE key
                $product
            );
        }
    }
}


--- FILE: database\seeders\QuoteItemsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\QuoteItem;
use Carbon\Carbon;

class QuoteItemsSeeder extends Seeder
{
    public function run(): void
    {
        $quoteItems = [
            [
                'quote_id' => 1,
                'item_type' => 'Product',
                'item_id' => 1, // Product ID
                'description' => 'NX510 SE GNSS Receiver',
                'quantity' => 1,
                'unit_price' => 30000,
                'vat_amount' => 4500,
                'discount_amount' => 0,
                'line_total' => 34500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'quote_id' => 2,
                'item_type' => 'Kit',
                'item_id' => 1, // Kit ID
                'description' => 'Surveyor Starter Kit',
                'quantity' => 1,
                'unit_price' => 50000,
                'vat_amount' => 7500,
                'discount_amount' => 0,
                'line_total' => 57500,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($quoteItems as $item) {
            QuoteItem::updateOrInsert(
                [
                    'quote_id' => $item['quote_id'],
                    'item_type' => $item['item_type'],
                    'item_id' => $item['item_id'],
                ],
                $item
            );
        }
    }
}


--- FILE: database\seeders\QuoteNumberSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class QuoteNumberSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('settings')->insertOrIgnore([
            'key' => 'quote_next_number',
            'value' => '1001', // Start at 1001 — you can change this 🚀
            'created_at' => now(),
            'updated_at' => now(),
        ]);
    }
}

--- FILE: database\seeders\QuotesSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Quote;
use Carbon\Carbon;

class QuotesSeeder extends Seeder
{
    public function run(): void
    {
        $quotes = [
            [
                'quote_number' => 'Q-00001',
                'subdealer_id' => 1,
                'customer_id' => 1,
                'user_id' => 1,
                'quote_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Draft',
                'terms' => json_encode(['Standard terms apply.']),
                'subtotal' => 30000,
                'vat_amount' => 4500,
                'total_amount' => 34500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 0,
                'converted_to_invoice_id' => null,
                'converted_at' => null,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
            [
                'quote_number' => 'Q-00002',
                'subdealer_id' => 1,
                'customer_id' => 2,
                'user_id' => 1,
                'quote_date' => Carbon::now()->format('Y-m-d'),
                'status' => 'Invoiced',
                'terms' => json_encode(['Payment within 30 days.']),
                'subtotal' => 50000,
                'vat_amount' => 7500,
                'total_amount' => 57500,
                'currency' => 'ZAR',
                'is_pdf_generated' => 1,
                'converted_to_invoice_id' => 1, // invoice_id=1 → will link to InvoicesSeeder
                'converted_at' => Carbon::now()->subDays(2),
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ],
        ];

        foreach ($quotes as $quote) {
            Quote::updateOrInsert(
                ['quote_number' => $quote['quote_number']],
                $quote
            );
        }
    }
}


--- FILE: database\seeders\RolesSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class RolesSeeder extends Seeder
{
    public function run(): void
    {
        // Master Admin
        DB::table('user_roles')->updateOrInsert(
            ['role_name' => 'Master Admin'],
            [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ]
        );

        // Key Dealer
        DB::table('user_roles')->updateOrInsert(
            ['role_name' => 'Key Dealer'],
            [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ]
        );

        // Sub-Dealer
        DB::table('user_roles')->updateOrInsert(
            ['role_name' => 'Sub-Dealer'],
            [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now(),
            ]
        );
    }
}


--- FILE: database\seeders\SettingsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class SettingsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('settings')->insert([
            [
                'key' => 'site_name',
                'value' => 'MMS Design CRM',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_currency',
                'value' => 'ZAR',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_vat_percentage',
                'value' => '15',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'quote_prefix',
                'value' => 'Q-',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'invoice_prefix',
                'value' => 'INV-',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_terms_id',
                'value' => '1', // will match TermsSeeder 🚀
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'key' => 'default_email_from',
                'value' => 'crm@mmsdesign.co.za',
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}

--- FILE: database\seeders\SubDealersSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\SubDealerRegion; // this is your sub_dealer_regions model

class SubDealersSeeder extends Seeder
{
    public function run(): void
    {
        $subDealers = [
            [
                'name' => 'SubDealer 1',
                'email' => 'subdealer1@example.com',
                'password' => bcrypt('password'), // add password!
                'phone' => '1234567890',
                'address' => '123 Main St, City, Country',
                'banking_details' => 'Bank XYZ, Account 123456789',
                'vat_number' => 'VAT123456',
                'logo_path' => 'logos/subdealer1.png',
                'region_name' => 'Region A',
            ],
            [
                'name' => 'SubDealer 2',
                'email' => 'subdealer2@example.com',
                'password' => bcrypt('password'), // add password!
                'phone' => '9876543210',
                'address' => '456 Another St, City, Country',
                'banking_details' => 'Bank ABC, Account 654321987',
                'vat_number' => 'VAT654321',
                'logo_path' => 'logos/subdealer2.png',
                'region_name' => 'Region B',
            ],
        ];

        foreach ($subDealers as $dealer) {
            $region = SubDealerRegion::where('name', $dealer['region_name'])->first();

            User::create([
                'name' => $dealer['name'],
                'email' => $dealer['email'],
                'password' => $dealer['password'],
                'phone' => $dealer['phone'],
                'address' => $dealer['address'],
                'banking_details' => $dealer['banking_details'],
                'vat_number' => $dealer['vat_number'],
                'logo_path' => $dealer['logo_path'],
                'role' => 'sub_dealer',
                'region_id' => $region ? $region->id : null, // safe fallback
            ]);
        }
    }
}


--- FILE: database\seeders\SystemSettingsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class SystemSettingsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('system_settings')->insert([
            [
                'key'   => 'site_name',
                'value' => 'MMS Design CRM',
            ],
            [
                'key'   => 'default_currency',
                'value' => 'ZAR',
            ],
            [
                'key'   => 'default_vat_percentage',
                'value' => '15',
            ],
            [
                'key'   => 'quote_prefix',
                'value' => 'Q-',
            ],
            [
                'key'   => 'invoice_prefix',
                'value' => 'INV-',
            ],
            [
                'key'   => 'default_terms_id',
                'value' => '1',
            ],
            [
                'key'   => 'default_email_from',
                'value' => 'crm@mmsdesign.co.za',
            ],
        ]);
    }
}


--- FILE: database\seeders\TermsSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class TermsSeeder extends Seeder
{
    public function run(): void
    {
        DB::table('terms_conditions')->insert([
            'title' => 'Standard MMS Quote Terms',
            'content' => '
                1. All prices exclude VAT unless otherwise stated.<br>
                2. Validity of this quotation is 14 days from issue date.<br>
                3. Goods remain the property of MMS Design until full payment is received.<br>
                4. Delivery subject to stock availability.<br>
                5. Warranty as per manufacturer terms.<br>
                6. Payment terms: 50% deposit on order, balance on delivery.<br>
                7. Bank Details:<br>
                Bank: XYZ Bank<br>
                Account No: 123456789<br>
                Branch Code: 12345<br>
                Swift Code: XYZABC<br>
                8. Contact us for any clarifications.<br>
            ',
            'is_default' => true,
            'created_at' => now(),
            'updated_at' => now(),
        ]);
    }
}

--- FILE: database\seeders\UsersSeeder.php ---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Carbon\Carbon;

class UsersSeeder extends Seeder
{
    public function run(): void
    {
        // Admin user
        DB::table('users')->updateOrInsert(
            ['email' => 'admin@example.com'],
            [
                'name' => 'Admin User',
                'password' => Hash::make('password'),
                'role_id' => 1, // Master Admin
                'updated_at' => Carbon::now(),
                'created_at' => Carbon::now(),
            ]
        );

        // Key Dealer user
        DB::table('users')->updateOrInsert(
            ['email' => 'keydealer@example.com'],
            [
                'name' => 'Key Dealer User',
                'password' => Hash::make('password'),
                'role_id' => 2, // Key Dealer
                'updated_at' => Carbon::now(),
                'created_at' => Carbon::now(),
            ]
        );

        // Sub Dealer user
        DB::table('users')->updateOrInsert(
            ['email' => 'subdealer@example.com'],
            [
                'name' => 'Sub Dealer User',
                'password' => Hash::make('password'),
                'role_id' => 3, // Sub Dealer
                'updated_at' => Carbon::now(),
                'created_at' => Carbon::now(),
            ]
        );
    }
}


===== FOLDER: public =====

--- FILE: public\index.php ---
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());


===== FOLDER: public/css =====

===== FOLDER: public/js =====

===== FOLDER: public/js/filament =====

===== FOLDER: resources =====

--- FILE: resources\views\dashboard.blade.php ---
<!DOCTYPE html>
<html>
<head>
    <title>CRM Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container py-5">
        <h1 class="mb-4">Welcome, {{ Auth::user()->name }}!</h1>

        <div class="row g-3">

            <div class="col-md-4">
                <a href="{{ route('customers.index') }}" class="btn btn-primary w-100">
                    Manage Customers
                </a>
            </div>

            <div class="col-md-4">
                <a href="{{ route('quotes.index') }}" class="btn btn-success w-100">
                    Manage Quotes
                </a>
            </div>

            <div class="col-md-4">
                <a href="{{ route('invoices.index') }}" class="btn btn-warning w-100">
                    Manage Invoices
                </a>
            </div>

            <div class="col-md-4 mt-3">
                <a href="{{ route('kits.index') }}" class="btn btn-info w-100">
                    Manage Kits
                </a>
            </div>

            <div class="col-md-4 mt-3">
                <a href="{{ url('/') }}" class="btn btn-secondary w-100">
                    Back to Welcome
                </a>
            </div>

            <div class="col-md-4 mt-3">
                <form method="POST" action="{{ route('logout') }}">
                    @csrf
                    <button type="submit" class="btn btn-danger w-100">
                        Logout
                    </button>
                </form>
            </div>

        </div>
    </div>
</body>
</html>

--- FILE: resources\views\welcome.blade.php ---
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to MMS Design CRM</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container text-center py-5">
        <h1 class="mb-4">Welcome to MMS Design Dealer & Sub-Dealer CRM</h1>
        <p class="lead">Manage your customers, quotes, invoices, and kits — all in one place.</p>

        @if (Route::has('login'))
            <div class="mt-4">
                @auth
                    <a href="{{ url('/dashboard') }}" class="btn btn-primary">Go to Dashboard</a>
                @else
                    <a href="{{ route('login') }}" class="btn btn-success">Login</a>

                    @if (Route::has('register'))
                        <a href="{{ route('register') }}" class="btn btn-secondary ms-2">Register</a>
                    @endif
                @endauth
            </div>
        @endif
    </div>
</body>
</html>

--- FILE: resources\views\customers\index.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Customers</h1>
@include('partials.alerts')
<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Company</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Phone</th>
                <th>VAT Number</th>
            </tr>
        </thead>
        <tbody>
            {{-- @foreach ($customers as $customer) --}}
            <tr>
                <td>Example Co.</td>
                <td>John Doe</td>
                <td>john@example.com</td>
                <td>+123456789</td>
                <td>1234567890</td>
            </tr>
            {{-- @endforeach --}}
        </tbody>
    </table>
</div>
@endsection

--- FILE: resources\views\dashboards\dealer.blade.php ---
{{-- resources/views/dashboards/dealer.blade.php --}}
@extends('layouts.app-with-sidebar')

@section('content')
@php
  $dealerId = Auth::user()->dealer_id ?? 'default';
  $embedUrl = "https://mmsdesign-crm-dash.lovable.app/embed?filter=dealer/{$dealerId}";
@endphp
<div class="lovable-dashboard-wrapper position-relative" style="padding-top: 56.25%;">
  <iframe
    src="{{ $embedUrl }}"
    style="position: absolute; top:0; left:0; width:100%; height:100%; border:none;"
    title="MMS Design CRM Dealer Dashboard">
  </iframe>
</div>
@endsection


--- FILE: resources\views\dashboards\internal.blade.php ---
{{-- resources/views/dashboards/internal.blade.php --}}
@extends('layouts.app-with-sidebar')

@section('content')
<div class="lovable-dashboard-wrapper position-relative" style="padding-top: 56.25%;">
  <iframe
    src="https://mmsdesign-crm-dash.lovable.app/embed"
    style="position: absolute; top:0; left:0; width:100%; height:100%; border:none;"
    title="MMS Design CRM Internal Dashboard">
  </iframe>
</div>
@endsection

--- FILE: resources\views\dealers\index.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Dealers</h1>
@include('partials.alerts')
<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Dealer Name</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            {{-- @foreach ($dealers as $dealer) --}}
            <tr>
                <td>Awesome Dealer</td>
                <td>Jane Doe</td>
                <td>jane@dealer.com</td>
                <td>+987654321</td>
            </tr>
            {{-- @endforeach --}}
        </tbody>
    </table>
</div>
@endsection

--- FILE: resources\views\emails\invoices\invoice_sent.blade.php ---
@component('mail::message')
# Invoice {{ $invoice->invoice_number }}

Dear {{ $invoice->customer->company_name }},

Thank you for your interest. Please find attached your invoice.

If you have any questions, feel free to contact us.

Best regards,  
{{ $invoice->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\invoices\sent.blade.php ---
@component('mail::message')
# {{ $invoice->invoice_type }} {{ $invoice->invoice_number }}

Dear {{ $invoice->customer->company_name }},

Please find attached your invoice.

Thank you for your business!

Kind regards,  
{{ $invoice->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\quotes\quote_sent.blade.php ---
@component('mail::message')
# Quote {{ $quote->quote_number }}

Dear {{ $quote->customer->company_name }},

Thank you for your interest. Please find attached your quote.

If you have any questions, feel free to contact us.

Best regards,  
{{ $quote->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\quotes\sent.blade.php ---
@component('mail::message')
# Quote {{ $quote->quote_number }}

Dear {{ $quote->customer->company_name }},

Thank you for your interest. Please find attached your quote.

If you have any questions, feel free to contact us.

Best regards,  
{{ $quote->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\invoices\show.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Invoice Details</h1>
@include('partials.alerts')
<div class="card">
    <div class="card-body">
        <h5>Invoice #12345</h5>
        <p><strong>Customer:</strong> Example Co.</p>
        <p><strong>Total:</strong> R 12,345.00</p>
        <a href="{{ asset('storage/invoices/sample.pdf') }}" target="_blank" class="btn btn-outline-primary">View PDF</a>
    </div>
</div>
@endsection

--- FILE: resources\views\layouts\app-with-sidebar.blade.php ---
<!DOCTYPE html>
<html lang="en" x-data="{ sidebarOpen: true, darkMode: false }" :class="{ 'dark': darkMode }">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ config('app.name', 'MMS Design CRM') }}</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="{{ asset('css/mms-brand.css') }}" rel="stylesheet">
    <script src="https://unpkg.com/alpinejs" defer></script>

    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        .sidebar {
            width: 250px;
            transition: transform 0.3s ease;
        }
        .sidebar-closed {
            transform: translateX(-100%);
        }
        .content {
            margin-left: 250px;
            transition: margin-left 0.3s ease;
        }
        .content-expanded {
            margin-left: 0;
        }
        .dark body {
            background-color: #1e1e1e;
            color: #f0f0f0;
        }
        .dark .sidebar {
            background-color: #2b2b2b;
        }
        .dark .content {
            background-color: #1e1e1e;
        }
    </style>
</head>
<body>
    <div class="d-flex">
        <!-- Sidebar -->
        <div :class="{'sidebar': true, 'position-fixed h-100 bg-dark text-white p-3': true, 'sidebar-closed': !sidebarOpen}">
            <h5>{{ config('app.name') }}</h5>
            <ul class="nav flex-column">
                <li class="nav-item"><a class="nav-link text-white" href="{{ route('dashboard') }}"><i class="bi bi-speedometer2"></i> Dashboard</a></li>
                <li class="nav-item d-flex justify-content-between align-items-center">
                    <a class="nav-link text-white" href="{{ route('customers.index') }}"><i class="bi bi-people"></i> Customers</a>
                    <span class="badge bg-danger">3</span>
                </li>
                <li class="nav-item d-flex justify-content-between align-items-center">
                    <a class="nav-link text-white" href="{{ route('quotes.index') }}"><i class="bi bi-file-earmark-text"></i> Quotes</a>
                    <span class="badge bg-primary">5</span>
                </li>
                <li class="nav-item"><a class="nav-link text-white" href="{{ route('invoices.index') }}"><i class="bi bi-receipt"></i> Invoices</a></li>
            </ul>
        </div>

        <!-- Main Content -->
        <div :class="{'content': true, 'content-expanded': !sidebarOpen}" class="flex-grow-1">
            <nav class="navbar navbar-light bg-light border-bottom px-3">
                <button class="btn btn-outline-success btn-sm me-2" @click="sidebarOpen = !sidebarOpen">
                    <i class="bi bi-list"></i>
                </button>
                <button class="btn btn-outline-dark btn-sm" @click="darkMode = !darkMode">
                    <i class="bi bi-moon-stars"></i>
                </button>
                <span class="ms-auto">Logged in as {{ Auth::user()->name ?? 'Guest' }}</span>
            </nav>
            <main class="p-4">
                @if (session('status'))
                    <div class="alert alert-success">{{ session('status') }}</div>
                @endif
                @if (session('error'))
                    <div class="alert alert-danger">{{ session('error') }}</div>
                @endif

                @yield('content')
            </main>
        </div>
    </div>
</body>
</html>


--- FILE: resources\views\layouts\app.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale() ?? 'en') }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="application-name" content="{{ config('app.name') }}">
    <meta name="csrf-token" content="{{ csrf_token() }}">
	<meta name="description" content="MMS Design CRM - Manage dealers, customers, products, and more.">
	<meta name="theme-color" content="#008e49">


    <title>{{ config('app.name', 'MMS Design CRM') }}</title>

    {{-- Favicon --}}
    <link rel="icon" type="image/png" href="{{ asset('images/WebIcon.png') }}">

    {{-- External Fonts (Optional) --}}
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">

    {{-- Custom CSS for MMS Design Brand --}}
    <link href="{{ asset('css/mms-brand.css') }}" rel="stylesheet">

    {{-- Bootstrap / Optional Vendor --}}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    {{-- App-wide Scripts/Styles --}}
    @vite(['resources/css/app.css', 'resources/js/app.js'])

    {{-- Filament Styles if used --}}
    @filamentStyles

    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        [x-cloak] {
            display: none !important;
        }
    </style>
</head>

<body class="bg-light text-dark">
    @include('partials.navbar')

    <main class="container-fluid py-4">
        @yield('content')
		
		@if (session('status'))
			<div class="alert alert-success">{{ session('status') }}</div>
		@endif

    </main>

    @include('partials.footer')

    {{-- Filament Scripts if used --}}
    @filamentScripts
</body>
</html>


--- FILE: resources\views\partials\alerts.blade.php ---
@if (session('status'))
<div class="alert alert-success">{{ session('status') }}</div>
@endif
@if (session('error'))
<div class="alert alert-danger">{{ session('error') }}</div>
@endif

--- FILE: resources\views\partials\footer.blade.php ---
{{-- resources/views/partials/footer.blade.php --}}
<footer class="footer mt-auto py-3 bg-dark text-white text-center">
    <div class="container">
        <span>&copy; {{ date('Y') }} {{ config('app.name') }}. All rights reserved.</span>
        <span class="d-block">Built with ❤️ by MMS Design</span>
    </div>
</footer>


--- FILE: resources\views\partials\header.blade.php ---
{{-- resources/views/partials/header.blade.php --}}
<header class="bg-light p-3 mb-3 border-bottom shadow-sm">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <h1 class="h4 m-0">@yield('page-title', 'Welcome')</h1>
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-secondary btn-sm" @click="darkMode = !darkMode">
                <i class="bi bi-moon-stars"></i>
            </button>
            <span class="badge bg-success">{{ Auth::user()->name ?? 'Guest' }}</span>
        </div>
    </div>
</header>


--- FILE: resources\views\partials\navbar.blade.php ---
{{-- resources/views/partials/navbar.blade.php --}}
<nav class="navbar navbar-expand-lg navbar-dark bg-success">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center" href="{{ url('/') }}">
            <img src="{{ asset('images/WebIcon.png') }}" alt="Logo" width="30" class="me-2">
            {{ config('app.name') }}
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard') }}"><i class="bi bi-speedometer2"></i> Dashboard</a>
                </li>
                @can('viewInternalDashboard')
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard.internal') }}"><i class="bi bi-bar-chart"></i> Internal Dashboard</a>
                </li>
                @endcan
                @can('viewDealerDashboard')
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard.dealer') }}"><i class="bi bi-graph-up"></i> Dealer Dashboard</a>
                </li>
                @endcan
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('customers.index') }}"><i class="bi bi-people"></i> Customers</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('quotes.index') }}"><i class="bi bi-file-earmark-text"></i> Quotes</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('invoices.index') }}"><i class="bi bi-receipt"></i> Invoices</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-person-circle"></i> {{ Auth::user()->name ?? 'Account' }}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="#">Profile</a></li>
                        <li><a class="dropdown-item" href="#">Settings</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="{{ route('logout') }}">Logout</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

--- FILE: resources\views\quotes\create.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Create Quote</h1>
@include('partials.alerts')
<form method="POST" action="{{ route('quotes.store') }}">
    @csrf
    <div class="mb-3">
        <label for="customer" class="form-label">Customer</label>
        <select id="customer" name="customer_id" class="form-select">
            {{-- @foreach ($customers as $customer) --}}
            <option value="1">Example Co.</option>
            {{-- @endforeach --}}
        </select>
    </div>
    <div id="quote-items">
        <div class="row g-2 mb-2">
            <div class="col">
                <input type="text" class="form-control" name="product[]" placeholder="Product Name">
            </div>
            <div class="col">
                <input type="number" class="form-control" name="qty[]" placeholder="Quantity">
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-secondary mb-3" onclick="addQuoteItem()">Add Item</button>
    <button type="submit" class="btn btn-primary">Generate Quote</button>
</form>

<script>
function addQuoteItem() {
    const container = document.getElementById('quote-items');
    const row = document.createElement('div');
    row.className = 'row g-2 mb-2';
    row.innerHTML = `
        <div class="col">
            <input type="text" class="form-control" name="product[]" placeholder="Product Name">
        </div>
        <div class="col">
            <input type="number" class="form-control" name="qty[]" placeholder="Quantity">
        </div>`;
    container.appendChild(row);
}
</script>
@endsection

===== FOLDER: resources/css =====

===== FOLDER: resources/js =====

===== FOLDER: resources/views =====

--- FILE: resources\views\dashboard.blade.php ---
<!DOCTYPE html>
<html>
<head>
    <title>CRM Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container py-5">
        <h1 class="mb-4">Welcome, {{ Auth::user()->name }}!</h1>

        <div class="row g-3">

            <div class="col-md-4">
                <a href="{{ route('customers.index') }}" class="btn btn-primary w-100">
                    Manage Customers
                </a>
            </div>

            <div class="col-md-4">
                <a href="{{ route('quotes.index') }}" class="btn btn-success w-100">
                    Manage Quotes
                </a>
            </div>

            <div class="col-md-4">
                <a href="{{ route('invoices.index') }}" class="btn btn-warning w-100">
                    Manage Invoices
                </a>
            </div>

            <div class="col-md-4 mt-3">
                <a href="{{ route('kits.index') }}" class="btn btn-info w-100">
                    Manage Kits
                </a>
            </div>

            <div class="col-md-4 mt-3">
                <a href="{{ url('/') }}" class="btn btn-secondary w-100">
                    Back to Welcome
                </a>
            </div>

            <div class="col-md-4 mt-3">
                <form method="POST" action="{{ route('logout') }}">
                    @csrf
                    <button type="submit" class="btn btn-danger w-100">
                        Logout
                    </button>
                </form>
            </div>

        </div>
    </div>
</body>
</html>

--- FILE: resources\views\welcome.blade.php ---
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to MMS Design CRM</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container text-center py-5">
        <h1 class="mb-4">Welcome to MMS Design Dealer & Sub-Dealer CRM</h1>
        <p class="lead">Manage your customers, quotes, invoices, and kits — all in one place.</p>

        @if (Route::has('login'))
            <div class="mt-4">
                @auth
                    <a href="{{ url('/dashboard') }}" class="btn btn-primary">Go to Dashboard</a>
                @else
                    <a href="{{ route('login') }}" class="btn btn-success">Login</a>

                    @if (Route::has('register'))
                        <a href="{{ route('register') }}" class="btn btn-secondary ms-2">Register</a>
                    @endif
                @endauth
            </div>
        @endif
    </div>
</body>
</html>

--- FILE: resources\views\customers\index.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Customers</h1>
@include('partials.alerts')
<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Company</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Phone</th>
                <th>VAT Number</th>
            </tr>
        </thead>
        <tbody>
            {{-- @foreach ($customers as $customer) --}}
            <tr>
                <td>Example Co.</td>
                <td>John Doe</td>
                <td>john@example.com</td>
                <td>+123456789</td>
                <td>1234567890</td>
            </tr>
            {{-- @endforeach --}}
        </tbody>
    </table>
</div>
@endsection

--- FILE: resources\views\dashboards\dealer.blade.php ---
{{-- resources/views/dashboards/dealer.blade.php --}}
@extends('layouts.app-with-sidebar')

@section('content')
@php
  $dealerId = Auth::user()->dealer_id ?? 'default';
  $embedUrl = "https://mmsdesign-crm-dash.lovable.app/embed?filter=dealer/{$dealerId}";
@endphp
<div class="lovable-dashboard-wrapper position-relative" style="padding-top: 56.25%;">
  <iframe
    src="{{ $embedUrl }}"
    style="position: absolute; top:0; left:0; width:100%; height:100%; border:none;"
    title="MMS Design CRM Dealer Dashboard">
  </iframe>
</div>
@endsection


--- FILE: resources\views\dashboards\internal.blade.php ---
{{-- resources/views/dashboards/internal.blade.php --}}
@extends('layouts.app-with-sidebar')

@section('content')
<div class="lovable-dashboard-wrapper position-relative" style="padding-top: 56.25%;">
  <iframe
    src="https://mmsdesign-crm-dash.lovable.app/embed"
    style="position: absolute; top:0; left:0; width:100%; height:100%; border:none;"
    title="MMS Design CRM Internal Dashboard">
  </iframe>
</div>
@endsection

--- FILE: resources\views\dealers\index.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Dealers</h1>
@include('partials.alerts')
<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Dealer Name</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            {{-- @foreach ($dealers as $dealer) --}}
            <tr>
                <td>Awesome Dealer</td>
                <td>Jane Doe</td>
                <td>jane@dealer.com</td>
                <td>+987654321</td>
            </tr>
            {{-- @endforeach --}}
        </tbody>
    </table>
</div>
@endsection

--- FILE: resources\views\emails\invoices\invoice_sent.blade.php ---
@component('mail::message')
# Invoice {{ $invoice->invoice_number }}

Dear {{ $invoice->customer->company_name }},

Thank you for your interest. Please find attached your invoice.

If you have any questions, feel free to contact us.

Best regards,  
{{ $invoice->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\invoices\sent.blade.php ---
@component('mail::message')
# {{ $invoice->invoice_type }} {{ $invoice->invoice_number }}

Dear {{ $invoice->customer->company_name }},

Please find attached your invoice.

Thank you for your business!

Kind regards,  
{{ $invoice->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\quotes\quote_sent.blade.php ---
@component('mail::message')
# Quote {{ $quote->quote_number }}

Dear {{ $quote->customer->company_name }},

Thank you for your interest. Please find attached your quote.

If you have any questions, feel free to contact us.

Best regards,  
{{ $quote->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\quotes\sent.blade.php ---
@component('mail::message')
# Quote {{ $quote->quote_number }}

Dear {{ $quote->customer->company_name }},

Thank you for your interest. Please find attached your quote.

If you have any questions, feel free to contact us.

Best regards,  
{{ $quote->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\invoices\show.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Invoice Details</h1>
@include('partials.alerts')
<div class="card">
    <div class="card-body">
        <h5>Invoice #12345</h5>
        <p><strong>Customer:</strong> Example Co.</p>
        <p><strong>Total:</strong> R 12,345.00</p>
        <a href="{{ asset('storage/invoices/sample.pdf') }}" target="_blank" class="btn btn-outline-primary">View PDF</a>
    </div>
</div>
@endsection

--- FILE: resources\views\layouts\app-with-sidebar.blade.php ---
<!DOCTYPE html>
<html lang="en" x-data="{ sidebarOpen: true, darkMode: false }" :class="{ 'dark': darkMode }">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ config('app.name', 'MMS Design CRM') }}</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="{{ asset('css/mms-brand.css') }}" rel="stylesheet">
    <script src="https://unpkg.com/alpinejs" defer></script>

    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        .sidebar {
            width: 250px;
            transition: transform 0.3s ease;
        }
        .sidebar-closed {
            transform: translateX(-100%);
        }
        .content {
            margin-left: 250px;
            transition: margin-left 0.3s ease;
        }
        .content-expanded {
            margin-left: 0;
        }
        .dark body {
            background-color: #1e1e1e;
            color: #f0f0f0;
        }
        .dark .sidebar {
            background-color: #2b2b2b;
        }
        .dark .content {
            background-color: #1e1e1e;
        }
    </style>
</head>
<body>
    <div class="d-flex">
        <!-- Sidebar -->
        <div :class="{'sidebar': true, 'position-fixed h-100 bg-dark text-white p-3': true, 'sidebar-closed': !sidebarOpen}">
            <h5>{{ config('app.name') }}</h5>
            <ul class="nav flex-column">
                <li class="nav-item"><a class="nav-link text-white" href="{{ route('dashboard') }}"><i class="bi bi-speedometer2"></i> Dashboard</a></li>
                <li class="nav-item d-flex justify-content-between align-items-center">
                    <a class="nav-link text-white" href="{{ route('customers.index') }}"><i class="bi bi-people"></i> Customers</a>
                    <span class="badge bg-danger">3</span>
                </li>
                <li class="nav-item d-flex justify-content-between align-items-center">
                    <a class="nav-link text-white" href="{{ route('quotes.index') }}"><i class="bi bi-file-earmark-text"></i> Quotes</a>
                    <span class="badge bg-primary">5</span>
                </li>
                <li class="nav-item"><a class="nav-link text-white" href="{{ route('invoices.index') }}"><i class="bi bi-receipt"></i> Invoices</a></li>
            </ul>
        </div>

        <!-- Main Content -->
        <div :class="{'content': true, 'content-expanded': !sidebarOpen}" class="flex-grow-1">
            <nav class="navbar navbar-light bg-light border-bottom px-3">
                <button class="btn btn-outline-success btn-sm me-2" @click="sidebarOpen = !sidebarOpen">
                    <i class="bi bi-list"></i>
                </button>
                <button class="btn btn-outline-dark btn-sm" @click="darkMode = !darkMode">
                    <i class="bi bi-moon-stars"></i>
                </button>
                <span class="ms-auto">Logged in as {{ Auth::user()->name ?? 'Guest' }}</span>
            </nav>
            <main class="p-4">
                @if (session('status'))
                    <div class="alert alert-success">{{ session('status') }}</div>
                @endif
                @if (session('error'))
                    <div class="alert alert-danger">{{ session('error') }}</div>
                @endif

                @yield('content')
            </main>
        </div>
    </div>
</body>
</html>


--- FILE: resources\views\layouts\app.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale() ?? 'en') }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="application-name" content="{{ config('app.name') }}">
    <meta name="csrf-token" content="{{ csrf_token() }}">
	<meta name="description" content="MMS Design CRM - Manage dealers, customers, products, and more.">
	<meta name="theme-color" content="#008e49">


    <title>{{ config('app.name', 'MMS Design CRM') }}</title>

    {{-- Favicon --}}
    <link rel="icon" type="image/png" href="{{ asset('images/WebIcon.png') }}">

    {{-- External Fonts (Optional) --}}
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">

    {{-- Custom CSS for MMS Design Brand --}}
    <link href="{{ asset('css/mms-brand.css') }}" rel="stylesheet">

    {{-- Bootstrap / Optional Vendor --}}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    {{-- App-wide Scripts/Styles --}}
    @vite(['resources/css/app.css', 'resources/js/app.js'])

    {{-- Filament Styles if used --}}
    @filamentStyles

    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        [x-cloak] {
            display: none !important;
        }
    </style>
</head>

<body class="bg-light text-dark">
    @include('partials.navbar')

    <main class="container-fluid py-4">
        @yield('content')
		
		@if (session('status'))
			<div class="alert alert-success">{{ session('status') }}</div>
		@endif

    </main>

    @include('partials.footer')

    {{-- Filament Scripts if used --}}
    @filamentScripts
</body>
</html>


--- FILE: resources\views\partials\alerts.blade.php ---
@if (session('status'))
<div class="alert alert-success">{{ session('status') }}</div>
@endif
@if (session('error'))
<div class="alert alert-danger">{{ session('error') }}</div>
@endif

--- FILE: resources\views\partials\footer.blade.php ---
{{-- resources/views/partials/footer.blade.php --}}
<footer class="footer mt-auto py-3 bg-dark text-white text-center">
    <div class="container">
        <span>&copy; {{ date('Y') }} {{ config('app.name') }}. All rights reserved.</span>
        <span class="d-block">Built with ❤️ by MMS Design</span>
    </div>
</footer>


--- FILE: resources\views\partials\header.blade.php ---
{{-- resources/views/partials/header.blade.php --}}
<header class="bg-light p-3 mb-3 border-bottom shadow-sm">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <h1 class="h4 m-0">@yield('page-title', 'Welcome')</h1>
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-secondary btn-sm" @click="darkMode = !darkMode">
                <i class="bi bi-moon-stars"></i>
            </button>
            <span class="badge bg-success">{{ Auth::user()->name ?? 'Guest' }}</span>
        </div>
    </div>
</header>


--- FILE: resources\views\partials\navbar.blade.php ---
{{-- resources/views/partials/navbar.blade.php --}}
<nav class="navbar navbar-expand-lg navbar-dark bg-success">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center" href="{{ url('/') }}">
            <img src="{{ asset('images/WebIcon.png') }}" alt="Logo" width="30" class="me-2">
            {{ config('app.name') }}
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard') }}"><i class="bi bi-speedometer2"></i> Dashboard</a>
                </li>
                @can('viewInternalDashboard')
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard.internal') }}"><i class="bi bi-bar-chart"></i> Internal Dashboard</a>
                </li>
                @endcan
                @can('viewDealerDashboard')
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard.dealer') }}"><i class="bi bi-graph-up"></i> Dealer Dashboard</a>
                </li>
                @endcan
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('customers.index') }}"><i class="bi bi-people"></i> Customers</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('quotes.index') }}"><i class="bi bi-file-earmark-text"></i> Quotes</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('invoices.index') }}"><i class="bi bi-receipt"></i> Invoices</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-person-circle"></i> {{ Auth::user()->name ?? 'Account' }}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="#">Profile</a></li>
                        <li><a class="dropdown-item" href="#">Settings</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="{{ route('logout') }}">Logout</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

--- FILE: resources\views\quotes\create.blade.php ---
@extends('layouts.app-with-sidebar')

@section('content')
<h1 class="mb-4">Create Quote</h1>
@include('partials.alerts')
<form method="POST" action="{{ route('quotes.store') }}">
    @csrf
    <div class="mb-3">
        <label for="customer" class="form-label">Customer</label>
        <select id="customer" name="customer_id" class="form-select">
            {{-- @foreach ($customers as $customer) --}}
            <option value="1">Example Co.</option>
            {{-- @endforeach --}}
        </select>
    </div>
    <div id="quote-items">
        <div class="row g-2 mb-2">
            <div class="col">
                <input type="text" class="form-control" name="product[]" placeholder="Product Name">
            </div>
            <div class="col">
                <input type="number" class="form-control" name="qty[]" placeholder="Quantity">
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-secondary mb-3" onclick="addQuoteItem()">Add Item</button>
    <button type="submit" class="btn btn-primary">Generate Quote</button>
</form>

<script>
function addQuoteItem() {
    const container = document.getElementById('quote-items');
    const row = document.createElement('div');
    row.className = 'row g-2 mb-2';
    row.innerHTML = `
        <div class="col">
            <input type="text" class="form-control" name="product[]" placeholder="Product Name">
        </div>
        <div class="col">
            <input type="number" class="form-control" name="qty[]" placeholder="Quantity">
        </div>`;
    container.appendChild(row);
}
</script>
@endsection

===== FOLDER: resources/views/emails =====

--- FILE: resources\views\emails\invoices\invoice_sent.blade.php ---
@component('mail::message')
# Invoice {{ $invoice->invoice_number }}

Dear {{ $invoice->customer->company_name }},

Thank you for your interest. Please find attached your invoice.

If you have any questions, feel free to contact us.

Best regards,  
{{ $invoice->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\invoices\sent.blade.php ---
@component('mail::message')
# {{ $invoice->invoice_type }} {{ $invoice->invoice_number }}

Dear {{ $invoice->customer->company_name }},

Please find attached your invoice.

Thank you for your business!

Kind regards,  
{{ $invoice->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\quotes\quote_sent.blade.php ---
@component('mail::message')
# Quote {{ $quote->quote_number }}

Dear {{ $quote->customer->company_name }},

Thank you for your interest. Please find attached your quote.

If you have any questions, feel free to contact us.

Best regards,  
{{ $quote->subdealer->company_name }}

@endcomponent


--- FILE: resources\views\emails\quotes\sent.blade.php ---
@component('mail::message')
# Quote {{ $quote->quote_number }}

Dear {{ $quote->customer->company_name }},

Thank you for your interest. Please find attached your quote.

If you have any questions, feel free to contact us.

Best regards,  
{{ $quote->subdealer->company_name }}

@endcomponent


===== FOLDER: resources/views/layouts =====

--- FILE: resources\views\layouts\app-with-sidebar.blade.php ---
<!DOCTYPE html>
<html lang="en" x-data="{ sidebarOpen: true, darkMode: false }" :class="{ 'dark': darkMode }">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ config('app.name', 'MMS Design CRM') }}</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="{{ asset('css/mms-brand.css') }}" rel="stylesheet">
    <script src="https://unpkg.com/alpinejs" defer></script>

    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        .sidebar {
            width: 250px;
            transition: transform 0.3s ease;
        }
        .sidebar-closed {
            transform: translateX(-100%);
        }
        .content {
            margin-left: 250px;
            transition: margin-left 0.3s ease;
        }
        .content-expanded {
            margin-left: 0;
        }
        .dark body {
            background-color: #1e1e1e;
            color: #f0f0f0;
        }
        .dark .sidebar {
            background-color: #2b2b2b;
        }
        .dark .content {
            background-color: #1e1e1e;
        }
    </style>
</head>
<body>
    <div class="d-flex">
        <!-- Sidebar -->
        <div :class="{'sidebar': true, 'position-fixed h-100 bg-dark text-white p-3': true, 'sidebar-closed': !sidebarOpen}">
            <h5>{{ config('app.name') }}</h5>
            <ul class="nav flex-column">
                <li class="nav-item"><a class="nav-link text-white" href="{{ route('dashboard') }}"><i class="bi bi-speedometer2"></i> Dashboard</a></li>
                <li class="nav-item d-flex justify-content-between align-items-center">
                    <a class="nav-link text-white" href="{{ route('customers.index') }}"><i class="bi bi-people"></i> Customers</a>
                    <span class="badge bg-danger">3</span>
                </li>
                <li class="nav-item d-flex justify-content-between align-items-center">
                    <a class="nav-link text-white" href="{{ route('quotes.index') }}"><i class="bi bi-file-earmark-text"></i> Quotes</a>
                    <span class="badge bg-primary">5</span>
                </li>
                <li class="nav-item"><a class="nav-link text-white" href="{{ route('invoices.index') }}"><i class="bi bi-receipt"></i> Invoices</a></li>
            </ul>
        </div>

        <!-- Main Content -->
        <div :class="{'content': true, 'content-expanded': !sidebarOpen}" class="flex-grow-1">
            <nav class="navbar navbar-light bg-light border-bottom px-3">
                <button class="btn btn-outline-success btn-sm me-2" @click="sidebarOpen = !sidebarOpen">
                    <i class="bi bi-list"></i>
                </button>
                <button class="btn btn-outline-dark btn-sm" @click="darkMode = !darkMode">
                    <i class="bi bi-moon-stars"></i>
                </button>
                <span class="ms-auto">Logged in as {{ Auth::user()->name ?? 'Guest' }}</span>
            </nav>
            <main class="p-4">
                @if (session('status'))
                    <div class="alert alert-success">{{ session('status') }}</div>
                @endif
                @if (session('error'))
                    <div class="alert alert-danger">{{ session('error') }}</div>
                @endif

                @yield('content')
            </main>
        </div>
    </div>
</body>
</html>


--- FILE: resources\views\layouts\app.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale() ?? 'en') }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="application-name" content="{{ config('app.name') }}">
    <meta name="csrf-token" content="{{ csrf_token() }}">
	<meta name="description" content="MMS Design CRM - Manage dealers, customers, products, and more.">
	<meta name="theme-color" content="#008e49">


    <title>{{ config('app.name', 'MMS Design CRM') }}</title>

    {{-- Favicon --}}
    <link rel="icon" type="image/png" href="{{ asset('images/WebIcon.png') }}">

    {{-- External Fonts (Optional) --}}
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">

    {{-- Custom CSS for MMS Design Brand --}}
    <link href="{{ asset('css/mms-brand.css') }}" rel="stylesheet">

    {{-- Bootstrap / Optional Vendor --}}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    {{-- App-wide Scripts/Styles --}}
    @vite(['resources/css/app.css', 'resources/js/app.js'])

    {{-- Filament Styles if used --}}
    @filamentStyles

    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        [x-cloak] {
            display: none !important;
        }
    </style>
</head>

<body class="bg-light text-dark">
    @include('partials.navbar')

    <main class="container-fluid py-4">
        @yield('content')
		
		@if (session('status'))
			<div class="alert alert-success">{{ session('status') }}</div>
		@endif

    </main>

    @include('partials.footer')

    {{-- Filament Scripts if used --}}
    @filamentScripts
</body>
</html>


===== FOLDER: resources/views/partials =====

--- FILE: resources\views\partials\alerts.blade.php ---
@if (session('status'))
<div class="alert alert-success">{{ session('status') }}</div>
@endif
@if (session('error'))
<div class="alert alert-danger">{{ session('error') }}</div>
@endif

--- FILE: resources\views\partials\footer.blade.php ---
{{-- resources/views/partials/footer.blade.php --}}
<footer class="footer mt-auto py-3 bg-dark text-white text-center">
    <div class="container">
        <span>&copy; {{ date('Y') }} {{ config('app.name') }}. All rights reserved.</span>
        <span class="d-block">Built with ❤️ by MMS Design</span>
    </div>
</footer>


--- FILE: resources\views\partials\header.blade.php ---
{{-- resources/views/partials/header.blade.php --}}
<header class="bg-light p-3 mb-3 border-bottom shadow-sm">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <h1 class="h4 m-0">@yield('page-title', 'Welcome')</h1>
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-secondary btn-sm" @click="darkMode = !darkMode">
                <i class="bi bi-moon-stars"></i>
            </button>
            <span class="badge bg-success">{{ Auth::user()->name ?? 'Guest' }}</span>
        </div>
    </div>
</header>


--- FILE: resources\views\partials\navbar.blade.php ---
{{-- resources/views/partials/navbar.blade.php --}}
<nav class="navbar navbar-expand-lg navbar-dark bg-success">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center" href="{{ url('/') }}">
            <img src="{{ asset('images/WebIcon.png') }}" alt="Logo" width="30" class="me-2">
            {{ config('app.name') }}
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard') }}"><i class="bi bi-speedometer2"></i> Dashboard</a>
                </li>
                @can('viewInternalDashboard')
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard.internal') }}"><i class="bi bi-bar-chart"></i> Internal Dashboard</a>
                </li>
                @endcan
                @can('viewDealerDashboard')
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('dashboard.dealer') }}"><i class="bi bi-graph-up"></i> Dealer Dashboard</a>
                </li>
                @endcan
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('customers.index') }}"><i class="bi bi-people"></i> Customers</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('quotes.index') }}"><i class="bi bi-file-earmark-text"></i> Quotes</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ route('invoices.index') }}"><i class="bi bi-receipt"></i> Invoices</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-person-circle"></i> {{ Auth::user()->name ?? 'Account' }}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="#">Profile</a></li>
                        <li><a class="dropdown-item" href="#">Settings</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="{{ route('logout') }}">Logout</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

===== FOLDER: routes =====

--- FILE: routes\api.php ---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

// API Routes - MMS CRM - FINAL VERSION 🚀

// PUBLIC TEST ROUTE (optional)
Route::get('/ping', function () {
    return response()->json(['status' => 'ok', 'message' => 'API is running 🚀']);
});

// AUTH MIDDLEWARE EXAMPLE (if needed)
// Route::middleware('auth:sanctum')->group(function () {

// --- QUOTES ---
Route::get('/quotes', 'App\Http\Controllers\QuoteController@index');
Route::get('/quotes/{id}', 'App\Http\Controllers\QuoteController@show');
Route::post('/quotes', 'App\Http\Controllers\QuoteController@store');
Route::put('/quotes/{id}', 'App\Http\Controllers\QuoteController@update');
Route::delete('/quotes/{id}', 'App\Http\Controllers\QuoteController@destroy');

// Special Quote Actions:
Route::post('/quotes/{id}/add-item', 'App\Http\Controllers\QuoteController@addItem');
Route::put('/quotes/{id}/mark-completed', 'App\Http\Controllers\QuoteController@markCompleted');
Route::put('/quotes/{id}/convert-to-invoice', 'App\Http\Controllers\QuoteController@convertToInvoice');

// --- INVOICES ---
Route::get('/invoices', 'App\Http\Controllers\InvoiceController@index');
Route::get('/invoices/{id}', 'App\Http\Controllers\InvoiceController@show');
Route::put('/invoices/{id}', 'App\Http\Controllers\InvoiceController@update');
Route::delete('/invoices/{id}', 'App\Http\Controllers\InvoiceController@destroy');

// --- PRODUCTS ---
Route::get('/products', 'App\Http\Controllers\ProductController@index');
Route::get('/products/{id}', 'App\Http\Controllers\ProductController@show');
Route::post('/products', 'App\Http\Controllers\ProductController@store');
Route::put('/products/{id}', 'App\Http\Controllers\ProductController@update');
Route::delete('/products/{id}', 'App\Http\Controllers\ProductController@destroy');

// --- KITS ---
Route::get('/kits', 'App\Http\Controllers\KitController@index');
Route::get('/kits/{id}', 'App\Http\Controllers\KitController@show');
Route::post('/kits', 'App\Http\Controllers\KitController@store');
Route::put('/kits/{id}', 'App\Http\Controllers\KitController@update');
Route::delete('/kits/{id}', 'App\Http\Controllers\KitController@destroy');

// --- CUSTOMERS ---
Route::get('/customers', 'App\Http\Controllers\CustomerController@index');
Route::get('/customers/{id}', 'App\Http\Controllers\CustomerController@show');
Route::post('/customers', 'App\Http\Controllers\CustomerController@store');
Route::delete('/customers/{id}', 'App\Http\Controllers\CustomerController@destroy');

// --- DEALERS ---
Route::get('/dealers', 'App\Http\Controllers\DealerController@index');
Route::get('/dealers/{id}', 'App\Http\Controllers\DealerController@show');
Route::post('/dealers', 'App\Http\Controllers\DealerController@store');
Route::delete('/dealers/{id}', 'App\Http\Controllers\DealerController@destroy');

// --- SUB-DEALERS ---
Route::get('/subdealers', 'App\Http\Controllers\SubDealerController@index');
Route::get('/subdealers/{id}', 'App\Http\Controllers\SubDealerController@show');

// --- USERS ---
Route::get('/users', 'App\Http\Controllers\UserController@index');
Route::get('/users/{id}', 'App\Http\Controllers\UserController@show');
Route::post('/users', 'App\Http\Controllers\UserController@store');
Route::delete('/users/{id}', 'App\Http\Controllers\UserController@destroy');

// --- ROLES ---
Route::get('/roles', 'App\Http\Controllers\RolesController@index');
Route::post('/roles', 'App\Http\Controllers\RolesController@store');

// --- PERMISSIONS ---
Route::get('/permissions', 'App\Http\Controllers\PermissionsController@index');
Route::post('/permissions', 'App\Http\Controllers\PermissionsController@store');

// }); // END AUTH GROUP (if using Sanctum / Passport later)


--- FILE: routes\console.php ---
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');


--- FILE: routes\web.php ---
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\QuoteController;
use App\Http\Controllers\InvoiceController;
use App\Http\Controllers\CustomerController;
use App\Http\Controllers\SubDealerController;
use App\Http\Controllers\ProductController;
use App\Http\Controllers\KitController;
use App\Http\Controllers\TermsConditionController;

// Dashboard
Route::get('/', [DashboardController::class, 'index'])->name('dashboard');

// Quotes
Route::resource('quotes', QuoteController::class);

// Invoices
Route::resource('invoices', InvoiceController::class);

// Customers
Route::resource('customers', CustomerController::class);

// Sub-Dealers
Route::resource('subdealers', SubDealerController::class);

// Products
Route::resource('products', ProductController::class);

// Kits
Route::resource('kits', KitController::class);

// Terms & Conditions
Route::resource('terms', TermsConditionController::class);

// 🚀 NEW ROUTES for sending emails
Route::post('/quotes/{id}/send', [QuoteController::class, 'sendQuote']);
Route::post('/invoices/{id}/send', [InvoiceController::class, 'sendInvoice']);

// 🚀 NEW ROUTE for dashboard/internal
Route::middleware(['auth', 'can:viewInternalDashboard'])->get('/dashboard/internal', function () {
    return view('dashboards.internal');
})->name('dashboard.internal');

// Internal Dashboard (Admins, Internal Users)
Route::middleware(['auth', 'can:viewInternalDashboard'])->group(function () {
    Route::get('/dashboard/internal', function () {
        return view('dashboards.internal');
    })->name('dashboard.internal');
});

// Dealer Dashboard (Key Dealer, Sub-Dealer)
Route::middleware(['auth', 'can:viewDealerDashboard'])->group(function () {
    Route::get('/dashboard/dealer', function () {
        return view('dashboards.dealer');
    })->name('dashboard.dealer');
});

// UI routes for pre-built views
Route::middleware(['auth'])->group(function () {
    Route::get('/customers/view', [App\Http\Controllers\CustomerController::class, 'indexView'])->name('customers.indexView');
    Route::get('/dealers/view', [App\Http\Controllers\DealerController::class, 'indexView'])->name('dealers.indexView');
    Route::get('/quotes/create/view', [App\Http\Controllers\QuoteController::class, 'createView'])->name('quotes.createView');
    Route::get('/invoices/view/{id}', [App\Http\Controllers\InvoiceController::class, 'showView'])->name('invoices.showView');
});

===== FOLDER: storage =====

--- FILE: storage\framework\cache\facade-1e06026dbe325cba543b2306bd7e55d66d31e4c1.php ---
<?php

namespace Facades\Livewire\Features\SupportFileUploads;

use Illuminate\Support\Facades\Facade;

/**
 * @mixin \Livewire\Features\SupportFileUploads\GenerateSignedUploadUrl
 */
class GenerateSignedUploadUrl extends Facade
{
    /**
     * Get the registered name of the component.
     */
    protected static function getFacadeAccessor(): string
    {
        return 'Livewire\Features\SupportFileUploads\GenerateSignedUploadUrl';
    }
}


